apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${projectName}-${lowercase(procName)}
  labels: {$eval: labels}
spec:
  replicas: REPLICA_CONFIG_STRING
  selector:
      matchLabels: {$eval: labels}
  template:
    metadata:
      annotations:
        checksum/secret: '{{ include (print $.Template.BasePath "/${projectName}-secret.yaml") . | sha256sum }}'
      labels:
        $if: 'exposesMetrics'
        then:
          $merge:
            - {$eval: labels}
            - 'prometheus.io/scrape': 'true'
              'prometheus.io/port': '9100'
        else:
          {$eval: labels}
    spec:
      serviceAccountName: ${projectName}
      imagePullSecrets: IMAGE_PULL_SECRETS_STRING
      # allow server to terminate gracefully while still serving existing connections
      # new connections would be rejected as server will be closed
      # and under normal conditions pod will stop faster than this timeout
      terminationGracePeriodSeconds: 210
      containers:
      - name: ${projectName}-${lowercase(procName)}
        image: '{{ .Values.dockerImage }}'
        imagePullPolicy: Always
        args: ['${serviceName}/${procName}']
        resources:
          requests:
            cpu: '{{ .Values.${configName}.procs.${configProcName}.cpu }}'
            memory: '{{ .Values.${configName}.procs.${configProcName}.memory }}'
        env:
          $flatten:
            - $if: 'needsService'
              then:
                name: PORT
                value: '80'
            - name: TASKCLUSTER_ROOT_URL
              value: '{{ .Values.rootUrl }}'
            - name: USE_KUBERNETES_DNS_SERVICE_DISCOVERY
              value: '{{ .Values.useKubernetesDnsServiceDiscovery }}'
            - name: NODE_ENV
              value: 'production'
        envFrom:
            - secretRef:
                name: ${projectName}
            - configMapRef:
                name: ${projectName}
        ports:
        - $if: 'needsService'
          then:
            containerPort: 80
        - $if: 'exposesMetrics'
          then:
            name: prometheus
            containerPort: 9100
            protocol: TCP
        readinessProbe:
          $if: 'needsService'
          then:
            httpGet:
              path: ${readinessPath}
              port: 80
            timeoutSeconds: 5
            periodSeconds: 10
            initialDelaySeconds: 6
        livenessProbe:
          $if: 'needsService'
          then:
            httpGet:
              path: ${readinessPath}
              port: 80
            timeoutSeconds: 3
            initialDelaySeconds: 15
            periodSeconds: 30
          else:
            exec:
              command:
              - /bin/sh
              - -c
              - exit $(awk 'BEGIN{srand(); print (rand() > 0.3)}')
            initialDelaySeconds: 432000 # 5 days
            periodSeconds: 60
            failureThreshold: 1
        # allow graceful termination of existing connections and let them finish
        lifecycle:
          $if: 'needsService'
          then:
            preStop:
              exec:
                command: ['/bin/sh', '-c', 'sleep 120']
