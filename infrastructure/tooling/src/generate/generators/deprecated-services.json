{
  "AwsProvisioner": {
    "reference": {
      "$schema": "/schemas/common/api-reference-v0.json#",
      "apiVersion": "v1",
      "description": "The AWS Provisioner is responsible for provisioning instances on EC2 for use in\nTaskcluster.  The provisioner maintains a set of worker configurations which\ncan be managed with an API that is typically available at\naws-provisioner.taskcluster.net/v1.  This API can also perform basic instance\nmanagement tasks in addition to maintaining the internal state of worker type\nconfiguration information.\n\nThe Provisioner runs at a configurable interval.  Each iteration of the\nprovisioner fetches a current copy the state that the AWS EC2 api reports.  In\neach iteration, we ask the Queue how many tasks are pending for that worker\ntype.  Based on the number of tasks pending and the scaling ratio, we may\nsubmit requests for new instances.  We use pricing information, capacity and\nutility factor information to decide which instance type in which region would\nbe the optimal configuration.\n\nEach EC2 instance type will declare a capacity and utility factor.  Capacity is\nthe number of tasks that a given machine is capable of running concurrently.\nUtility factor is a relative measure of performance between two instance types.\nWe multiply the utility factor by the spot price to compare instance types and\nregions when making the bidding choices.\n\nWhen a new EC2 instance is instantiated, its user data contains a token in\n`securityToken` that can be used with the `getSecret` method to retrieve\nthe worker's credentials and any needed passwords or other restricted\ninformation.  The worker is responsible for deleting the secret after\nretrieving it, to prevent dissemination of the secret to other proceses\nwhich can read the instance user data.\n",
      "entries": [
        {
          "args": [
          ],
          "description": "Return a list of worker types, including some summary information about\ncurrent capacity for each.  While this list includes all defined worker types,\nthere may be running EC2 instances for deleted worker types that are not\nincluded here.  The list is unordered.",
          "method": "get",
          "name": "listWorkerTypeSummaries",
          "output": "v1/list-worker-types-summaries-response.json#",
          "query": [
          ],
          "route": "/list-worker-type-summaries",
          "stability": "stable",
          "title": "List worker types with details",
          "type": "function"
        },
        {
          "args": [
            "workerType"
          ],
          "description": "Create a worker type.  A worker type contains all the configuration\nneeded for the provisioner to manage the instances.  Each worker type\nknows which regions and which instance types are allowed for that\nworker type.  Remember that Capacity is the number of concurrent tasks\nthat can be run on a given EC2 resource and that Utility is the relative\nperformance rate between different instance types.  There is no way to\nconfigure different regions to have different sets of instance types\nso ensure that all instance types are available in all regions.\nThis function is idempotent.\n\nOnce a worker type is in the provisioner, a back ground process will\nbegin creating instances for it based on its capacity bounds and its\npending task count from the Queue.  It is the worker's responsibility\nto shut itself down.  The provisioner has a limit (currently 96hours)\nfor all instances to prevent zombie instances from running indefinitely.\n\nThe provisioner will ensure that all instances created are tagged with\naws resource tags containing the provisioner id and the worker type.\n\nIf provided, the secrets in the global, region and instance type sections\nare available using the secrets api.  If specified, the scopes provided\nwill be used to generate a set of temporary credentials available with\nthe other secrets.",
          "input": "v1/create-worker-type-request.json#",
          "method": "put",
          "name": "createWorkerType",
          "output": "v1/get-worker-type-response.json#",
          "query": [
          ],
          "route": "/worker-type/<workerType>",
          "scopes": "aws-provisioner:manage-worker-type:<workerType>",
          "stability": "stable",
          "title": "Create new Worker Type",
          "type": "function"
        },
        {
          "args": [
            "workerType"
          ],
          "description": "Provide a new copy of a worker type to replace the existing one.\nThis will overwrite the existing worker type definition if there\nis already a worker type of that name.  This method will return a\n200 response along with a copy of the worker type definition created\nNote that if you are using the result of a GET on the worker-type\nend point that you will need to delete the lastModified and workerType\nkeys from the object returned, since those fields are not allowed\nthe request body for this method\n\nOtherwise, all input requirements and actions are the same as the\ncreate method.",
          "input": "v1/create-worker-type-request.json#",
          "method": "post",
          "name": "updateWorkerType",
          "output": "v1/get-worker-type-response.json#",
          "query": [
          ],
          "route": "/worker-type/<workerType>/update",
          "scopes": "aws-provisioner:manage-worker-type:<workerType>",
          "stability": "stable",
          "title": "Update Worker Type",
          "type": "function"
        },
        {
          "args": [
            "workerType"
          ],
          "description": "This method is provided to allow workers to see when they were\nlast modified.  The value provided through UserData can be\ncompared against this value to see if changes have been made\nIf the worker type definition has not been changed, the date\nshould be identical as it is the same stored value.",
          "method": "get",
          "name": "workerTypeLastModified",
          "output": "v1/get-worker-type-last-modified.json#",
          "query": [
          ],
          "route": "/worker-type-last-modified/<workerType>",
          "stability": "stable",
          "title": "Get Worker Type Last Modified Time",
          "type": "function"
        },
        {
          "args": [
            "workerType"
          ],
          "description": "Retrieve a copy of the requested worker type definition.\nThis copy contains a lastModified field as well as the worker\ntype name.  As such, it will require manipulation to be able to\nuse the results of this method to submit date to the update\nmethod.",
          "method": "get",
          "name": "workerType",
          "output": "v1/get-worker-type-response.json#",
          "query": [
          ],
          "route": "/worker-type/<workerType>",
          "scopes": {
            "AnyOf": [
              "aws-provisioner:view-worker-type:<workerType>",
              "aws-provisioner:manage-worker-type:<workerType>"
            ]
          },
          "stability": "stable",
          "title": "Get Worker Type",
          "type": "function"
        },
        {
          "args": [
            "workerType"
          ],
          "description": "Delete a worker type definition.  This method will only delete\nthe worker type definition from the storage table.  The actual\ndeletion will be handled by a background worker.  As soon as this\nmethod is called for a worker type, the background worker will\nimmediately submit requests to cancel all spot requests for this\nworker type as well as killing all instances regardless of their\nstate.  If you want to gracefully remove a worker type, you must\neither ensure that no tasks are created with that worker type name\nor you could theoretically set maxCapacity to 0, though, this is\nnot a supported or tested action",
          "method": "delete",
          "name": "removeWorkerType",
          "query": [
          ],
          "route": "/worker-type/<workerType>",
          "scopes": "aws-provisioner:manage-worker-type:<workerType>",
          "stability": "stable",
          "title": "Delete Worker Type",
          "type": "function"
        },
        {
          "args": [
          ],
          "description": "Return a list of string worker type names.  These are the names\nof all managed worker types known to the provisioner.  This does\nnot include worker types which are left overs from a deleted worker\ntype definition but are still running in AWS.",
          "method": "get",
          "name": "listWorkerTypes",
          "output": "v1/list-worker-types-response.json#",
          "query": [
          ],
          "route": "/list-worker-types",
          "stability": "stable",
          "title": "List Worker Types",
          "type": "function"
        },
        {
          "args": [
            "token"
          ],
          "description": "Insert a secret into the secret storage.  The supplied secrets will\nbe provided verbatime via `getSecret`, while the supplied scopes will\nbe converted into credentials by `getSecret`.\n\nThis method is not ordinarily used in production; instead, the provisioner\ncreates a new secret directly for each spot bid.",
          "input": "v1/create-secret-request.json#",
          "method": "put",
          "name": "createSecret",
          "query": [
          ],
          "route": "/secret/<token>",
          "scopes": "aws-provisioner:create-secret:<workerType>",
          "stability": "stable",
          "title": "Create new Secret",
          "type": "function"
        },
        {
          "args": [
            "token"
          ],
          "description": "Retrieve a secret from storage.  The result contains any passwords or\nother restricted information verbatim as well as a temporary credential\nbased on the scopes specified when the secret was created.\n\nIt is important that this secret is deleted by the consumer (`removeSecret`),\nor else the secrets will be visible to any process which can access the\nuser data associated with the instance.",
          "method": "get",
          "name": "getSecret",
          "output": "v1/get-secret-response.json#",
          "query": [
          ],
          "route": "/secret/<token>",
          "stability": "stable",
          "title": "Get a Secret",
          "type": "function"
        },
        {
          "args": [
            "instanceId",
            "token"
          ],
          "description": "An instance will report in by giving its instance id as well\nas its security token.  The token is given and checked to ensure\nthat it matches a real token that exists to ensure that random\nmachines do not check in.  We could generate a different token\nbut that seems like overkill",
          "method": "get",
          "name": "instanceStarted",
          "query": [
          ],
          "route": "/instance-started/<instanceId>/<token>",
          "stability": "stable",
          "title": "Report an instance starting",
          "type": "function"
        },
        {
          "args": [
            "token"
          ],
          "description": "Remove a secret.  After this call, a call to `getSecret` with the given\ntoken will return no information.\n\nIt is very important that the consumer of a \nsecret delete the secret from storage before handing over control\nto untrusted processes to prevent credential and/or secret leakage.",
          "method": "delete",
          "name": "removeSecret",
          "query": [
          ],
          "route": "/secret/<token>",
          "stability": "stable",
          "title": "Remove a Secret",
          "type": "function"
        },
        {
          "args": [
            "workerType"
          ],
          "description": "This method returns a preview of all possible launch specifications\nthat this worker type definition could submit to EC2.  It is used to\ntest worker types, nothing more\n\n**This API end-point is experimental and may be subject to change without warning.**",
          "method": "get",
          "name": "getLaunchSpecs",
          "output": "v1/get-launch-specs-response.json#",
          "query": [
          ],
          "route": "/worker-type/<workerType>/launch-specifications",
          "scopes": {
            "AnyOf": [
              "aws-provisioner:view-worker-type:<workerType>",
              "aws-provisioner:manage-worker-type:<workerType>"
            ]
          },
          "stability": "experimental",
          "title": "Get All Launch Specifications for WorkerType",
          "type": "function"
        },
        {
          "args": [
            "workerType"
          ],
          "description": "Return the state of a given workertype as stored by the provisioner. \nThis state is stored as three lists: 1 for running instances, 1 for\npending requests.  The `summary` property contains an updated summary\nsimilar to that returned from `listWorkerTypeSummaries`.",
          "method": "get",
          "name": "state",
          "query": [
          ],
          "route": "/state/<workerType>",
          "stability": "stable",
          "title": "Get AWS State for a worker type",
          "type": "function"
        },
        {
          "args": [
          ],
          "description": "This endpoint is used to show when the last time the provisioner\nhas checked in.  A check in is done through the deadman's snitch\napi.  It is done at the conclusion of a provisioning iteration\nand used to tell if the background provisioning process is still\nrunning.\n\n**Warning** this api end-point is **not stable**.",
          "method": "get",
          "name": "backendStatus",
          "output": "v1/backend-status-response.json#",
          "query": [
          ],
          "route": "/backend-status",
          "stability": "experimental",
          "title": "Backend Status",
          "type": "function"
        },
        {
          "args": [
          ],
          "description": "Respond without doing anything.\nThis endpoint is used to check that the service is up.",
          "method": "get",
          "name": "ping",
          "query": [
          ],
          "route": "/ping",
          "stability": "stable",
          "title": "Ping Server",
          "type": "function"
        }
      ],
      "serviceName": "aws-provisioner",
      "title": "AWS Provisioner API Documentation"
    }
  },
  "EC2Manager": {
    "reference": {
      "$schema": "/schemas/common/api-reference-v0.json#",
      "description": "A taskcluster service which manages EC2 instances.  This service does not understand any taskcluster concepts intrinsicaly other than using the name `workerType` to refer to a group of associated instances.  Unless you are working on building a provisioner for AWS, you almost certainly do not want to use this service",
      "apiVersion": "v1",
      "entries": [
        {
          "args": [
          ],
          "description": "Respond without doing anything.\nThis endpoint is used to check that the service is up.",
          "method": "get",
          "name": "ping",
          "query": [
          ],
          "route": "/ping",
          "stability": "stable",
          "title": "Ping Server",
          "type": "function"
        },
        {
          "args": [
          ],
          "description": "This method is only for debugging the ec2-manager",
          "method": "get",
          "name": "listWorkerTypes",
          "output": "v1/list-worker-types.json#",
          "query": [
          ],
          "route": "/worker-types",
          "stability": "experimental",
          "title": "See the list of worker types which are known to be managed",
          "type": "function"
        },
        {
          "args": [
            "workerType"
          ],
          "description": "Request an instance of a worker type",
          "input": "v1/run-instance-request.json#",
          "method": "put",
          "name": "runInstance",
          "query": [
          ],
          "route": "/worker-types/<workerType>/instance",
          "scopes": "ec2-manager:manage-resources:<workerType>",
          "stability": "experimental",
          "title": "Run an instance",
          "type": "function"
        },
        {
          "args": [
            "workerType"
          ],
          "description": "Terminate all instances for this worker type",
          "method": "delete",
          "name": "terminateWorkerType",
          "query": [
          ],
          "route": "/worker-types/<workerType>/resources",
          "scopes": "ec2-manager:manage-resources:<workerType>",
          "stability": "experimental",
          "title": "Terminate all resources from a worker type",
          "type": "function"
        },
        {
          "args": [
            "workerType"
          ],
          "description": "Return an object which has a generic state description. This only contains counts of instances",
          "method": "get",
          "name": "workerTypeStats",
          "output": "v1/worker-type-resources.json#",
          "query": [
          ],
          "route": "/worker-types/<workerType>/stats",
          "stability": "experimental",
          "title": "Look up the resource stats for a workerType",
          "type": "function"
        },
        {
          "args": [
            "workerType"
          ],
          "description": "Return a view of the health of a given worker type",
          "method": "get",
          "name": "workerTypeHealth",
          "output": "v1/health.json#",
          "query": [
          ],
          "route": "/worker-types/<workerType>/health",
          "stability": "experimental",
          "title": "Look up the resource health for a workerType",
          "type": "function"
        },
        {
          "args": [
            "workerType"
          ],
          "description": "Return a list of the most recent errors encountered by a worker type",
          "method": "get",
          "name": "workerTypeErrors",
          "output": "v1/errors.json#",
          "query": [
          ],
          "route": "/worker-types/<workerType>/errors",
          "stability": "experimental",
          "title": "Look up the most recent errors of a workerType",
          "type": "function"
        },
        {
          "args": [
            "workerType"
          ],
          "description": "Return state information for a given worker type",
          "method": "get",
          "name": "workerTypeState",
          "output": "v1/worker-type-state.json#",
          "query": [
          ],
          "route": "/worker-types/<workerType>/state",
          "stability": "experimental",
          "title": "Look up the resource state for a workerType",
          "type": "function"
        },
        {
          "args": [
            "name"
          ],
          "description": "Idempotently ensure that a keypair of a given name exists",
          "input": "v1/create-key-pair.json#",
          "method": "get",
          "name": "ensureKeyPair",
          "query": [
          ],
          "route": "/key-pairs/<name>",
          "scopes": "ec2-manager:manage-key-pairs:<name>",
          "stability": "experimental",
          "title": "Ensure a KeyPair for a given worker type exists",
          "type": "function"
        },
        {
          "args": [
            "name"
          ],
          "description": "Ensure that a keypair of a given name does not exist.",
          "method": "delete",
          "name": "removeKeyPair",
          "query": [
          ],
          "route": "/key-pairs/<name>",
          "scopes": "ec2-manager:manage-key-pairs:<name>",
          "stability": "experimental",
          "title": "Ensure a KeyPair for a given worker type does not exist",
          "type": "function"
        },
        {
          "args": [
            "region",
            "instanceId"
          ],
          "description": "Terminate an instance in a specified region",
          "method": "delete",
          "name": "terminateInstance",
          "query": [
          ],
          "route": "/region/<region>/instance/<instanceId>",
          "scopes": {
            "AnyOf": [
              "ec2-manager:manage-instances:<region>:<instanceId>",
              {
                "if": "hasWorkerType",
                "then": "ec2-manager:manage-resources:<workerType>"
              }
            ]
          },
          "stability": "experimental",
          "title": "Terminate an instance",
          "type": "function"
        },
        {
          "args": [
          ],
          "description": "Return a list of possible prices for EC2",
          "method": "get",
          "name": "getPrices",
          "output": "v1/prices.json#",
          "query": [
          ],
          "route": "/prices",
          "stability": "experimental",
          "title": "Request prices for EC2",
          "type": "function"
        },
        {
          "args": [
          ],
          "description": "Return a list of possible prices for EC2",
          "input": "v1/prices-request.json#",
          "method": "post",
          "name": "getSpecificPrices",
          "output": "v1/prices.json#",
          "query": [
          ],
          "route": "/prices",
          "stability": "experimental",
          "title": "Request prices for EC2",
          "type": "function"
        },
        {
          "args": [
          ],
          "description": "Give some basic stats on the health of our EC2 account",
          "method": "get",
          "name": "getHealth",
          "output": "v1/health.json#",
          "query": [
          ],
          "route": "/health",
          "stability": "experimental",
          "title": "Get EC2 account health metrics",
          "type": "function"
        },
        {
          "args": [
          ],
          "description": "Return a list of recent errors encountered",
          "method": "get",
          "name": "getRecentErrors",
          "output": "v1/errors.json#",
          "query": [
          ],
          "route": "/errors",
          "stability": "experimental",
          "title": "Look up the most recent errors in the provisioner across all worker types",
          "type": "function"
        },
        {
          "args": [
          ],
          "description": "This method is only for debugging the ec2-manager",
          "method": "get",
          "name": "regions",
          "query": [
          ],
          "route": "/internal/regions",
          "scopes": "ec2-manager:internals",
          "stability": "experimental",
          "title": "See the list of regions managed by this ec2-manager",
          "type": "function"
        },
        {
          "args": [
          ],
          "description": "List AMIs and their usage by returning a list of objects in the form:\n{\nregion: string\n  volumetype: string\n  lastused: timestamp\n}",
          "method": "get",
          "name": "amiUsage",
          "query": [
          ],
          "route": "/internal/ami-usage",
          "scopes": "ec2-manager:internals",
          "stability": "experimental",
          "title": "See the list of AMIs and their usage",
          "type": "function"
        },
        {
          "args": [
          ],
          "description": "Lists current EBS volume usage by returning a list of objects\nthat are uniquely defined by {region, volumetype, state} in the form:\n{\nregion: string,\n  volumetype: string,\n  state: string,\n  totalcount: integer,\n  totalgb: integer,\n  touched: timestamp (last time that information was updated),\n}",
          "method": "get",
          "name": "ebsUsage",
          "query": [
          ],
          "route": "/internal/ebs-usage",
          "scopes": "ec2-manager:internals",
          "stability": "experimental",
          "title": "See the current EBS volume usage list",
          "type": "function"
        },
        {
          "args": [
          ],
          "description": "This method is only for debugging the ec2-manager",
          "method": "get",
          "name": "dbpoolStats",
          "query": [
          ],
          "route": "/internal/db-pool-stats",
          "scopes": "ec2-manager:internals",
          "stability": "experimental",
          "title": "Statistics on the Database client pool",
          "type": "function"
        },
        {
          "args": [
          ],
          "description": "This method is only for debugging the ec2-manager",
          "method": "get",
          "name": "allState",
          "query": [
          ],
          "route": "/internal/all-state",
          "scopes": "ec2-manager:internals",
          "stability": "experimental",
          "title": "List out the entire internal state",
          "type": "function"
        },
        {
          "args": [
          ],
          "description": "This method is only for debugging the ec2-manager",
          "method": "get",
          "name": "sqsStats",
          "query": [
          ],
          "route": "/internal/sqs-stats",
          "scopes": "ec2-manager:internals",
          "stability": "experimental",
          "title": "Statistics on the sqs queues",
          "type": "function"
        },
        {
          "args": [
          ],
          "description": "This method is only for debugging the ec2-manager",
          "method": "get",
          "name": "purgeQueues",
          "query": [
          ],
          "route": "/internal/purge-queues",
          "scopes": "ec2-manager:internals",
          "stability": "experimental",
          "title": "Purge the SQS queues",
          "type": "function"
        }
      ],
      "serviceName": "ec2-manager",
      "title": "EC2 Instance Manager"
    }
  }
}
