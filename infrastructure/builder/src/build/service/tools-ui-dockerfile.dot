# The tools site runs `yarn build` at deploy time, since that is the only way
# to inject configuration. So, the same Docker image must be able to build
# (requiring node) and serve (requiring nginx).  We build from the desired
# node image, installing nginx on top of it.
#
# See: https://bugzilla.mozilla.org/show_bug.cgi?id=1458150

FROM {{=it.nodeImage}}

# this is copied from
#  https://github.com/nginxinc/docker-nginx/blob/590f9ba27d6d11da346440682891bee6694245f5/mainline/stretch/Dockerfile
# with
# * gnupg1 -> gnupg2
# * non-amd64 arch support removed

ENV NGINX_VERSION 1.13.12-1~stretch
ENV NJS_VERSION   1.13.12.0.2.0-1~stretch

RUN set -x \
       && apt-get update \
       && apt-get install --no-install-recommends --no-install-suggests -y gnupg2 apt-transport-https ca-certificates \
       && \
       NGINX_GPGKEY=573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62; \
       found=''; \
       for server in \
               ha.pool.sks-keyservers.net \
               hkp://keyserver.ubuntu.com:80 \
               hkp://p80.pool.sks-keyservers.net:80 \
               pgp.mit.edu \
       ; do \
               echo "Fetching GPG key $NGINX_GPGKEY from $server"; \
               apt-key adv --keyserver "$server" --keyserver-options timeout=10 --recv-keys "$NGINX_GPGKEY" && found=yes && break; \
       done; \
       test -z "$found" && echo >&2 "error: failed to fetch GPG key $NGINX_GPGKEY" && exit 1; \
       apt-get remove --purge --auto-remove -y gnupg2 && rm -rf /var/lib/apt/lists/* \
       && dpkgArch="$(dpkg --print-architecture)" \
       && nginxPackages=" \
               nginx=${NGINX_VERSION} \
               nginx-module-xslt=${NGINX_VERSION} \
               nginx-module-geoip=${NGINX_VERSION} \
               nginx-module-image-filter=${NGINX_VERSION} \
               nginx-module-njs=${NJS_VERSION} \
       " \
       && case "$dpkgArch" in \
               amd64|i386) \
# arches officialy built by upstream
                       echo "deb https://nginx.org/packages/mainline/debian/ stretch nginx" >> /etc/apt/sources.list.d/nginx.list \
                       && apt-get update \
                       ;; \
               *) \
            echo "unsupported architecture" && exit 1 \
            ;; \
       esac \
       \
       && apt-get install --no-install-recommends --no-install-suggests -y \
                                               $nginxPackages \
                                               gettext-base \
       && apt-get remove --purge --auto-remove -y apt-transport-https ca-certificates && rm -rf /var/lib/apt/lists/* /etc/apt/sources.list.d/nginx.list \
       \
# if we have leftovers from building, let's purge them (including extra, unnecessary build deps)
       && if [ -n "$tempDir" ]; then \
               apt-get purge -y --auto-remove \
               && rm -rf "$tempDir" /etc/apt/sources.list.d/temp.list; \
       fi

# forward request and error logs to docker log collector
RUN ln -sf /dev/stdout /var/log/nginx/access.log \
       && ln -sf /dev/stderr /var/log/nginx/error.log

EXPOSE 80

STOPSIGNAL SIGTERM

## -- end nginx Dockerfile --

COPY nginx-site.conf /etc/nginx/conf.d/default.conf
COPY app /app

# on start, run `yarn build` before starting nginx
CMD ["sh", "-c", "cd /app && yarn build && exec nginx -g 'daemon off;'"]
