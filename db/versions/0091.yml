version: 91
description: migrate existing azure queue messages into new tables

migrationScript: 0091-migration.sql
downgradeScript: 0091-downgrade.sql

methods:
  azure_queue_get:
    deprecated: true
  azure_queue_count:
    deprecated: true
  azure_queue_delete:
    deprecated: true
  azure_queue_update:
    deprecated: true
  azure_queue_put_extra:
    deprecated: true
  azure_queue_delete_expired:
    deprecated: true


  # queue_pending_tasks indexes:
  #  (task_queue_id, priority, inserted)
  #  (task_id) unique
  queue_pending_tasks_get:
    description: |
      Get up to `count` messages from the given taskQueueId.
      tbd..
      this mimics `azure_queue_get`
      is `visible` field necessary ?? or just setting and un-setting `pop_receipt` is enough
    mode: write
    serviceName: queue
    args: task_queue_id_in text, count integer
    returns: table (task_id text, run_id integer, hint_id text, pop_receipt uuid)
    body: |-
      begin
        return query
          with updated as (
            update queue_pending_tasks q
            set pop_receipt = public.gen_random_uuid()
            where
              q.task_id in (
                select q2.task_id
                from queue_pending_tasks q2
                where q2.task_queue_id = task_queue_id_in
                  and q2.expires > now()
                  and q2.pop_receipt is null
                order by q2.priority desc, q2.inserted_at asc
                for update skip locked
                limit count
            )
            returning q.priority, q.inserted_at, q.task_id, q.run_id, q.hint_id, q.pop_receipt
          )
          select u.task_id, u.run_id, u.hint_id, u.pop_receipt
          from updated as u
          order by u.priority desc, u.inserted_at asc;
      end

  queue_pending_tasks_put:
    description: |
      Put the task into the pending queue.
      When record already exists, we update the priority, run_id, hint_id and expiration.
    mode: write
    serviceName: queue
    args: task_queue_id_in text, priority_in integer, task_id_in text, run_id_in integer, hint_id_in text, expires_in timestamp
    returns: void
    body: |-
      begin
        insert into queue_pending_tasks (task_queue_id, priority, task_id, run_id, hint_id, inserted_at, expires)
        values (
          task_queue_id_in,
          priority_in,
          task_id_in,
          run_id_in,
          hint_id_in,
          now(),
          expires_in
        )
        on conflict (task_id) do update
          set
            expires = greatest(coalesce(expires_in, queue_pending_tasks.expires), queue_pending_tasks.expires),
            priority = priority_in,
            run_id = greatest(run_id_in, queue_pending_tasks.run_id),
            hint_id = hint_id_in
          where
            queue_pending_tasks.task_queue_id = task_queue_id_in
            and queue_pending_tasks.task_id = task_id_in
            and queue_pending_tasks.pop_receipt is null;
      end

  queue_pending_tasks_release:
    description: |
      Release task back to the queue to be picked up by another worker.
    mode: write
    serviceName: queue
    args: task_id_in text, pop_receipt_in uuid
    returns: void
    body: |-
      begin
        update queue_pending_tasks
        set pop_receipt = null
        where task_id = task_id_in
          and pop_receipt = pop_receipt_in;
      end

  queue_pending_tasks_delete:
    description: |
      Delete pending task from the queue.
    mode: write
    serviceName: queue
    args: task_id_in text, pop_receipt_in uuid
    returns: void
    body: |-
      begin
        delete from queue_pending_tasks
        where task_id = task_id_in
          and pop_receipt = pop_receipt_in;
      end

  queue_pending_tasks_delete_expired:
    description: |
      Delete all expired tasks.
    mode: write
    serviceName: queue
    args: ''
    returns: void
    body: |-
      begin
        delete from queue_pending_tasks
          where expires <= now();
      end


  # count pending messages per task queue
  queue_pending_tasks_count:
    description: |
      Count the number of pending messages for given task queue.
    mode: read
    serviceName: queue
    args: task_queue_id_in text
    returns: integer
    body: |-
      begin
        return (
          select count(*)
          from queue_pending_tasks
          where task_queue_id = task_queue_id_in
        );
      end

  # deadline queue
  queue_task_deadline_put:
    description: |
      Track task deadline
    mode: write
    serviceName: queue
    args: task_group_id_in text, task_id_in text, scheduler_id_in text, deadline_in timestamptz, visible_at timestamp
    returns: void
    body: |-
      begin
        insert into queue_task_deadlines (
          task_group_id,
          task_id,
          scheduler_id,
          created_at,
          deadline,
          visible_at
        )
        values (
          task_group_id_in,
          task_id_in,
          scheduler_id_in,
          now(),
          deadline_in,
          visible_at
        );
      end

  queue_task_deadline_get:
    description: |
      Get up to `count` messages from the deadline queue
    mode: write
    serviceName: queue
    args: visible_at_in timestamp, count integer
    returns: table (task_id text, task_group_id text, scheduler_id text, deadline timestamptz, pop_receipt uuid)
    body: |-
      begin
        return query
          with updated as (
            update queue_task_deadlines q
            set pop_receipt = public.gen_random_uuid(),
              visible_at = visible_at_in
            where
              q.task_id in (
                select q2.task_id
                from queue_task_deadlines q2
                where q2.visible_at <= now()
                order by q2.created_at
                for update skip locked
                limit count
            )
            returning q.task_id, q.task_group_id, q.scheduler_id, q.deadline, q.pop_receipt
          )
          select u.task_id, u.task_group_id, u.scheduler_id, u.deadline, u.pop_receipt
          from updated as u
          order by u.deadline;
      end

  queue_task_deadline_delete:
    description: |
      Delete deadline task
    mode: write
    serviceName: queue
    args: task_id_in text, pop_receipt_in uuid
    returns: void
    body: |-
      begin
        delete from queue_task_deadlines
        where task_id = task_id_in
          and pop_receipt = pop_receipt_in;
      end


  # claim queue
  queue_claimed_task_put:
    description: |
      Track when task was claimed and when it should be reclaimed
    mode: write
    serviceName: queue
    args: task_id_in text, run_id_in integer, taken_until_in timestamptz
    returns: void
    body: |-
      begin
        insert into queue_claimed_tasks (
          task_id,
          run_id,
          claimed_at,
          taken_until
        )
        values (
          task_id_in,
          run_id_in,
          now(),
          taken_until_in
        );
      end


  # resolved queue
  queue_resolved_task_put:
    description: |
      Track when task was resolved
    mode: write
    serviceName: queue
    args: task_group_id_in text, task_id_in text, scheduler_id_in text, resolution_in text
    returns: void
    body: |-
      begin
        insert into queue_resolved_tasks (
          task_group_id,
          task_id,
          scheduler_id,
          resolution,
          resolved_at
        )
        values (
          task_group_id_in,
          task_id_in,
          scheduler_id_in,
          resolution_in,
          now()
        );
      end
