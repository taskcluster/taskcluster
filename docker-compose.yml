x-autogenerated: This file is autogenerated
volumes:
  db-data: {}
networks:
  local:
    driver: bridge
services:
  rabbitmq:
    image: rabbitmq:3.7.8-management
    networks:
      - local
    healthcheck:
      test: rabbitmq-diagnostics ping
      interval: 3s
      timeout: 4s
      retries: 100
      start_period: 3s
    ports:
      - '5672:5672'
      - '15672:15672'
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
      RABBITMQ_DEFAULT_VHOST: local
  postgres:
    image: postgres:11
    networks:
      - local
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - '5432:5432'
    environment:
      POSTGRES_DB: taskcluster
      POSTGRES_HOST_AUTH_METHOD: trust
      LC_COLLATE: en_US.UTF8
      LC_CTYPE: en_US.UTF8
    healthcheck:
      test: pg_isready -U postgres
      interval: 3s
      timeout: 4s
      retries: 100
      start_period: 3s
  pg_init_db:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    x-info: Run this first to bring database up to date
    command:
      - script/db:upgrade
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      USERNAME_PREFIX: taskcluster
      ADMIN_DB_URL: postgresql://postgres@postgres:5432/taskcluster
  s3:
    image: minio/minio
    networks:
      - local
    command: server /data --console-address :9001
    ports:
      - '3090:9000'
      - '3091:9001'
    volumes:
      - ./docker/buckets:/data
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: miniopassword
    healthcheck:
      test: curl -I http://localhost:9000/minio/health/cluster
      interval: 3s
      timeout: 4s
      retries: 100
      start_period: 3s
  s3_init_buckets:
    image: minio/mc
    networks:
      - local
    depends_on:
      s3:
        condition: service_healthy
    entrypoint: /bin/sh -c "/usr/bin/mc config host rm local;/usr/bin/mc config host add --quiet --api s3v4 local http://s3:9000 minioadmin miniopassword;/usr/bin/mc rb --force local/public-bucket/;/usr/bin/mc mb --quiet local/public-bucket/;/usr/bin/mc policy set public local/public-bucket;/usr/bin/mc rb --force local/private-bucket/;/usr/bin/mc mb --quiet local/private-bucket/;/usr/bin/mc policy set public local/public-bucket;"
    environment:
      MINIO_ENDPOINT: http://s3:9000
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: miniopassword
  ui:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    env_file: ./docker/env/.ui
    command: ui/web
    ports:
      - '3022:80'
  references:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    command: references/web
    environment:
      TASKCLUSTER_ROOT_URL: http://taskcluster
    ports:
      - '3023:80'
  taskcluster:
    image: nginx:1.21.6
    networks:
      - local
    depends_on:
      - ui
      - web-server-web
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
    healthcheck:
      test: curl -I http://localhost/
      interval: 3s
      timeout: 4s
      retries: 100
      start_period: 3s
    ports:
      - '80:80'
  tc_admin_init:
    image: taskcluster/tc-admin:3.2.0
    networks:
      - local
    volumes:
      - ./docker/tc-admin:/app
    working_dir: /app
    x-info: This script provisions taskcluster configuration. See docker/tc-admin for details
    environment:
      TASKCLUSTER_ROOT_URL: http://taskcluster
      TASKCLUSTER_CLIENT_ID: static/taskcluster/root
      TASKCLUSTER_ACCESS_TOKEN: j2Z6zW2QSLehailBXlosdw9e2Ti8R_Qh2M4buAEQfsMA
    entrypoint: /bin/sh -c " echo 'Applying config'; tc-admin apply ||true; "
    depends_on:
      auth-web:
        condition: service_healthy
      hooks-web:
        condition: service_healthy
      queue-web:
        condition: service_healthy
      worker-manager-web:
        condition: service_healthy
      secrets-web:
        condition: service_healthy
      taskcluster:
        condition: service_healthy
  generic-worker-standalone:
    image: taskcluster/generic-worker:v44.20.4
    networks:
      - local
    restart: unless-stopped
    build:
      context: .
      dockerfile: generic-worker.Dockerfile
    volumes:
      - ./docker/generic-worker-config.json:/etc/generic-worker/config.json
      - ./docker/worker-runner-config.json:/etc/generic-worker/worker-runner.json
    command: standalone
    environment:
      TASKCLUSTER_ROOT_URL: http://taskcluster
      TASKCLUSTER_CLIENT_ID: static/generic-worker-compose-client
      TASKCLUSTER_ACCESS_TOKEN: j2Z6zW2QSLehailBXlosdw9e2Ti8R_Qh2M4buAEQfsMA
    depends_on:
      rabbitmq:
        condition: service_healthy
      auth-web:
        condition: service_healthy
      queue-web:
        condition: service_healthy
      taskcluster:
        condition: service_started
      tc_admin_init:
        condition: service_completed_successfully
  generic-worker-static:
    image: taskcluster/generic-worker:v44.20.4
    networks:
      - local
    restart: unless-stopped
    build:
      context: .
      dockerfile: generic-worker.Dockerfile
    volumes:
      - ./docker/generic-worker-config.json:/etc/generic-worker/config.json
      - ./docker/worker-runner-config.json:/etc/generic-worker/worker-runner.json
    command: static
    environment:
      TASKCLUSTER_ROOT_URL: http://taskcluster
      TASKCLUSTER_CLIENT_ID: static/generic-worker-compose-client
      TASKCLUSTER_ACCESS_TOKEN: j2Z6zW2QSLehailBXlosdw9e2Ti8R_Qh2M4buAEQfsMA
    profiles:
      - workers
    depends_on:
      rabbitmq:
        condition: service_healthy
      auth-web:
        condition: service_healthy
      queue-web:
        condition: service_healthy
      taskcluster:
        condition: service_started
      tc_admin_init:
        condition: service_completed_successfully
  auth-web:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    env_file: ./docker/env/.auth
    command:
      - auth/web
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: wget -q --spider http://localhost:80/api/auth/v1/ping
      interval: 3s
      timeout: 4s
      retries: 100
      start_period: 3s
    ports:
      - '3011:80'
  auth-cron-purgeExpiredClients:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    env_file: ./docker/env/.auth
    command:
      - auth/purgeExpiredClients
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    profiles:
      - cron
      - auth
      - auth-cron
  built-in-workers-server:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    env_file: ./docker/env/.built-in-workers
    command:
      - built-in-workers/server
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      queue-web:
        condition: service_healthy
  github-web:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    env_file: ./docker/env/.github
    command:
      - github/web
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: wget -q --spider http://localhost:80/api/github/v1/ping
      interval: 3s
      timeout: 4s
      retries: 100
      start_period: 3s
    ports:
      - '3012:80'
  github-background-worker:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    env_file: ./docker/env/.github
    command:
      - github/worker
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    profiles:
      - background
      - github
      - github-background
  github-cron-sync:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    env_file: ./docker/env/.github
    command:
      - github/sync
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    profiles:
      - cron
      - github
      - github-cron
  hooks-web:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    env_file: ./docker/env/.hooks
    command:
      - hooks/web
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: wget -q --spider http://localhost:80/api/hooks/v1/ping
      interval: 3s
      timeout: 4s
      retries: 100
      start_period: 3s
    ports:
      - '3013:80'
  hooks-background-scheduler:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    env_file: ./docker/env/.hooks
    command:
      - hooks/scheduler
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    profiles:
      - background
      - hooks
      - hooks-background
  hooks-background-listeners:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    env_file: ./docker/env/.hooks
    command:
      - hooks/listeners
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    profiles:
      - background
      - hooks
      - hooks-background
  hooks-cron-expires:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    env_file: ./docker/env/.hooks
    command:
      - hooks/expires
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    profiles:
      - cron
      - hooks
      - hooks-cron
  index-web:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    env_file: ./docker/env/.index
    command:
      - index/web
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: wget -q --spider http://localhost:80/api/index/v1/ping
      interval: 3s
      timeout: 4s
      retries: 100
      start_period: 3s
    ports:
      - '3014:80'
  index-background-handlers:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    env_file: ./docker/env/.index
    command:
      - index/handlers
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    profiles:
      - background
      - index
      - index-background
  index-cron-expire:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    env_file: ./docker/env/.index
    command:
      - index/expire
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    profiles:
      - cron
      - index
      - index-cron
  notify-web:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    env_file: ./docker/env/.notify
    command:
      - notify/web
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: wget -q --spider http://localhost:80/api/notify/v1/ping
      interval: 3s
      timeout: 4s
      retries: 100
      start_period: 3s
    ports:
      - '3015:80'
  notify-background-handler:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    env_file: ./docker/env/.notify
    command:
      - notify/handler
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    profiles:
      - background
      - notify
      - notify-background
  object-web:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    env_file: ./docker/env/.object
    command:
      - object/web
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      s3_init_buckets:
        condition: service_completed_successfully
    healthcheck:
      test: wget -q --spider http://localhost:80/api/object/v1/ping
      interval: 3s
      timeout: 4s
      retries: 100
      start_period: 3s
    ports:
      - '3016:80'
  object-cron-expire:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    env_file: ./docker/env/.object
    command:
      - object/expire
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      s3_init_buckets:
        condition: service_completed_successfully
    profiles:
      - cron
      - object
      - object-cron
  purge-cache-web:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    env_file: ./docker/env/.purge-cache
    command:
      - purge-cache/web
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: wget -q --spider http://localhost:80/api/purge-cache/v1/ping
      interval: 3s
      timeout: 4s
      retries: 100
      start_period: 3s
    ports:
      - '3017:80'
  purge-cache-cron-expireCachePurges:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    env_file: ./docker/env/.purge-cache
    command:
      - purge-cache/expireCachePurges
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    profiles:
      - cron
      - purge-cache
      - purge-cache-cron
  queue-web:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    env_file: ./docker/env/.queue
    command:
      - queue/web
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      s3_init_buckets:
        condition: service_completed_successfully
    healthcheck:
      test: wget -q --spider http://localhost:80/api/queue/v1/ping
      interval: 3s
      timeout: 4s
      retries: 100
      start_period: 3s
    ports:
      - '3018:80'
  queue-background-claimResolver:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    env_file: ./docker/env/.queue
    command:
      - queue/claimResolver
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      s3_init_buckets:
        condition: service_completed_successfully
    profiles:
      - background
      - queue
      - queue-background
  queue-background-deadlineResolver:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    env_file: ./docker/env/.queue
    command:
      - queue/deadlineResolver
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      s3_init_buckets:
        condition: service_completed_successfully
    profiles:
      - background
      - queue
      - queue-background
  queue-background-dependencyResolver:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    env_file: ./docker/env/.queue
    command:
      - queue/dependencyResolver
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      s3_init_buckets:
        condition: service_completed_successfully
    profiles:
      - background
      - queue
      - queue-background
  queue-cron-expireArtifacts:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    env_file: ./docker/env/.queue
    command:
      - queue/expireArtifacts
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      s3_init_buckets:
        condition: service_completed_successfully
    profiles:
      - cron
      - queue
      - queue-cron
  queue-cron-expireTask:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    env_file: ./docker/env/.queue
    command:
      - queue/expireTask
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      s3_init_buckets:
        condition: service_completed_successfully
    profiles:
      - cron
      - queue
      - queue-cron
  queue-cron-expireTaskGroups:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    env_file: ./docker/env/.queue
    command:
      - queue/expireTaskGroups
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      s3_init_buckets:
        condition: service_completed_successfully
    profiles:
      - cron
      - queue
      - queue-cron
  queue-cron-expireTaskDependency:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    env_file: ./docker/env/.queue
    command:
      - queue/expireTaskDependency
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      s3_init_buckets:
        condition: service_completed_successfully
    profiles:
      - cron
      - queue
      - queue-cron
  queue-cron-expireQueueMessages:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    env_file: ./docker/env/.queue
    command:
      - queue/expireQueueMessages
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      s3_init_buckets:
        condition: service_completed_successfully
    profiles:
      - cron
      - queue
      - queue-cron
  queue-cron-expireWorkerInfo:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    env_file: ./docker/env/.queue
    command:
      - queue/expireWorkerInfo
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      s3_init_buckets:
        condition: service_completed_successfully
    profiles:
      - cron
      - queue
      - queue-cron
  secrets-web:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    env_file: ./docker/env/.secrets
    command:
      - secrets/web
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: wget -q --spider http://localhost:80/api/secrets/v1/ping
      interval: 3s
      timeout: 4s
      retries: 100
      start_period: 3s
    ports:
      - '3019:80'
  secrets-cron-expire:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    env_file: ./docker/env/.secrets
    command:
      - secrets/expire
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    profiles:
      - cron
      - secrets
      - secrets-cron
  web-server-web:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    env_file: ./docker/env/.web-server
    command:
      - web-server/web
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: wget -q --spider http://localhost:3050/api/web-server/v1/ping
      interval: 3s
      timeout: 4s
      retries: 100
      start_period: 3s
    ports:
      - '3050:3050'
  web-server-cron-scanner:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    env_file: ./docker/env/.web-server
    command:
      - web-server/scanner
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    profiles:
      - cron
      - web-server
      - web-server-cron
  web-server-cron-cleanup-expire-auth-codes:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    env_file: ./docker/env/.web-server
    command:
      - web-server/cleanup-expire-auth-codes
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    profiles:
      - cron
      - web-server
      - web-server-cron
  web-server-cron-cleanup-expire-access-tokens:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    env_file: ./docker/env/.web-server
    command:
      - web-server/cleanup-expire-access-tokens
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    profiles:
      - cron
      - web-server
      - web-server-cron
  worker-manager-web:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    env_file: ./docker/env/.worker-manager
    command:
      - worker-manager/web
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: wget -q --spider http://localhost:80/api/worker-manager/v1/ping
      interval: 3s
      timeout: 4s
      retries: 100
      start_period: 3s
    ports:
      - '3020:80'
  worker-manager-background-provisioner:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    env_file: ./docker/env/.worker-manager
    command:
      - worker-manager/provisioner
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    profiles:
      - background
      - worker-manager
      - worker-manager-background
  worker-manager-background-workerscanner:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    env_file: ./docker/env/.worker-manager
    command:
      - worker-manager/workerscanner
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    profiles:
      - background
      - worker-manager
      - worker-manager-background
  worker-manager-background-workerscanner-azure:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    env_file: ./docker/env/.worker-manager
    command:
      - worker-manager/workerscanner-azure
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    profiles:
      - background
      - worker-manager
      - worker-manager-background
  worker-manager-cron-expire-workers:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    env_file: ./docker/env/.worker-manager
    command:
      - worker-manager/expire-workers
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    profiles:
      - cron
      - worker-manager
      - worker-manager-cron
  worker-manager-cron-expire-worker-pools:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    env_file: ./docker/env/.worker-manager
    command:
      - worker-manager/expire-worker-pools
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    profiles:
      - cron
      - worker-manager
      - worker-manager-cron
  worker-manager-cron-expire-errors:
    image: taskcluster/taskcluster:v44.20.4
    networks:
      - local
    env_file: ./docker/env/.worker-manager
    command:
      - worker-manager/expire-errors
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    profiles:
      - cron
      - worker-manager
      - worker-manager-cron
