version: 1
reporting: checks-v1
policy:
  pullRequests: public
tasks:
  $let:
    node: '10.15.1'
  in:
    $let:
      debug:
        $if: 'tasks_for == "github-push"'
        then:
          $if: 'event.head_commit.message[:7] == "DEBUG: "'
          then: ${event.head_commit.message[7:]}
          else: ''
        else: ''
      owner: taskcluster-internal@mozilla.com

      # This only supports pushes and pull requests for now.
      # If we start responding to another action type, make this
      # a $match.
      repo:
        $if: 'tasks_for == "github-push"'
        then:
          git_url: ${event.repository.url}
          url: ${event.repository.url}
          ref: ${event.after}
        else:
          git_url: ${event.pull_request.head.repo.git_url}
          url: ${event.pull_request.head.repo.url}
          ref: ${event.pull_request.head.sha}

      packages:
      - taskcluster-lib-api
      - taskcluster-lib-app
      - taskcluster-lib-azure
      - taskcluster-lib-docs
      - taskcluster-lib-iterate
      - taskcluster-lib-loader
      - taskcluster-lib-monitor
      - taskcluster-lib-pulse
      - taskcluster-lib-references
      - taskcluster-lib-scopes
      - taskcluster-lib-testing
      - typed-env-config
      - taskcluster-lib-validate
      - taskcluster-auth
      - taskcluster-built-in-workers
      - taskcluster-github
      - taskcluster-hooks
      - taskcluster-index
      - taskcluster-login
      - taskcluster-notify
      - taskcluster-purge-cache
      - taskcluster-queue
      - taskcluster-worker-manager
      - taskcluster-secrets
      - taskcluster-treeherder
      - taskcluster-builder
      - taskcluster-web-server
      others:
      - name: lint
        command: yarn lint
      - name: test:meta
        command: yarn test:meta
      - name: taskcluster-terraform
        image: 'jonatanblue/gitlab-ci-terraform:latest'
        command: 'cd infrastructure/terraform; terraform fmt -check'
      - name: yarn generate
        command: |
            yarn generate | cat &&
            if ! output=$(git status --porcelain) || [ -n "$output" ]; then
                echo "*** yarn generate produced changes to the repository; these changes should be checked in ***";
                git --no-pager diff;
                exit 1;
            fi
      - name: taskcluster-client
        # taskcluster-client tests depend on a "production" install of the rest of the monorepo,
        # but only get devDependencies from the client's package.json
        command: |
            set -x &&
            yarn install --production &&
            cd clients/client &&
            yarn &&
            yarn test &&
            yarn package-test
      - name: taskcluster-client-web
        image: 'taskcluster/browser-test:${node}'
        command: |
            cd clients/client-web &&
            yarn &&
            yarn lint &&
            { Xvfb :99 -screen 0 640x480x8 -nolisten tcp & } &&
            sleep 2 &&
            CHROME_BIN=firefox DISPLAY=:99 yarn test
      - name: taskcluster-ui
        image: 'taskcluster/browser-test:${node}'
        command: |
            cd ui &&
            yarn &&
            yarn lint &&
            { Xvfb :99 -screen 0 640x480x8 -nolisten tcp & } &&
            sleep 2 &&
            CHROME_BIN=firefox DISPLAY=:99 yarn test
    in:
      $let:
        js:
          $map:
            $flatten:
              # for "packages", run tests for that package
              - $map: {$eval: packages}
                each(package):
                  name: ${package}
                  image: node:${node}
                  command: yarn workspace ${package} test
              # for "others", do whatever they say to do
              - $map: {$eval: others}
                each(other):
                  name: ${other.name}
                  image:  # use `image` if given, falling back to the node image
                    $if: other['image']
                    then: ${other.image}
                    else: "node:${node}"
                  command: ${other.command}
          each(job):
            taskId: {$eval: as_slugid(job.name)}
            provisionerId: aws-provisioner-v1
            workerType: github-worker
            created: {$fromNow: ''}
            deadline: {$fromNow: '60 minutes'}
            scopes:
              - assume:project:taskcluster:tests:taskcluster
            payload:
              features:
                taskclusterProxy: true
              env:
                DEBUG: ${debug}
                NO_TEST_SKIP:
                  $if: 'job.name != "taskcluster-lib-testing"'
                  then: true
                TEST_BUCKET: 'test-bucket-for-any-garbage' # TODO: Allow each project to specify its own env
              maxRunTime: 3600
              image: ${job.image}
              command:
                - "/bin/bash"
                - "-lc"
                - >-
                  git clone --quiet --depth=1 --no-single-branch ${repo.git_url} taskcluster &&
                  cd taskcluster &&
                  git checkout ${repo.ref} &&
                  yarn --frozen-lockfile &&
                  ${job.command}
            metadata:
              name: ${job.name}
              description: ${job.name}
              owner: ${owner}
              source: ${repo.url}
      in:
        $flattenDeep:
        - $if: 'tasks_for == "github-push"'
          then: {$eval: js}
        - $if: 'tasks_for == "github-pull-request" && event["action"] in ["opened", "reopened", "synchronize"]'
          then:
            # We can skip this if pushed to our own repo since push event will get it
            $if: 'event.pull_request.base.repo.id != event.pull_request.head.repo.id'
            then: {$eval: js}
