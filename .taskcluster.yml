version: 1
reporting: checks-v1
policy:
  pullRequests: public
tasks:
  $let:
    node: '10.15.3'
  in:
    $let:
      debug:
        $if: 'tasks_for == "github-push"'
        then:
          $if: 'event.head_commit.message[:7] == "DEBUG: "'
          then: ${event.head_commit.message[7:]}
          else: ''
        else: ''
      owner: taskcluster-internal@mozilla.com

      # This only supports pushes and pull requests for now.
      # If we start responding to another action type, make this
      # a $match.
      repo:
        $if: 'tasks_for == "github-push"'
        then:
          git_url: ${event.repository.url}
          url: ${event.repository.url}
          ref: ${event.after}
        else:
          git_url: ${event.pull_request.head.repo.git_url}
          url: ${event.pull_request.head.repo.url}
          ref: ${event.pull_request.head.sha}

      # We keep the separate from "others" so that we can assert a 1-1 mapping onto existing packages
      packages:
      - name: taskcluster-lib-api
      - name: taskcluster-lib-app
      - name: taskcluster-lib-azure
      - name: taskcluster-lib-docs
      - name: taskcluster-lib-iterate
      - name: taskcluster-lib-loader
      - name: taskcluster-lib-monitor
      - name: taskcluster-lib-pulse
        image: taskcluster/rabbit-test:${node}
        env:
          PULSE_CONNECTION_STRING: amqp://guest:guest@localhost:5672/
        command: |
          service rabbitmq-server start &&
          yarn workspace taskcluster-lib-pulse test
      - name: taskcluster-lib-references
      - name: taskcluster-lib-scopes
      - name: taskcluster-lib-testing
      - name: taskcluster-lib-config
      - name: taskcluster-lib-validate
      - name: taskcluster-auth
        env:
          TEST_BUCKET: test-bucket-for-any-garbage
      - name: taskcluster-built-in-workers
      - name: taskcluster-github
      - name: taskcluster-hooks
      - name: taskcluster-index
      - name: taskcluster-login
      - name: taskcluster-notify
      - name: taskcluster-purge-cache
      - name: taskcluster-queue
      - name: taskcluster-worker-manager
      - name: taskcluster-secrets
      - name: taskcluster-treeherder
      - name: taskcluster-web-server
      others:
      - name: lint
        command: yarn lint
      - name: test:meta
        command: yarn test:meta
        # only do cleanup on pushes; no sense doing so on pull requests
      - $if: 'tasks_for == "github-push" && event["ref"] == "refs/heads/master"'
        then:
          name: test:cleanup
          command: yarn test:cleanup
      - name: taskcluster-terraform
        image: 'jonatanblue/gitlab-ci-terraform:latest'
        command: 'cd infrastructure/terraform; terraform fmt -check'
      - name: yarn generate
        command: |
            set -o pipefail &&
            yarn generate | cat &&
            if ! output=$(git status --porcelain) || [ -n "$output" ]; then
                echo "*** yarn generate produced changes to the repository; these changes should be checked in ***";
                git --no-pager diff;
                exit 1;
            fi
      - name: yarn build
        command: yarn build --dry-run
      - name: taskcluster-client
        # taskcluster-client tests depend on a "production" install of the rest of the monorepo,
        # but only get devDependencies from the client's package.json
        command: |
            set -x &&
            yarn install --production &&
            cd clients/client &&
            yarn &&
            yarn test &&
            yarn package-test
      - name: taskcluster-client-web
        image: 'taskcluster/browser-test:${node}'
        command: |
            cd clients/client-web &&
            yarn &&
            { Xvfb :99 -screen 0 640x480x8 -nolisten tcp & } &&
            sleep 2 &&
            CHROME_BIN=firefox DISPLAY=:99 yarn test
      - name: taskcluster-ui
        image: 'taskcluster/browser-test:${node}'
        command: |
            cd ui &&
            yarn &&
            yarn lint &&
            { Xvfb :99 -screen 0 640x480x8 -nolisten tcp & } &&
            sleep 2 &&
            CHROME_BIN=firefox DISPLAY=:99 yarn test
    in:
      $let:
        js:
          $map:
            $map:
              $flatten:
                - $eval: packages
                - $eval: others
            each(entry):
              name: ${entry.name}
              image:  # use `image` if given, falling back to the node image
                $if: entry['image']
                then: ${entry.image}
                else: "node:${node}"
              command:  # use `command` if given, falling back to basic yarn test
                $if: entry['command']
                then: ${entry.command}
                else: yarn workspace ${entry.name} test
              env: # add in any custom env vars that this package needs
                $if: entry['env']
                then: {$eval: entry.env}
                else: {}
          each(job):
            taskId: {$eval: as_slugid(job.name)}
            provisionerId: aws-provisioner-v1
            workerType: github-worker
            created: {$fromNow: ''}
            deadline: {$fromNow: '3 hours'}
            extra:
              notify:
                email:
                  subject: 'Failed: $${task.metadata.name} on taskcluster/taskcluster master'
            routes:
              $if: 'tasks_for == "github-push" && event["ref"] == "refs/heads/master"'
              then:
                - notify.email.${owner}.com.on-failed
                - notify.email.${owner}.com.on-exception
                - notify.irc-channel.#taskcluster-bots.on-any
            scopes:
              - assume:project:taskcluster:tests:taskcluster
              - docker-worker:cache:project-taskcluster-test-yarn-cache
            payload:
              features:
                taskclusterProxy: true
              env:
                $merge:
                - DEBUG: ${debug}
                  NO_TEST_SKIP:
                    $if: 'job.name != "taskcluster-lib-testing"'
                    then: true
                  YARN_CACHE_FOLDER: /yarn-cache
                - {$eval: job.env}
              maxRunTime: 1200
              onExitStatus:
                # the `yarn --frozen-lockfile` invocation will exit with this status if it fails,
                # in which case we want to retry (assuming it's some upstream issue)
                retry: [99]
              cache:
                  project-taskcluster-test-yarn-cache: /yarn-cache
              image: ${job.image}
              command:
                - "/bin/bash"
                - "-lc"
                - >-
                  git clone --quiet --depth=1 --no-single-branch ${repo.git_url} taskcluster &&
                  cd taskcluster &&
                  git checkout ${repo.ref} &&
                  { yarn --frozen-lockfile || exit 99; } &&
                  ${job.command}
            metadata:
              name: ${job.name}
              description: ${job.name}
              owner: ${owner}
              source: ${repo.url}
      in:
        $flattenDeep:
        - $if: 'tasks_for == "github-push"'
          then: {$eval: js}
        - $if: 'tasks_for == "github-pull-request" && event["action"] in ["opened", "reopened", "synchronize"]'
          then:
            # We can skip this if pushed to our own repo since push event will get it
            $if: 'event.pull_request.base.repo.id != event.pull_request.head.repo.id'
            then: {$eval: js}
