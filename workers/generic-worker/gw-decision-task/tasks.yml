###########################################################################
# Values in this file are generated by                                    #
# infrastructure/tooling/src/generate/generators/go-version.js and        #
# infrastructure/tooling/src/generate/generators/golangci-lint-version.js #
# DO NOT CHANGE HERE!                                                     #
###########################################################################
Types:
  BuildAndTest:
    Name: Build/test generic-worker (${ENGINE} engine) on ${PLATFORM}
    Description: This builds and tests the ${ARCH} version of generic-worker (${ENGINE} engine) on ${PLATFORM}
    Mounts:
      - go1.20.4
      - git2.39.1
      - jq1.6
      - ci-creds
      - golangci-lint-1.52.2
    Command: BuildAndTest
    Features:
      taskclusterProxy: true
    Scopes:
      - generic-worker:cache:generic-worker-checkout
      - secrets:get:project/taskcluster/testing/generic-worker/ci-creds
    Artifacts:
      - Name: public/build/generic-worker-${OS}-${ARCH}${EXTENSION}
        Path: gopath1.20.4/bin/generic-worker${EXTENSION}
        Type: file
    MaxRunTime: 3600
  FormatSource:
    Name: Run `go mod tidy`, `go fmt` and `goimports` against source code
    Description: |
      This task performs three formatting steps against the codebase, and
      ensures that no local changes are found after applying them:

      * `go mod tidy` (see the [go modules wiki page](https://github.com/golang/go/wiki/Modules)
        for more information)
      * `go fmt` to ensure that go source code is formatted
      * `goimports` to ensure that imports are specified in their canonical form
    Mounts:
      - go1.20.4
    Command: FormatSource
    MaxRunTime: 3600
Tasks:
  BuildAndTest:
    - WorkerPool: proj-taskcluster/gw-ci-macos-13
      Env:
        ENGINE: multiuser
    - WorkerPool: proj-taskcluster/gw-ci-ubuntu-22-04
      Env:
        ENGINE: multiuser
    - WorkerPool: proj-taskcluster/gw-ci-ubuntu-22-04
      Env:
        ENGINE: simple
    - WorkerPool: proj-taskcluster/gw-ci-windows-2022
      Env:
        ENGINE: multiuser
        GW_SKIP_Z_DRIVE_TESTS: 'true'
  FormatSource:
    - WorkerPool: proj-taskcluster/gw-ci-ubuntu-22-04
WorkerPools:
  proj-taskcluster/gw-ci-macos-13:
    Platform: macOS Ventura 13 (arm64)
    OS: darwin
    Arch: arm64
  proj-taskcluster/gw-ci-raspbian-stretch:
    Platform: Raspbian GNU/Linux 9 (stretch)
    OS: linux
    Arch: armv6l
  proj-taskcluster/gw-ci-ubuntu-22-04:
    Platform: Ubuntu 22.04 (amd64)
    OS: linux
    Arch: amd64
  proj-taskcluster/gw-ci-windows10-amd64:
    Platform: Windows 10 (amd64)
    OS: windows
    Arch: amd64
  proj-taskcluster/gw-ci-windows10-arm:
    Platform: Windows 10 (arm)
    OS: windows
    Arch: '386'
  proj-taskcluster/gw-ci-windows-2022:
    Platform: Windows Server 2022 (amd64)
    OS: windows
    Arch: amd64
  proj-taskcluster/gw-ci-windows7-386:
    Platform: Windows 7 (386)
    OS: windows
    Arch: '386'
Commands:
  FormatSource:
    Posix:
      - - /bin/bash
        - '-vxec'
        - |
          export CGO_ENABLED=0
          # The next line is edited by infrastructure/tooling/src/generate/generators/go-version.js
          #   DO NOT CHANGE HERE!
          export GOROOT="$(pwd)/go1.20.4/go"
          export PATH="${GOROOT}/bin:${PATH}"
          go version
          go env
          if [ ! -d taskcluster/.git ]; then
            rm -rf taskcluster
            git clone "${GITHUB_CLONE_URL}" taskcluster
          fi
          cd taskcluster
          git fetch "${GITHUB_CLONE_URL}" "+${GITHUB_SHA}:refs/heads/X${TASK_ID}"
          git checkout -f "X${TASK_ID}"
          git reset --hard "${GITHUB_SHA}"
          git clean -fdx
          git checkout -B tmp -t "X${TASK_ID}"
          go fmt ./...
          git diff
          test $(git status --porcelain | wc -l) == 0
          go mod tidy
          git diff
          test $(git status --porcelain | wc -l) == 0
          go install golang.org/x/tools/cmd/goimports
          # Run go mod tidy again since go get above will have messed it up.
          # Should be fixed in go 1.20.4; see:
          #   * https://github.com/golang/go/issues/30515#issuecomment-581984371
          "$(go env GOPATH)/bin/goimports" -w .
          git checkout -f go.mod go.sum
          git diff
          test $(git status --porcelain | wc -l) == 0
  BuildAndTest:
    Posix:
      - - /bin/bash
        - '-vxec'
        - |
          function b64 {
            [ "$(uname -s)" != "Darwin" ] || base64 -D
            [ "$(uname -s)" != "Linux" ]  || base64 -d
          }
          # go test: -race and -msan are only supported on linux/amd64, freebsd/amd64, darwin/amd64 and windows/amd64
          if [ "$(uname -m)" == "x86_64" ]; then
            RACE=-race
            CGO_ENABLED_TESTS=1
            # See https://github.com/golang/go/issues/27089#issuecomment-415329050
            VET=-vet=off
          else
            RACE=
            CGO_ENABLED_TESTS=0
            VET=
          fi
          export CGO_ENABLED=0

          # The next two lines are edited by infrastructure/tooling/src/generate/generators/go-version.js
          #   DO NOT CHANGE HERE!
          export GOROOT="$(pwd)/go1.20.4/go"
          export GOPATH="$(pwd)/gopath1.20.4"

          export PATH="${GOPATH}/bin:${GOROOT}/bin:$(pwd)/bin:${PATH}"
          git --version
          go version
          go env
          curl -s "${TASKCLUSTER_PROXY_URL}/secrets/v1/secret/project/taskcluster/testing/generic-worker/ci-creds" | sed -n 's/.*"b64_encoded_credentials_script": "\(.*\)".*/\1/p' | b64 > tc-creds.sh
          source tc-creds.sh
          if [ ! -d taskcluster/.git ]; then
            rm -rf taskcluster
            git clone "${GITHUB_CLONE_URL}" taskcluster
          fi
          cd taskcluster
          git fetch "${GITHUB_CLONE_URL}" "+${GITHUB_SHA}:refs/heads/X${TASK_ID}"
          git checkout -f "X${TASK_ID}"
          git reset --hard "${GITHUB_SHA}"
          git clean -fdx
          git checkout -B tmp -t "X${TASK_ID}"
          cd workers/generic-worker
          # go.mod and go.sum will be affected by above go get commands, so
          # tidy them before checking for changes. Not needed in go 1.20.4:
          # https://github.com/golang/go/issues/30515#issuecomment-581984371
          # TODO: use go get -modfile instead when running go 1.20.4, and remove
          # go mod tidy command
          go mod tidy
          git status
          # output of wc command can contain spaces on darwin, so no quotes around expression
          test $(git status --porcelain | wc -l) == 0
          go install -tags "${ENGINE}" -v -ldflags "-X main.revision=${GITHUB_SHA}" ./...
          go install ../../tools/taskcluster-proxy
          go install ../../tools/livelog
          go vet -tags "${ENGINE}" ./...
          if [ "${ENGINE}" == "multiuser" ]; then
            cp "${TASK_USER_CREDENTIALS}" next-task-user.json
            # IMPORTANT - run go test with GW_TESTS_RUN_AS_CURRENT_USER=true *before* running it without
            # otherwise tests that call `go run ....` will write go object files to .cache as root
            GW_TESTS_RUN_AS_CURRENT_USER=true GORACE=history_size=7 CGO_ENABLED=1 go test -tags "${ENGINE}" -failfast -timeout 45m -ldflags "-X github.com/taskcluster/taskcluster/v50/workers/generic-worker.revision=${GITHUB_SHA}" ${RACE} ${VET} .
          fi
          GORACE=history_size=7 CGO_ENABLED=${CGO_ENABLED_TESTS} go test -tags "${ENGINE}" -failfast -timeout 45m -ldflags "-X github.com/taskcluster/taskcluster/v50/workers/generic-worker.revision=${GITHUB_SHA}" ${RACE} ${VET} ./...

          # The next line is edited by infrastructure/tooling/src/generate/generators/golangci-lint-version.js
          #   DO NOT CHANGE HERE!
          ../../../golangci-lint/golangci-lint-1.52.2-*/golangci-lint run --build-tags "${ENGINE}" --timeout=15m
    Windows:
      - |
        :: go test: -race and -msan are only supported on linux/amd64, freebsd/amd64, darwin/amd64 and windows/amd64
        reg Query "HKLM\Hardware\Description\System\CentralProcessor\0" | find /i "Intel64" > NUL && (
          set RACE=-race
          set CGO_ENABLED_TESTS=1
          :: See https://github.com/golang/go/issues/27089#issuecomment-415329050
          set VET=-vet=off
        ) || (
          set "RACE= "
          set CGO_ENABLED_TESTS=0
          set "VET= "
        )
        :: find.exe may have exited with exit code 1, so need to explicitly exit with 0
        exit /b 0
      - set CGO_ENABLED=0
      - set GOROOT=%CD%\go1.20.4\go
      - set GOPATH=%CD%\gopath1.20.4
      - |
        :: temporarily add C:\cygwin\bin to PATH - if this works out well, we should probably do it in system setup instead (i.e. in default system PATH of the image set)
        set PATH=%CD%\git\cmd;%GOPATH%\bin;%GOROOT%\bin;%CD%\bin;%PATH%;C:\cygwin\bin
      - git version
      - go version
      - go env
      - git config --global core.autocrlf false
      - jq -r .secret.b64_encoded_credentials_batch_script ci-creds.json > tc-creds.bat.b64
      - certutil -decode tc-creds.bat.b64 tc-creds.bat
      - call tc-creds.bat 2>&1
      - if not exist taskcluster git clone %GITHUB_CLONE_URL% taskcluster
      - cd taskcluster
      - git fetch %GITHUB_CLONE_URL% +%GITHUB_SHA%:refs/heads/X%TASK_ID%
      - git checkout -f "X%TASK_ID%"
      - git reset --hard %GITHUB_SHA%
      - git clean -fdx
      - git checkout -B tmp -t "X%TASK_ID%"
      - cd workers\generic-worker
      - |
        :: go.mod and go.sum will be affected by above go get commands, so
        :: tidy them before checking for changes. Not needed in go 1.20.4:
        :: https://github.com/golang/go/issues/30515#issuecomment-581984371
        :: TODO: use go get -modfile instead when running go 1.20.4, and remove
        :: go mod tidy command
        go mod tidy
      - |
        :: this counts the number of lines returned by git status
        :: dump temp file outside of repo, otherwise git status reports the tmp1.txt file!
        git status
        git status --porcelain | C:\Windows\System32\find.exe /v /c "" > ..\..\..\tmp1.txt
        set /P lines=<..\..\..\tmp1.txt
        :: this checks that if more than 0 lines are returned, we fail
        if %lines% gtr 0 exit /b 64
        :: find.exe may have exited with exit code 1, so need to explicitly exit with 0
        exit /b 0
      - go install -tags "%ENGINE%" -v -ldflags "-X main.revision=%GITHUB_SHA%" ./...
      - go install ..\..\tools\taskcluster-proxy
      - go install ..\..\tools\livelog
      - go vet -tags "%ENGINE%" ./...
      - set CGO_ENABLED=%CGO_ENABLED_TESTS%
      - set GORACE=history_size=7
      - copy "%TASK_USER_CREDENTIALS%" "%CD%\next-task-user.json"
      - set GW_TESTS_RUN_AS_CURRENT_USER=true
      - go test -tags "%ENGINE%" -failfast -timeout 45m -ldflags "-X github.com/taskcluster/taskcluster/v50/workers/generic-worker.revision=%GITHUB_SHA%" %RACE% %VET% .
      - set GW_TESTS_RUN_AS_CURRENT_USER=
      - go test -tags "%ENGINE%" -failfast -timeout 45m -ldflags "-X github.com/taskcluster/taskcluster/v50/workers/generic-worker.revision=%GITHUB_SHA%" %RACE% %VET% ./...
      - |
        :: assumption here is that if something inside the if fails, we'll get a non zero exit code
        :: i've also made it an if/else so that one of them has to run, as there should always be a
        :: linter
        if exist ..\..\..\golangci-lint\golangci-lint-1.52.2-windows-amd64 (
          ..\..\..\golangci-lint\golangci-lint-1.52.2-windows-amd64\golangci-lint.exe run --build-tags "%ENGINE%" --timeout=15m
        ) else (
          ..\..\..\golangci-lint\golangci-lint-1.52.2-windows-386\golangci-lint.exe run --build-tags "%ENGINE%" --timeout=15m
        )
Mounts:
  go1.20.4:
    directory: go1.20.4
    content:
      darwin:
        amd64:
          url: https://storage.googleapis.com/golang/go1.20.4.darwin-amd64.tar.gz
          sha256: 242b099b5b9bd9c5d4d25c041216bc75abcdf8e0541aec975eeabcbce61ad47f
          format: tar.gz
        arm64:
          url: https://storage.googleapis.com/golang/go1.20.4.darwin-arm64.tar.gz
          sha256: 61bd4f7f2d209e2a6a7ce17787fc5fea52fb11cc9efb3d8471187a8b39ce0dc9
          format: tar.gz
      linux:
        armv6l:
          url: https://storage.googleapis.com/golang/go1.20.4.linux-armv6l.tar.gz
          sha256: 0b75ca23061a9996840111f5f19092a1bdbc42ec1ae25237ed2eec1c838bd819
          format: tar.gz
        amd64:
          url: https://storage.googleapis.com/golang/go1.20.4.linux-amd64.tar.gz
          sha256: 698ef3243972a51ddb4028e4a1ac63dc6d60821bf18e59a807e051fee0a385bd
          format: tar.gz
      windows:
        '386':
          url: https://storage.googleapis.com/golang/go1.20.4.windows-386.zip
          sha256: 8f2c5574bb822cc02d3bad4d449e4d2a2de341663df63ad0e7cb0b650a321dab
          format: zip
        amd64:
          url: https://storage.googleapis.com/golang/go1.20.4.windows-amd64.zip
          sha256: e7528da720f470b711fbd826814167a5fe1bc02a479ab1958dcf839a8294e6d2
          format: zip
  git2.39.1:
    directory: git
    content:
      windows:
        '386':
          url: https://github.com/git-for-windows/git/releases/download/v2.39.1.windows.1/MinGit-2.39.1-32-bit.zip
          sha256: e36dc71d97359f584d25efbdabb4122fb71514bcba5a99df1b82a83cee9472e3
          format: zip
        amd64:
          url: https://github.com/git-for-windows/git/releases/download/v2.39.1.windows.1/MinGit-2.39.1-64-bit.zip
          sha256: 000649846ec6e28e8f76d4a0d02f02b3dd1ba19914385f7dead1c5cde25b3bad
          format: zip
  jq1.6:
    file: bin/jq${EXTENSION}
    content:
      windows:
        '386':
          url: https://github.com/stedolan/jq/releases/download/jq-1.6/jq-win32.exe
          sha256: 0012cb4c0eb6eaf97b842e676e423a69a8fea95055d93830551b4a5a54494bd8
        amd64:
          url: https://github.com/stedolan/jq/releases/download/jq-1.6/jq-win64.exe
          sha256: a51d36968dcbdeabb3142c6f5cf9b401a65dc3a095f3144bd0c118d5bb192753
  ci-creds:
    file: ci-creds.json
    content:
      windows:
        all:
          url: http://localhost/secrets/v1/secret/project/taskcluster/testing/generic-worker/ci-creds
  golangci-lint-1.52.2:
    directory: golangci-lint
    content:
      darwin:
        amd64:
          url: https://github.com/golangci/golangci-lint/releases/download/v1.52.2/golangci-lint-1.52.2-darwin-amd64.tar.gz
          sha256: e57f2599de73c4da1d36d5255b9baec63f448b3d7fb726ebd3cd64dabbd3ee4a
          format: tar.gz
        arm64:
          url: https://github.com/golangci/golangci-lint/releases/download/v1.52.2/golangci-lint-1.52.2-darwin-arm64.tar.gz
          sha256: 89e523d45883903cfc472ab65621073f850abd4ffbb7720bbdd7ba66ee490bc8
          format: tar.gz
      linux:
        armv6l:
          url: https://github.com/golangci/golangci-lint/releases/download/v1.52.2/golangci-lint-1.52.2-linux-armv6.tar.gz
          sha256: 0f19ad6c037d45867f4978287a7a6d78bc761daf8e6cb3a5e6af86d5714b0258
          format: tar.gz
        amd64:
          url: https://github.com/golangci/golangci-lint/releases/download/v1.52.2/golangci-lint-1.52.2-linux-amd64.tar.gz
          sha256: c9cf72d12058a131746edd409ed94ccd578fbd178899d1ed41ceae3ce5f54501
          format: tar.gz
      windows:
        '386':
          url: https://github.com/golangci/golangci-lint/releases/download/v1.52.2/golangci-lint-1.52.2-windows-386.zip
          sha256: 40a2645b4c7bd94c16618eb0f12b32cd54c17e5620f761cf477b256d3622f299
          format: zip
        amd64:
          url: https://github.com/golangci/golangci-lint/releases/download/v1.52.2/golangci-lint-1.52.2-windows-amd64.zip
          sha256: 40b40002e07db81628d94108265525052c58fc9ce358bef26a36d27f0aea3d87
          format: zip
