Types:

  BuildAndTest:
    Name: 'Build/test generic-worker (${ENGINE} engine) on ${PLATFORM}'
    Description: 'This builds and tests the ${ARCH} version of generic-worker (${ENGINE} engine) on ${PLATFORM}'
    Mounts:
      # The next line is edited by infrastructure/tooling/src/generate/generators/go-version.js
      #   DO NOT CHANGE HERE!
      - 'go1.18.1'
      - 'git2.24.0.2'
      - 'jq1.6'
      - 'ci-creds'
      # The next line is edited by infrastructure/tooling/src/generate/generators/golangci-lint-version.js
      #   DO NOT CHANGE HERE!
      - 'golangci-lint-1.45.2'
    Command: BuildAndTest
    Features:
      taskclusterProxy: true
    Scopes:
      - 'generic-worker:cache:generic-worker-checkout'
      - 'secrets:get:project/taskcluster/testing/generic-worker/ci-creds'
    Artifacts:
      - Name: 'public/build/generic-worker-${OS}-${ARCH}${EXTENSION}'
        # The next line is edited by infrastructure/tooling/src/generate/generators/go-version.js
        #   DO NOT CHANGE HERE!
        Path: 'gopath1.18.1/bin/generic-worker${EXTENSION}'
        Type: 'file'
    MaxRunTime: 3600

  FormatSource:
    Name: 'Run `go mod tidy`, `go fmt` and `goimports` against source code'
    Description: |
            This task performs three formatting steps against the codebase, and
            ensures that no local changes are found after applying them:

            * `go mod tidy` (see the [go modules wiki page](https://github.com/golang/go/wiki/Modules)
              for more information)
            * `go fmt` to ensure that go source code is formatted
            * `goimports` to ensure that imports are specified in their canonical form
    Mounts:
      # The next line is edited by infrastructure/tooling/src/generate/generators/go-version.js
      #   DO NOT CHANGE HERE!
      - 'go1.18.1'
    Command: FormatSource
    MaxRunTime: 3600

Tasks:
  BuildAndTest:
    - WorkerPool: 'proj-taskcluster/gw-ci-macos'
      Env:
        ENGINE: 'multiuser'
# disabled due to lack of mac capacity
#    - WorkerPool: 'proj-taskcluster/gw-ci-macos'
#      Env:
#        ENGINE: 'simple'
    - WorkerPool: 'proj-taskcluster/gw-ci-ubuntu-18-04'
      Env:
        ENGINE: 'multiuser'
    - WorkerPool: 'proj-taskcluster/gw-ci-ubuntu-18-04'
      Env:
        ENGINE: 'simple'
    - WorkerPool: 'proj-taskcluster/gw-ci-ubuntu-18-04'
      Env:
        ENGINE: 'docker'
    - WorkerPool: 'proj-taskcluster/gw-ci-windows2012r2-amd64'
      Env:
        ENGINE: 'multiuser'
        # We must set here since this worker type does not have a Z: drive
        GW_SKIP_Z_DRIVE_TESTS: 'true'
# The following are disabled due to insufficient capacity:
#    - WorkerPool: 'proj-taskcluster/gw-ci-raspbian-stretch'
#      Env:
#        ENGINE: 'simple'
#    - WorkerPool: 'proj-taskcluster/gw-ci-windows10-amd64'
#      Env:
#        ENGINE: 'multiuser'
#        # We must set here since this worker pool does not have a Z: drive
#        GW_SKIP_Z_DRIVE_TESTS: 'true'
#        # This worker pool has no mozilla-build installation
#        GW_SKIP_MOZILLA_BUILD_TESTS: 'true'
#        # This worker pool has no python installation
#        GW_SKIP_PYTHON_TESTS: 'true'
#    - WorkerPool: 'proj-taskcluster/gw-ci-windows10-arm'
#      Env:
#        ENGINE: 'multiuser'
#        # We must set here since this worker pool does not have a Z: drive
#        GW_SKIP_Z_DRIVE_TESTS: 'true'
#        # This worker pool has no mozilla-build installation
#        GW_SKIP_MOZILLA_BUILD_TESTS: 'true'
#        # This worker pool has no python installation
#        GW_SKIP_PYTHON_TESTS: 'true'
#    - WorkerPool: 'proj-taskcluster/gw-ci-windows7-386'
#      Env:
#        ENGINE: 'multiuser'
  FormatSource:
    - WorkerPool: 'proj-taskcluster/gw-ci-ubuntu-18-04'

WorkerPools:
  proj-taskcluster/gw-ci-macos:
    Platform: 'macOS Mojave 10.14'
    OS: 'darwin'
    Arch: 'amd64'
  proj-taskcluster/gw-ci-raspbian-stretch:
    Platform: 'Raspbian GNU/Linux 9 (stretch)'
    OS: 'linux'
    Arch: 'armv6l'
  proj-taskcluster/gw-ci-ubuntu-18-04:
    Platform: 'Ubuntu 18.04 (amd64)'
    OS: 'linux'
    Arch: 'amd64'
  proj-taskcluster/gw-ci-windows10-amd64:
    Platform: 'Windows 10 (amd64)'
    OS: 'windows'
    Arch: 'amd64'
  proj-taskcluster/gw-ci-windows10-arm:
    Platform: 'Windows 10 (arm)'
    OS: 'windows'

    # The next comment is edited by infrastructure/tooling/src/generate/generators/go-version.js
    #   DO NOT CHANGE HERE!

    # There is no arm release for go 1.18.1 on windows, but 386 release works
    # through emulation provided by the host OS.
    Arch: '386'
  proj-taskcluster/gw-ci-windows2012r2-amd64:
    Platform: 'Windows Server 2012 R2 (amd64)'
    OS: 'windows'
    Arch: 'amd64'
  proj-taskcluster/gw-ci-windows7-386:
    Platform: 'Windows 7 (386)'
    OS: 'windows'
    Arch: '386'

Commands:
  FormatSource:
    Posix:
      - - /bin/bash
        - -vxec
        - |
          export CGO_ENABLED=0
          # The next line is edited by infrastructure/tooling/src/generate/generators/go-version.js
          #   DO NOT CHANGE HERE!
          export GOROOT="$(pwd)/go1.18.1/go"
          export PATH="${GOROOT}/bin:${PATH}"
          go version
          go env
          if [ ! -d taskcluster/.git ]; then
            rm -rf taskcluster
            git clone "${GITHUB_CLONE_URL}" taskcluster
          fi
          cd taskcluster
          git fetch "${GITHUB_CLONE_URL}" "+${GITHUB_SHA}:refs/heads/X${TASK_ID}"
          git checkout -f "X${TASK_ID}"
          git reset --hard "${GITHUB_SHA}"
          git clean -fdx
          git checkout -B tmp -t "X${TASK_ID}"
          go fmt ./...
          git diff
          test $(git status --porcelain | wc -l) == 0
          go mod tidy
          git diff
          test $(git status --porcelain | wc -l) == 0
          go install golang.org/x/tools/cmd/goimports
          # Run go mod tidy again since go get above will have messed it up.
          # Should be fixed in go 1.14; see:
          #   * https://github.com/golang/go/issues/30515#issuecomment-581984371
          "$(go env GOPATH)/bin/goimports" -w .
          git checkout -f go.mod go.sum
          git diff
          test $(git status --porcelain | wc -l) == 0

  BuildAndTest:
    Posix:
      - - /bin/bash
        - -vxec
        - |
          function b64 {
            [ "$(uname -s)" != "Darwin" ] || base64 -D
            [ "$(uname -s)" != "Linux" ]  || base64 -d
          }
          # go test: -race and -msan are only supported on linux/amd64, freebsd/amd64, darwin/amd64 and windows/amd64
          if [ "$(uname -m)" == "x86_64" ]; then
            RACE=-race
            CGO_ENABLED_TESTS=1
            # See https://github.com/golang/go/issues/27089#issuecomment-415329050
            VET=-vet=off
          else
            RACE=
            CGO_ENABLED_TESTS=0
            VET=
          fi
          export CGO_ENABLED=0

          # The next two lines are edited by infrastructure/tooling/src/generate/generators/go-version.js
          #   DO NOT CHANGE HERE!
          export GOROOT="$(pwd)/go1.18.1/go"
          export GOPATH="$(pwd)/gopath1.18.1"

          export PATH="${GOPATH}/bin:${GOROOT}/bin:$(pwd)/bin:${PATH}"
          git --version
          go version
          go env
          curl -s "${TASKCLUSTER_PROXY_URL}/secrets/v1/secret/project/taskcluster/testing/generic-worker/ci-creds" | sed -n 's/.*"b64_encoded_credentials_script": "\(.*\)".*/\1/p' | b64 > tc-creds.sh
          source tc-creds.sh
          if [ ! -d taskcluster/.git ]; then
            rm -rf taskcluster
            git clone "${GITHUB_CLONE_URL}" taskcluster
          fi
          cd taskcluster
          git fetch "${GITHUB_CLONE_URL}" "+${GITHUB_SHA}:refs/heads/X${TASK_ID}"
          git checkout -f "X${TASK_ID}"
          git reset --hard "${GITHUB_SHA}"
          git clean -fdx
          git checkout -B tmp -t "X${TASK_ID}"
          cd workers/generic-worker
          # go.mod and go.sum will be affected by above go get commands, so
          # tidy them before checking for changes. Not needed in go 1.14:
          # https://github.com/golang/go/issues/30515#issuecomment-581984371
          # TODO: use go get -modfile instead when running go 1.14, and remove
          # go mod tidy command
          go mod tidy
          git status
          # output of wc command can contain spaces on darwin, so no quotes around expression
          test $(git status --porcelain | wc -l) == 0
          go install -tags "${ENGINE}" -v -ldflags "-X main.revision=${GITHUB_SHA}" ./...
          go install ../../tools/taskcluster-proxy
          go install ../../tools/livelog
          go vet -tags "${ENGINE}" ./...
          if [ "${ENGINE}" == "multiuser" ]; then
            cp "${TASK_USER_CREDENTIALS}" next-task-user.json
            # IMPORTANT - run go test with GW_TESTS_RUN_AS_CURRENT_USER=true *before* running it without
            # otherwise tests that call `go run ....` will write go object files to .cache as root
            GW_TESTS_RUN_AS_CURRENT_USER=true GORACE=history_size=7 CGO_ENABLED=1 go test -tags "${ENGINE}" -timeout 45m -ldflags "-X github.com/taskcluster/taskcluster/v44/workers/generic-worker.revision=${GITHUB_SHA}" -v ${RACE} ${VET}
          fi
          GORACE=history_size=7 CGO_ENABLED=${CGO_ENABLED_TESTS} go test -tags "${ENGINE}" -timeout 45m -ldflags "-X github.com/taskcluster/taskcluster/v44/workers/generic-worker.revision=${GITHUB_SHA}" -v ${RACE} ${VET} ./...

          # The next line is edited by infrastructure/tooling/src/generate/generators/golangci-lint-version.js
          #   DO NOT CHANGE HERE!
          ../../../golangci-lint/golangci-lint-1.45.2-*/golangci-lint run --build-tags "${ENGINE}" --timeout=15m

    Windows:
      - |
        :: go test: -race and -msan are only supported on linux/amd64, freebsd/amd64, darwin/amd64 and windows/amd64
        reg Query "HKLM\Hardware\Description\System\CentralProcessor\0" | find /i "Intel64" > NUL && (
          set RACE=-race
          set CGO_ENABLED_TESTS=1
          :: See https://github.com/golang/go/issues/27089#issuecomment-415329050
          set VET=-vet=off
        ) || (
          set "RACE= "
          set CGO_ENABLED_TESTS=0
          set "VET= "
        )
        :: find.exe may have exited with exit code 1, so need to explicitly exit with 0
        exit /b 0
      - set CGO_ENABLED=0

      # The next two lines are edited by infrastructure/tooling/src/generate/generators/go-version.js
      #   DO NOT CHANGE HERE!
      - set GOROOT=%CD%\go1.18.1\go
      - set GOPATH=%CD%\gopath1.18.1

      - |
        :: temporarily add C:\cygwin\bin to PATH - if this works out well, we should probably do it in system setup instead (i.e. in default system PATH of the image set)
        set PATH=%CD%\git\cmd;%GOPATH%\bin;%GOROOT%\bin;%CD%\bin;%PATH%;C:\cygwin\bin
      - git version
      - go version
      - go env
      - git config --global core.autocrlf false
      - jq -r .secret.b64_encoded_credentials_batch_script ci-creds.json > tc-creds.bat.b64
      - certutil -decode tc-creds.bat.b64 tc-creds.bat
      - call tc-creds.bat 2>&1
      - 'if not exist taskcluster git clone %GITHUB_CLONE_URL% taskcluster'
      - 'cd taskcluster'
      - 'git fetch %GITHUB_CLONE_URL% +%GITHUB_SHA%:refs/heads/X%TASK_ID%'
      - 'git checkout -f "X%TASK_ID%"'
      - 'git reset --hard %GITHUB_SHA%'
      - 'git clean -fdx'
      - 'git checkout -B tmp -t "X%TASK_ID%"'
      - cd workers\generic-worker
      - |
        :: go.mod and go.sum will be affected by above go get commands, so
        :: tidy them before checking for changes. Not needed in go 1.14:
        :: https://github.com/golang/go/issues/30515#issuecomment-581984371
        :: TODO: use go get -modfile instead when running go 1.14, and remove
        :: go mod tidy command
        go mod tidy
      - |
        :: this counts the number of lines returned by git status
        :: dump temp file outside of repo, otherwise git status reports the tmp1.txt file!
        git status
        git status --porcelain | C:\Windows\System32\find.exe /v /c "" > ..\..\..\tmp1.txt
        set /P lines=<..\..\..\tmp1.txt
        :: this checks that if more than 0 lines are returned, we fail
        if %lines% gtr 0 exit /b 64
        :: find.exe may have exited with exit code 1, so need to explicitly exit with 0
        exit /b 0
      - go install -tags "%ENGINE%" -v -ldflags "-X main.revision=%GITHUB_SHA%" ./...
      - go install ..\..\tools\taskcluster-proxy
      - go install ..\..\tools\livelog
      - go vet -tags "%ENGINE%" ./...
      - set CGO_ENABLED=%CGO_ENABLED_TESTS%
      - set GORACE=history_size=7
      - copy "%TASK_USER_CREDENTIALS%" "%CD%\next-task-user.json"
      - 'go test -tags "%ENGINE%" -timeout 45m -ldflags "-X github.com/taskcluster/taskcluster/v44/workers/generic-worker.revision=%GITHUB_SHA%" -v %RACE% %VET% ./...'
      - set GW_TESTS_RUN_AS_CURRENT_USER=true
      - 'go test -tags "%ENGINE%" -timeout 45m -ldflags "-X github.com/taskcluster/taskcluster/v44/workers/generic-worker.revision=%GITHUB_SHA%" -v %RACE% %VET%'

      ################################################################################
      # This entire section is edited by infrastructure/tooling/src/generate/generators/golangci-lint-version.js to update the golangci-lint version number.
      #
      #      DO NOT MODIFY HERE!!!
      #
      ################################################################################

      - |
        :: assumption here is that if something inside the if fails, we'll get a non zero exit code
        :: i've also made it an if/else so that one of them has to run, as there should always be a
        :: linter
        if exist ..\..\..\golangci-lint\golangci-lint-1.45.2-windows-amd64 (
          ..\..\..\golangci-lint\golangci-lint-1.45.2-windows-amd64\golangci-lint.exe run --build-tags "%ENGINE%" --timeout=15m
        ) else (
          ..\..\..\golangci-lint\golangci-lint-1.45.2-windows-386\golangci-lint.exe run --build-tags "%ENGINE%" --timeout=15m
        )

Mounts:

  ################################################################################
  # This entire section is edited by infrastructure/tooling/src/generate/generators/go-version.js to update the go version number.
  #
  #      DO NOT MODIFY HERE!!!
  #
  ################################################################################

  go1.18.1:
    directory: go1.18.1
    content:
      darwin:
        amd64:
          url: 'https://storage.googleapis.com/golang/go1.18.1.darwin-amd64.tar.gz'
          sha256: '3703e9a0db1000f18c0c7b524f3d378aac71219b4715a6a4c5683eb639f41a4d'
          format: tar.gz
        arm64:
          url: 'https://storage.googleapis.com/golang/go1.18.1.darwin-arm64.tar.gz'
          sha256: '6d5641a06edba8cd6d425fb0adad06bad80e2afe0fa91b4aa0e5aed1bc78f58e'
      linux:
        armv6l:
          url: 'https://storage.googleapis.com/golang/go1.18.1.linux-armv6l.tar.gz'
          sha256: '9edc01c8e7db64e9ceeffc8258359e027812886ceca3444e83c4eb96ddb068ee'
          format: tar.gz
        amd64:
          url: 'https://storage.googleapis.com/golang/go1.18.1.linux-amd64.tar.gz'
          sha256: 'b3b815f47ababac13810fc6021eb73d65478e0b2db4b09d348eefad9581a2334'
          format: tar.gz
      windows:
        386:
          url: 'https://storage.googleapis.com/golang/go1.18.1.windows-386.zip'
          sha256: '49ae65551acbfaa57b52fbefa0350b2072512ae3103b8cf1a919a02626dbc743'
          format: zip
        amd64:
          url: 'https://storage.googleapis.com/golang/go1.18.1.windows-amd64.zip'
          sha256: 'c30bc3f1f7314a953fe208bd9cd5e24bd9403392a6c556ced3677f9f70f71fe1'
          format: zip
  git2.24.0.2:
    directory: git
    content:
      windows:
        386:
          url: 'https://github.com/git-for-windows/git/releases/download/v2.24.0.windows.2/MinGit-2.24.0.2-32-bit.zip'
          sha256: 'b7b26e87d3df9b44fee0606a9df3ca839bc444faf76c4c27bc0824a6c10e7831'
          format: zip
        amd64:
          url: 'https://github.com/git-for-windows/git/releases/download/v2.24.0.windows.2/MinGit-2.24.0.2-64-bit.zip'
          sha256: 'c33aec6ae68989103653ca9fb64f12cabccf6c61d0dde30c50da47fc15cf66e2'
          format: zip
  jq1.6:
    file: bin/jq${EXTENSION}
    content:
      windows:
        386:
          url: 'https://github.com/stedolan/jq/releases/download/jq-1.6/jq-win32.exe'
          sha256: '0012cb4c0eb6eaf97b842e676e423a69a8fea95055d93830551b4a5a54494bd8'
        amd64:
          url: 'https://github.com/stedolan/jq/releases/download/jq-1.6/jq-win64.exe'
          sha256: 'a51d36968dcbdeabb3142c6f5cf9b401a65dc3a095f3144bd0c118d5bb192753'
  ci-creds:
    file: ci-creds.json
    content:
      windows:
        all:
          url: 'http://localhost/secrets/v1/secret/project/taskcluster/testing/generic-worker/ci-creds'

  ################################################################################
  # This entire section is edited by infrastructure/tooling/src/generate/generators/golangci-lint-version.js to update the golangci-lint version number.
  #
  #      DO NOT MODIFY HERE!!!
  #
  ################################################################################

  golangci-lint-1.45.2:
    # Note - we can't extract to directory '.' since after generic-worker
    # extracts the files as the root user (since generic-worker runs as root),
    # it then runs chown recursively against the target directory to make it
    # owned by the task user, but '.' would then map to the task directory
    # itself, which is itself the user's home directory, which would fails on
    # macOS since there are files inside a user's home directory that even root
    # is not allowed to run chown against. See
    # https://superuser.com/questions/279235/why-does-chown-report-operation-not-permitted-on-os-x
    directory: golangci-lint
    content:
      darwin:
        amd64:
          url: 'https://github.com/golangci/golangci-lint/releases/download/v1.45.2/golangci-lint-1.45.2-darwin-amd64.tar.gz'
          sha256: '995e509e895ca6a64ffc7395ac884d5961bdec98423cb896b17f345a9b4a19cf'
          format: tar.gz
      linux:
        armv6l:
          url: 'https://github.com/golangci/golangci-lint/releases/download/v1.45.2/golangci-lint-1.45.2-linux-armv6.tar.gz'
          sha256: 'dfa8bdaf0387aec1cd5c1aa8857f67b2bbdfc2e42efce540c8fb9bbe3e8af302'
          format: tar.gz
        amd64:
          url: 'https://github.com/golangci/golangci-lint/releases/download/v1.45.2/golangci-lint-1.45.2-linux-amd64.tar.gz'
          sha256: '595ad6c6dade4c064351bc309f411703e457f8ffbb7a1806b3d8ee713333427f'
          format: tar.gz
      windows:
        386:
          url: 'https://github.com/golangci/golangci-lint/releases/download/v1.45.2/golangci-lint-1.45.2-windows-386.zip'
          sha256: '879a52107a797678a03c175cc7cf441411a14a01f66dc87f70bdfa304a4129a6'
          format: zip
        amd64:
          url: 'https://github.com/golangci/golangci-lint/releases/download/v1.45.2/golangci-lint-1.45.2-windows-amd64.zip'
          sha256: '1dec0aa46d4f0d241863b573f70129bdf1de9c595cf51172a840a588a4cd9fc5'
          format: zip
