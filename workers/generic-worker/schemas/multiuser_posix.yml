---
$schema: "/schemas/common/metaschema.json#"
$id: "/schemas/generic-worker/multiuser_posix.json#"
title: Payload
oneOf:
- title: Generic worker payload
  description: |-
    This schema defines the structure of the `payload` property referred to in a
    Taskcluster Task definition.
  type: object
  required:
  - command
  - maxRunTime
  additionalProperties: false
  properties:
    command:
      title: Commands to run
      type: array
      minItems: 1
      uniqueItems: false
      items:
        type: array
        minItems: 1
        uniqueItems: false
        items:
          type: string
      description: |-
        One array per command (each command is an array of arguments). Several arrays
        for several commands.

        Since: generic-worker 0.0.1
    env:
      title: Env vars
      description: |-
        Env vars must be string to __string__ mappings (not number or boolean). For example:
        ```
        {
          "PATH": "/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin",
          "GOOS": "darwin",
          "FOO_ENABLE": "true",
          "BAR_TOTAL": "3"
        }
        ```

        Note, the following environment variables will automatically be set in the task
        commands, but may be overridden by environment variables in the task payload:
          * `HOME` - the home directory of the task user
          * `PATH` - `/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin`
          * `USER` - the name of the task user

        The following environment variables will automatically be set in the task
        commands, and may not be overridden by environment variables in the task payload:
          * `DISPLAY` - `:0` (Linux only)
          * `TASK_ID` - the task ID of the currently running task
          * `RUN_ID` - the run ID of the currently running task
          * `TASKCLUSTER_ROOT_URL` - the root URL of the taskcluster deployment
          * `TASKCLUSTER_PROXY_URL` (if taskcluster proxy feature enabled) - the
            taskcluster authentication proxy for making unauthenticated taskcluster
            API calls
          * `TASK_USER_CREDENTIALS` (if config property `runTasksAsCurrentUser` set to
            `true` in `generic-worker.config` file - the absolute file location of a
            json file containing the current task OS user account name and password.
            This is only useful for the generic-worker multiuser CI tasks, where
            `runTasksAsCurrentUser` is set to `true`.
          * `TASKCLUSTER_WORKER_LOCATION` (if running in AWS or GCP or explicitly set
            in the generic-worker config file). See
            [RFC #0148](https://github.com/taskcluster/taskcluster-rfcs/blob/master/rfcs/0148-taskcluster-worker-location.md)
            for details.

        Since: generic-worker 0.0.1
      type: object
      additionalProperties:
        type: string
    maxRunTime:
      type: integer
      title: Maximum run time in seconds
      description: |-
        Maximum time the task container can run in seconds.
        The maximum value for `maxRunTime` is set by a `maxTaskRunTime` config property specific to each worker-pool.

        Since: generic-worker 0.0.1
      multipleOf: 1
      minimum: 1
    artifacts:
      type: array
      title: Artifacts to be published
      description: |-
        Artifacts to be published.

        Since: generic-worker 1.0.0
      uniqueItems: true
      items:
        type: object
        title: Artifact
        additionalProperties: false
        properties:
          type:
            title: Artifact upload type.
            type: string
            enum:
            - file
            - directory
            description: |-
              Artifacts can be either an individual `file` or a `directory` containing
              potentially multiple files with recursively included subdirectories.

              Since: generic-worker 1.0.0
          path:
            title: Artifact location
            type: string
            description: |-
              Relative path of the file/directory from the task directory. Note this is not an absolute
              path as is typically used in docker-worker, since the absolute task directory name is not
              known when the task is submitted. Example: `dist\regedit.exe`. It doesn't matter if
              forward slashes or backslashes are used.

              Since: generic-worker 1.0.0
          name:
            title: Name of the artifact
            type: string
            description: |-
              Name of the artifact, as it will be published. If not set, `path` will be used.
              Conventionally (although not enforced) path elements are forward slash separated. Example:
              `public/build/a/house`. Note, no scopes are required to read artifacts beginning `public/`.
              Artifact names not beginning `public/` are scope-protected (caller requires scopes to
              download the artifact). See the Queue documentation for more information.

              Since: generic-worker 8.1.0
          expires:
            title: Expiry date and time
            type: string
            format: date-time
            description: |-
              Date when artifact should expire must be in the future, no earlier than task deadline, but
              no later than task expiry. If not set, defaults to task expiry.

              Since: generic-worker 1.0.0
          contentType:
            title: Content-Type header when serving artifact over HTTP
            type: string
            description: |-
              Explicitly set the value of the HTTP `Content-Type` response header when the artifact(s)
              is/are served over HTTP(S). If not provided (this property is optional) the worker will
              guess the content type of artifacts based on the filename extension of the file storing
              the artifact content. It does this by looking at the system filename-to-mimetype mappings
              defined in multiple `mime.types` files located under `/etc`. Note, setting `contentType`
              on a directory artifact will apply the same contentType to all files contained in the
              directory.

              See [mime.TypeByExtension](https://pkg.go.dev/mime#TypeByExtension).

              Since: generic-worker 10.4.0
          contentEncoding:
            title: Content-Encoding header when serving artifact over HTTP.
            type: string
            enum:
            - identity
            - gzip
            description: |-
              Content-Encoding for the artifact. If not provided, `gzip` will be used, except for the
              following file extensions, where `identity` will be used, since they are already
              compressed:

              * 7z
              * bz2
              * deb
              * dmg
              * flv
              * gif
              * gz
              * jpeg
              * jpg
              * png
              * swf
              * tbz
              * tgz
              * webp
              * whl
              * woff
              * woff2
              * xz
              * zip
              * zst

              Note, setting `contentEncoding` on a directory artifact will apply the same content
              encoding to all the files contained in the directory.

              Since: generic-worker 16.2.0
        required:
        - type
        - path
    features:
      title: Feature flags
      description: |-
        Feature flags enable additional functionality.

        Since: generic-worker 5.3.0
      type: object
      additionalProperties: false
      required: []
      properties:
        chainOfTrust:
          type: boolean
          title: Enable generation of signed Chain of Trust artifacts
          description: |-
            Artifacts named `public/chain-of-trust.json` and
            `public/chain-of-trust.json.sig` should be generated which will
            include information for downstream tasks to build a level of trust
            for the artifacts produced by the task and the environment it ran in.

            Since: generic-worker 5.3.0
        taskclusterProxy:
          type: boolean
          title: Run [taskcluster-proxy](https://github.com/taskcluster/taskcluster/tree/main/tools/taskcluster-proxy) to allow tasks to dynamically proxy requests to taskcluster services
          description: |-
            The taskcluster proxy provides an easy and safe way to make authenticated
            taskcluster requests within the scope(s) of a particular task. See
            [the github project](https://github.com/taskcluster/taskcluster/tree/main/tools/taskcluster-proxy) for more information.

            Since: generic-worker 10.6.0
        liveLog:
          type: boolean
          title: Enable [livelog](https://github.com/taskcluster/taskcluster/tree/main/tools/livelog)
          description: |-
            The live log feature streams the combined stderr and stdout to a task artifact
            so that the output is available while the task is running.

            Since: generic-worker 48.2.0
          default: true
        backingLog:
          type: boolean
          title: Enable backing log
          description: |-
            The backing log feature publishes a task artifact containing the complete
            stderr and stdout of the task.

            Since: generic-worker 48.2.0
          default: true
        interactive:
          type: boolean
          title: Interactive shell
          description: |-
            This allows you to interactively run commands from within the worker
            as the task user. This may be useful for debugging purposes.
            Can be used for SSH-like access to the running worker.
            Note that this feature works differently from the `interactive` feature
            in docker worker, which `docker exec`s into the running container.
            Since tasks on generic worker are not guaranteed to be running in a
            container, a bash shell is started on the task user's account.
            A user can then `docker exec` into the a running container, if there
            is one.

            Since: generic-worker 49.2.0
        loopbackVideo:
          type: boolean
          title: Loopback Video device
          description: |-
            Video loopback device created using v4l2loopback.
            A video device will be available for the task. Its
            location will be passed to the task via environment
            variable `TASKCLUSTER_VIDEO_DEVICE`. The
            location will be `/dev/video<N>` where `<N>` is
            an integer between 0 and 255. The value of `<N>`
            is not static, and therefore either the environment
            variable should be used, or `/dev` should be
            scanned in order to determine the correct location.
            Tasks should not assume a constant value.

            This feature is only available on Linux. If a task
            is submitted with this feature enabled on a non-Linux,
            posix platform (FreeBSD, macOS), the task will resolve as
            `exception/malformed-payload`.

            Since: generic-worker 53.1.0
        loopbackAudio:
          type: boolean
          title: Loopback Audio device
          description: |-
            Audio loopback device created using snd-aloop.
            An audio device will be available for the task. Its
            location will be `/dev/snd`. Devices inside that directory
            will take the form `/dev/snd/controlC<N>`,
            `/dev/snd/pcmC<N>D0c`, `/dev/snd/pcmC<N>D0p`,
            `/dev/snd/pcmC<N>D1c`, and `/dev/snd/pcmC<N>D1p`,
            where <N> is an integer between 0 and 31, inclusive.
            The Generic Worker config setting `loopbackAudioDeviceNumber`
            may be used to change the device number in case the
            default value (`16`) conflicts with another
            audio device on the worker.

            This feature is only available on Linux. If a task
            is submitted with this feature enabled on a non-Linux,
            posix platform (FreeBSD, macOS), the task will resolve as
            `exception/malformed-payload`.

            Since: generic-worker 54.5.0
    mounts:
      type: array
      description: |-
        Directories and/or files to be mounted.

        Since: generic-worker 5.4.0
      uniqueItems: false
      items:
        title: Mount
        "$ref": "#/definitions/mount"
    osGroups:
      type: array
      title: OS Groups
      description: |-
        A list of OS Groups that the task user should be a member of.

        Since: generic-worker 6.0.0 (Windows)
        Since: generic-worker 54.4.0 (FreeBSD, Linux, macOS)
      uniqueItems: true
      items:
        type: string
    supersederUrl:
      type: string
      title: unused
      description: This property is allowed for backward compatibility, but is unused.
    onExitStatus:
      title: Exit code handling
      description: |-
        By default tasks will be resolved with `state/reasonResolved`: `completed/completed`
        if all task commands have a zero exit code, or `failed/failed` if any command has a
        non-zero exit code. This payload property allows customsation of the task resolution
        based on exit code of task commands.
      type: object
      additionalProperties: false
      required: []
      properties:
        retry:
          title: Intermittent task exit codes
          description: |-
            Exit codes for any command in the task payload to cause this task to
            be resolved as `exception/intermittent-task`. Typically the Queue
            will then schedule a new run of the existing `taskId` (rerun) if not
            all task runs have been exhausted.

            See [itermittent tasks](https://docs.taskcluster.net/docs/reference/platform/taskcluster-queue/docs/worker-interaction#intermittent-tasks) for more detail.

            Since: generic-worker 10.10.0
          type: array
          uniqueItems: true
          items:
            title: Exit codes
            type: integer
            minimum: 1
        purgeCaches:
          title: Purge caches exit status
          description: |-
            If the task exits with a purge caches exit status, all caches
            associated with the task will be purged.

            Since: generic-worker 49.0.0
          type: array
          uniqueItems: true
          items:
            title: Exit statuses
            type: integer
            minimum: 0
    logs:
      title: Logs
      description: |-
        Configuration for task logs.

        Since: generic-worker 48.2.0
      type: object
      additionalProperties: false
      required: []
      properties:
        live:
          title: Live log artifact name
          description: |-
            Specifies a custom name for the live log artifact.
            This is only used if `features.liveLog` is `true`.

            Since: generic-worker 48.2.0
          type: string
          default: public/logs/live.log
        backing:
          title: Backing log artifact name
          description: |-
            Specifies a custom name for the backing log artifact.
            This is only used if `features.backingLog` is `true`.

            Since: generic-worker 48.2.0
          type: string
          default: public/logs/live_backing.log
- title: Docker worker payload
  description: "`.payload` field of the queue."
  type: object
  properties:
    log:
      title: Livelog artifact name
      description: >-
        Specifies a custom name for the livelog artifact. Note that this is also used in determining the name of the backing log artifact name. Backing log artifact name matches livelog artifact name with `_backing` appended, prior to the file extension (if present). For example, `apple/banana.log.txt` results in livelog artifact `apple/banana.log.txt` and backing log artifact `apple/banana.log_backing.txt`. Defaults to `public/logs/live.log`.
      type: string
      default: public/logs/live.log
    image:
      title: Docker image.
      description: >-
        Image to use for the task.  Images can be specified as an image tag as used by a docker registry, or as an object declaring type and name/namespace
      oneOf:
      - title: Docker image name
        type: string
      - type: object
        title: Named docker image
        properties:
          type:
            type: string
            enum:
            - docker-image
          name:
            type: string
        additionalProperties: false
        required:
        - type
        - name
      - type: object
        title: Indexed docker image
        properties:
          type:
            type: string
            enum:
            - indexed-image
          namespace:
            type: string
          path:
            type: string
        additionalProperties: false
        required:
        - type
        - namespace
        - path
      - type: object
        title: Docker image artifact
        properties:
          type:
            type: string
            enum:
            - task-image
          taskId:
            type: string
          path:
            type: string
        additionalProperties: false
        required:
        - type
        - taskId
        - path
    cache:
      title: Caches to mount point mapping.
      description: >-
        Caches are mounted within the docker container at the mount point specified. Example: ```{ "CACHE NAME": "/mount/path/in/container" }```
      type: object
      additionalProperties:
        type: string
    capabilities:
      title: Capabilities that must be available/enabled for the task container.
      description: >-
        Set of capabilities that must be enabled or made available to the task container Example: ```{ "capabilities": { "privileged": true }```
      type: object
      properties:
        privileged:
          title: Privileged container
          description: >-
            Allows a task to run in a privileged container, similar to running docker with `--privileged`.  This only works for worker-types configured to enable it.
          type: boolean
          default: false
        disableSeccomp:
          title: Container does not have a seccomp profile set. NO LONGER SUPPORTED IN DOCKER WORKER.
          description: >-
            Allowed a task to run without seccomp, similar to running docker with
            `--security-opt seccomp=unconfined`.  This only worked for worker-types
            configured to enable it. NO LONGER SUPPORTED IN DOCKER WORKER, but payload
            still includes feature in order for d2g to work with it.
          type: boolean
          default: false
        devices:
          title: Devices to be attached to task containers
          description: >-
            Allows devices from the host system to be attached to a task container similar to using `--device` in docker.
          type: object
          properties:
            loopbackVideo:
              title: Loopback Video device
              description: Video loopback device created using v4l2loopback.
              type: boolean
            loopbackAudio:
              title: Loopback Audio device
              description: Audio loopback device created using snd-aloop
              type: boolean
            hostSharedMemory:
              title: Host shared memory device (Experimental)
              description: Mount /dev/shm from the host in the container.
              type: boolean
            kvm:
              title: /dev/kvm device (Experimental)
              description: Mount /dev/kvm from the host in the container.
              type: boolean
          required: []
          additionalProperties: false
      required: []
      additionalProperties: false
    command:
      title: Docker command to run (see docker api).
      type: array
      items:
        type: string
      default: []
      description: "Example: `['/bin/bash', '-c', 'ls']`."
    env:
      title: Environment variable mappings.
      description: |-
        Example: ```
        {
          "PATH": '/borked/path'
          "ENV_NAME": "VALUE"
        }
        ```
      type: object
      additionalProperties:
        type: string
    maxRunTime:
      type: integer
      title: Maximum run time in seconds
      description: |-
        Maximum time the task container can run in seconds.
      multipleOf: 1
      minimum: 1
      maximum: 86400
    onExitStatus:
      title: Exit status handling
      description: >-
        By default docker-worker will fail a task with a non-zero exit status without retrying.  This payload property allows a task owner to define certain exit statuses that will be marked as a retriable exception.
      type: object
      properties:
        retry:
          title: Retriable exit statuses
          description: >-
            If the task exits with a retriable exit status, the task will be marked as an exception and a new run created.
          type: array
          items:
            title: Exit statuses
            type: integer
        purgeCaches:
          title: Purge caches exit status
          description: >-
            If the task exits with a purge caches exit status, all caches associated with the task will be purged.
          type: array
          items:
            title: Exit statuses
            type: integer
      required: []
      additionalProperties: false
    artifacts:
      type: object
      title: Artifacts
      description: >-
        Artifact upload map example: ```{"public/build.tar.gz": {"path": "/home/worker/build.tar.gz", "expires": "2016-05-28T16:12:56.693817Z", "type": "file"}}```
      additionalProperties:
        $ref: "#/definitions/artifact"
    supersederUrl:
      title: (unused)
      description: Maintained for backward compatibility, but no longer used
      type: string
    features:
      title: Docker Worker feature flags
      description: Used to enable additional functionality.
      type: object
      properties:
        localLiveLog:
          type: boolean
          title: Enable live logging (worker local)
          description: >-
            Logs are stored on the worker during the duration of tasks and available via http chunked streaming then uploaded to s3
          default: true
        bulkLog:
          type: boolean
          title: Bulk upload the task log into a single artifact
          description: >-
            Useful if live logging is not interesting but the overalllog is later on
          default: true
        taskclusterProxy:
          type: boolean
          title: Taskcluster auth proxy service
          description: >-
            The auth proxy allows making requests to taskcluster/queue and taskcluster/scheduler directly from your task with the same scopes as set in the task. This can be used to make api calls via the [client](https://github.com/taskcluster/taskcluster-client) CURL, etc... Without embedding credentials in the task.
          default: false
        artifacts:
          type: boolean
          title: Artifact uploads
          description: ""
          default: true
        dind:
          type: boolean
          title: Docker in Docker
          description: >-
            Runs docker-in-docker and binds `/var/run/docker.sock` into the container. Doesn't allow privileged mode, capabilities or host volume mounts.
          default: false
        dockerSave:
          type: boolean
          title: Docker save
          description: Uploads docker images as artifacts
          default: false
        interactive:
          type: boolean
          title: Docker Exec Interactive
          description: >-
            This allows you to interactively run commands inside the container and attaches you to the stdin/stdout/stderr over a websocket. Can be used for SSH-like access to docker containers.
          default: false
        allowPtrace:
          type: boolean
          title: Allow ptrace within the container
          description: >-
            This allows you to use the Linux ptrace functionality inside the container; it is otherwise disallowed by Docker's security policy.
          default: false
        chainOfTrust:
          type: boolean
          title: Enable generation of ed25519-signed Chain of Trust artifacts
          description: >-
            Artifacts named chain-of-trust.json and chain-of-trust.json.sig should be generated which will include information for downstream tasks to build a level of trust for the artifacts produced by the task and the environment it ran in.
          default: false
      required: []
      additionalProperties: false
  additionalProperties: false
  required:
  - image
  - maxRunTime
definitions:
  mount:
    title: Mount
    oneOf:
    - "$ref": "#/definitions/fileMount"
    - "$ref": "#/definitions/writableDirectoryCache"
    - "$ref": "#/definitions/readOnlyDirectory"
  fileMount:
    type: object
    title: File Mount
    properties:
      file:
        title: File
        type: string
        description: |-
          The filesystem location to mount the file.

          Since: generic-worker 5.4.0
      content:
        description: |-
          Content of the file to be mounted.

          Since: generic-worker 5.4.0
        "$ref": "#/definitions/content"
      format:
        title: Format
        type: string
        description: |-
          Compression format of the preloaded content.

          Since: generic-worker 55.3.0
        enum:
        - bz2
        - gz
        - lz4
        - xz
        - zst
    additionalProperties: false
    required:
    - file
    - content
  writableDirectoryCache:
    type: object
    title: Writable Directory Cache
    properties:
      directory:
        title: Directory Volume
        type: string
        description: |-
          The filesystem location to mount the directory volume.

          Since: generic-worker 5.4.0
      cacheName:
        title: Cache Name
        type: string
        description: |-
          Implies a read/write cache directory volume. A unique name for the
          cache volume. Requires scope `generic-worker:cache:<cache-name>`.
          Note if this cache is loaded from an artifact, you will also require
          scope `queue:get-artifact:<artifact-name>` to use this cache.

          Since: generic-worker 5.4.0
      content:
        title: Content
        description: |-
          Optional content to be preloaded when initially creating the cache
          (if set, `format` must also be provided).

          Since: generic-worker 5.4.0
        "$ref": "#/definitions/content"
      format:
        title: Format
        type: string
        description: |-
          Archive format of the preloaded content (if `content` provided).

          Since: generic-worker 5.4.0
        enum:
        - rar
        - tar.bz2
        - tar.gz
        - tar.lz4
        - tar.xz
        - tar.zst
        - zip
    additionalProperties: false
    required:
    - directory
    - cacheName
    dependencies:
      content:
      - format
      format:
      - content
  readOnlyDirectory:
    type: object
    title: Read Only Directory
    properties:
      directory:
        title: Directory
        type: string
        description: |-
          The filesystem location to mount the directory volume.

          Since: generic-worker 5.4.0
      content:
        title: Content
        description: |-
          Contents of read only directory.

          Since: generic-worker 5.4.0
        "$ref": "#/definitions/content"
      format:
        title: Format
        type: string
        description: |-
          Archive format of content for read only directory.

          Since: generic-worker 5.4.0
        enum:
        - rar
        - tar.bz2
        - tar.gz
        - tar.lz4
        - tar.xz
        - tar.zst
        - zip
    additionalProperties: false
    required:
    - directory
    - content
    - format
  content:
    oneOf:
    - title: Artifact Content
      description: |-
        Requires scope `queue:get-artifact:<artifact-name>`.

        Since: generic-worker 5.4.0
      type: object
      properties:
        taskId:
          type: string
          pattern: "^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$"
        artifact:
          type: string
          maxLength: 1024
        sha256:
          type: string
          title: SHA 256
          description: |-
            If provided, the required SHA256 of the content body.

            Since: generic-worker 10.8.0
          pattern: "^[a-f0-9]{64}$"
      additionalProperties: false
      required:
      - taskId
      - artifact
    - title: Indexed Content
      description: |-
        Content originating from a task artifact that has been indexed by the Taskcluster Index Service.

        Since: generic-worker 51.0.0
      type: object
      properties:
        namespace:
          type: string
          maxLength: 255
        artifact:
          type: string
          maxLength: 1024
      additionalProperties: false
      required:
      - namespace
      - artifact
    - title: URL Content
      description: |-
        URL to download content from.

        Since: generic-worker 5.4.0
      type: object
      properties:
        url:
          type: string
          title: URL
          description: |-
            URL to download content from.

            Since: generic-worker 5.4.0
          format: uri
        sha256:
          type: string
          title: SHA 256
          description: |-
            If provided, the required SHA256 of the content body.

            Since: generic-worker 10.8.0
          pattern: "^[a-f0-9]{64}$"
      additionalProperties: false
      required:
      - url
    - title: Raw Content
      description: |-
        Byte-for-byte literal inline content of file/archive, up to 64KB in size.

        Since: generic-worker 11.1.0
      type: object
      properties:
        raw:
          type: string
          maxLength: 65536
          title: Raw
          description: |-
            Byte-for-byte literal inline content of file/archive, up to 64KB in size.

            Since: generic-worker 11.1.0
      additionalProperties: false
      required:
      - raw
    - title: Base64 Content
      description: |-
        Base64 encoded content of file/archive, up to 64KB (encoded) in size.

        Since: generic-worker 11.1.0
      type: object
      properties:
        base64:
          type: string
          maxLength: 65536
          title: Base64
          description: |-
            Base64 encoded content of file/archive, up to 64KB (encoded) in size.

            Since: generic-worker 11.1.0
          pattern: "^[A-Za-z0-9/+]+[=]{0,2}$"
      additionalProperties: false
      required:
      - base64
  artifact:
    type: object
    title: Docker Worker Artifact
    properties:
      type:
        title: Artifact upload type.
        type: string
        enum:
        - file
        - directory
      path:
        title: Location of artifact in container, as an absolute path.
        type: string
      expires:
        title: Date when artifact should expire must be in the future.
        type: string
        format: date-time
    additionalProperties: false
    required:
    - type
    - path
