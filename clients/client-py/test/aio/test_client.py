import datetime
import os
from datetime import timezone

import base
import pytest

import taskcluster.aio.auth as subjectAsync

pytestmark = [
    pytest.mark.skipif(
        os.environ.get("NO_TESTS_OVER_WIRE"), reason="Skipping tests over wire"
    ),
]


@pytest.mark.asyncio
async def test_async_works_with_permanent_credentials():
    """we can call methods which require authentication with valid permacreds"""

    client = subjectAsync.Auth(
        {
            "rootUrl": base.REAL_ROOT_URL,
            "credentials": {
                "clientId": "tester",
                "accessToken": "no-secret",
            },
        }
    )
    result = await client.testAuthenticate(
        {
            "clientScopes": ["test:a"],
            "requiredScopes": ["test:a"],
        }
    )
    assert result == {"scopes": ["assume:anonymous", "test:a"], "clientId": "tester"}


@pytest.mark.asyncio
async def test_async_works_with_temporary_credentials():
    """we can call methods which require authentication with temporary
    credentials generated by python client"""
    tempCred = subjectAsync.createTemporaryCredentials(
        "tester",
        "no-secret",
        datetime.datetime.now(timezone.utc),
        datetime.datetime.now(timezone.utc) + datetime.timedelta(hours=1),
        ["test:xyz"],
    )
    client = subjectAsync.Auth(
        {
            "rootUrl": base.REAL_ROOT_URL,
            "credentials": tempCred,
        }
    )

    result = await client.testAuthenticate(
        {
            "clientScopes": ["test:*"],
            "requiredScopes": ["test:xyz"],
        }
    )
    assert result == {"scopes": ["assume:anonymous", "test:xyz"], "clientId": "tester"}
