// The following code is AUTO-GENERATED. Please DO NOT edit.
// To update this generated code, run the following command:
// in the /codegenerator/model subdirectory of this project,
// making sure that `${GOPATH}/bin` is in your `PATH`:
//
// go install && go generate
//
// This package was generated from the schema defined at
// /references/queue/v1/exchanges.json

// The queue service is responsible for accepting tasks and track their state
// as they are executed by workers. In order ensure they are eventually
// resolved.
//
// This document describes AMQP exchanges offered by the queue, which allows
// third-party listeners to monitor tasks as they progress to resolution.
// These exchanges targets the following audience:
//  * Schedulers, who takes action after tasks are completed,
//  * Workers, who wants to listen for new or canceled tasks (optional),
//  * Tools, that wants to update their view as task progress.
//
// You'll notice that all the exchanges in the document shares the same
// routing key pattern. This makes it very easy to bind to all messages
// about a certain kind tasks.
//
// **Task specific routes**, a task can define a task specific route using
// the `task.routes` property. See task creation documentation for details
// on permissions required to provide task specific routes. If a task has
// the entry `'notify.by-email'` in as task specific route defined in
// `task.routes` all messages about this task will be CC'ed with the
// routing-key `'route.notify.by-email'`.
//
// These routes will always be prefixed `route.`, so that cannot interfere
// with the _primary_ routing key as documented here. Notice that the
// _primary_ routing key is always prefixed `primary.`. This is ensured
// in the routing key reference, so API clients will do this automatically.
//
// Please, note that the way RabbitMQ works, the message will only arrive
// in your queue once, even though you may have bound to the exchange with
// multiple routing key patterns that matches more of the CC'ed routing
// routing keys.
//
// **Delivery guarantees**, most operations on the queue are idempotent,
// which means that if repeated with the same arguments then the requests
// will ensure completion of the operation and return the same response.
// This is useful if the server crashes or the TCP connection breaks, but
// when re-executing an idempotent operation, the queue will also resend
// any related AMQP messages. Hence, messages may be repeated.
//
// This shouldn't be much of a problem, as the best you can achieve using
// confirm messages with AMQP is at-least-once delivery semantics. Hence,
// this only prevents you from obtaining at-most-once delivery semantics.
//
// **Remark**, some message generated by timeouts maybe dropped if the
// server crashes at wrong time. Ideally, we'll address this in the
// future. For now we suggest you ignore this corner case, and notify us
// if this corner case is of concern to you.
//
// See:
//
// How to use this package
//
// This package is designed to sit on top of http://godoc.org/github.com/taskcluster/pulse-go/pulse. Please read
// the pulse package overview to get an understanding of how the pulse client is implemented in go.
//
// This package provides two things in addition to the basic pulse package: structured types for unmarshaling
// pulse message bodies into, and custom Binding interfaces, for defining the fixed strings for task cluster
// exchange names, and routing keys as structured types.
//
// For example, when specifying a binding, rather than using:
//
//  pulse.Bind(
//  	"*.*.*.*.*.*.gaia.#",
//  	"exchange/taskcluster-queue/v1/task-defined",
//  )
//
// You can rather use:
//
//  queueevents.TaskDefined{WorkerType: "gaia"}
//
// In addition, this means that you will also get objects in your callback method like *queueevents.TaskDefinedMessage
// rather than just interface{}.
package tcqueueevents

import (
	"reflect"
	"strings"
)

// When a task is created or just defined a message is posted to this
// exchange.
//
// This message exchange is mainly useful when tasks are scheduled by a
// scheduler that uses `defineTask` as this does not make the task
// `pending`. Thus, no `taskPending` message is published.
// Please, note that messages are also published on this exchange if defined
// using `createTask`.
//
// See #taskDefined
type TaskDefined struct {
	RoutingKeyKind string `mwords:"*"`
	TaskID         string `mwords:"*"`
	RunID          string `mwords:"*"`
	WorkerGroup    string `mwords:"*"`
	WorkerID       string `mwords:"*"`
	ProvisionerID  string `mwords:"*"`
	WorkerType     string `mwords:"*"`
	SchedulerID    string `mwords:"*"`
	TaskGroupID    string `mwords:"*"`
	Reserved       string `mwords:"#"`
}

func (binding TaskDefined) RoutingKey() string {
	return generateRoutingKey(&binding)
}

func (binding TaskDefined) ExchangeName() string {
	return "exchange/taskcluster-queue/v1/task-defined"
}

func (binding TaskDefined) NewPayloadObject() interface{} {
	return new(TaskDefinedMessage)
}

// When a task becomes `pending` a message is posted to this exchange.
//
// This is useful for workers who doesn't want to constantly poll the queue
// for new tasks. The queue will also be authority for task states and
// claims. But using this exchange workers should be able to distribute work
// efficiently and they would be able to reduce their polling interval
// significantly without affecting general responsiveness.
//
// See #taskPending
type TaskPending struct {
	RoutingKeyKind string `mwords:"*"`
	TaskID         string `mwords:"*"`
	RunID          string `mwords:"*"`
	WorkerGroup    string `mwords:"*"`
	WorkerID       string `mwords:"*"`
	ProvisionerID  string `mwords:"*"`
	WorkerType     string `mwords:"*"`
	SchedulerID    string `mwords:"*"`
	TaskGroupID    string `mwords:"*"`
	Reserved       string `mwords:"#"`
}

func (binding TaskPending) RoutingKey() string {
	return generateRoutingKey(&binding)
}

func (binding TaskPending) ExchangeName() string {
	return "exchange/taskcluster-queue/v1/task-pending"
}

func (binding TaskPending) NewPayloadObject() interface{} {
	return new(TaskPendingMessage)
}

// Whenever a task is claimed by a worker, a run is started on the worker,
// and a message is posted on this exchange.
//
// See #taskRunning
type TaskRunning struct {
	RoutingKeyKind string `mwords:"*"`
	TaskID         string `mwords:"*"`
	RunID          string `mwords:"*"`
	WorkerGroup    string `mwords:"*"`
	WorkerID       string `mwords:"*"`
	ProvisionerID  string `mwords:"*"`
	WorkerType     string `mwords:"*"`
	SchedulerID    string `mwords:"*"`
	TaskGroupID    string `mwords:"*"`
	Reserved       string `mwords:"#"`
}

func (binding TaskRunning) RoutingKey() string {
	return generateRoutingKey(&binding)
}

func (binding TaskRunning) ExchangeName() string {
	return "exchange/taskcluster-queue/v1/task-running"
}

func (binding TaskRunning) NewPayloadObject() interface{} {
	return new(TaskRunningMessage)
}

// Whenever the `createArtifact` end-point is called, the queue will create
// a record of the artifact and post a message on this exchange. All of this
// happens before the queue returns a signed URL for the caller to upload
// the actual artifact with (pending on `storageType`).
//
// This means that the actual artifact is rarely available when this message
// is posted. But it is not unreasonable to assume that the artifact will
// will become available at some point later. Most signatures will expire in
// 30 minutes or so, forcing the uploader to call `createArtifact` with
// the same payload again in-order to continue uploading the artifact.
//
// However, in most cases (especially for small artifacts) it's very
// reasonable assume the artifact will be available within a few minutes.
// This property means that this exchange is mostly useful for tools
// monitoring task evaluation. One could also use it count number of
// artifacts per task, or _index_ artifacts though in most cases it'll be
// smarter to index artifacts after the task in question have completed
// successfully.
//
// *NOTE*: this message is currently only sent for reference and error
// artifacts.  This will be remedied in a future version of Taskcluster.
//
// See #artifactCreated
type ArtifactCreated struct {
	RoutingKeyKind string `mwords:"*"`
	TaskID         string `mwords:"*"`
	RunID          string `mwords:"*"`
	WorkerGroup    string `mwords:"*"`
	WorkerID       string `mwords:"*"`
	ProvisionerID  string `mwords:"*"`
	WorkerType     string `mwords:"*"`
	SchedulerID    string `mwords:"*"`
	TaskGroupID    string `mwords:"*"`
	Reserved       string `mwords:"#"`
}

func (binding ArtifactCreated) RoutingKey() string {
	return generateRoutingKey(&binding)
}

func (binding ArtifactCreated) ExchangeName() string {
	return "exchange/taskcluster-queue/v1/artifact-created"
}

func (binding ArtifactCreated) NewPayloadObject() interface{} {
	return new(ArtifactCreatedMessage)
}

// When a task is successfully completed by a worker a message is posted
// this exchange.
// This message is routed using the `runId`, `workerGroup` and `workerId`
// that completed the task. But information about additional runs is also
// available from the task status structure.
//
// See #taskCompleted
type TaskCompleted struct {
	RoutingKeyKind string `mwords:"*"`
	TaskID         string `mwords:"*"`
	RunID          string `mwords:"*"`
	WorkerGroup    string `mwords:"*"`
	WorkerID       string `mwords:"*"`
	ProvisionerID  string `mwords:"*"`
	WorkerType     string `mwords:"*"`
	SchedulerID    string `mwords:"*"`
	TaskGroupID    string `mwords:"*"`
	Reserved       string `mwords:"#"`
}

func (binding TaskCompleted) RoutingKey() string {
	return generateRoutingKey(&binding)
}

func (binding TaskCompleted) ExchangeName() string {
	return "exchange/taskcluster-queue/v1/task-completed"
}

func (binding TaskCompleted) NewPayloadObject() interface{} {
	return new(TaskCompletedMessage)
}

// When a task ran, but failed to complete successfully a message is posted
// to this exchange. This is same as worker ran task-specific code, but the
// task specific code exited non-zero.
//
// See #taskFailed
type TaskFailed struct {
	RoutingKeyKind string `mwords:"*"`
	TaskID         string `mwords:"*"`
	RunID          string `mwords:"*"`
	WorkerGroup    string `mwords:"*"`
	WorkerID       string `mwords:"*"`
	ProvisionerID  string `mwords:"*"`
	WorkerType     string `mwords:"*"`
	SchedulerID    string `mwords:"*"`
	TaskGroupID    string `mwords:"*"`
	Reserved       string `mwords:"#"`
}

func (binding TaskFailed) RoutingKey() string {
	return generateRoutingKey(&binding)
}

func (binding TaskFailed) ExchangeName() string {
	return "exchange/taskcluster-queue/v1/task-failed"
}

func (binding TaskFailed) NewPayloadObject() interface{} {
	return new(TaskFailedMessage)
}

// Whenever Taskcluster fails to run a message is posted to this exchange.
// This happens if the task isn't completed before its `deadlìne`,
// all retries failed (i.e. workers stopped responding), the task was
// canceled by another entity, or the task carried a malformed payload.
//
// The specific _reason_ is evident from that task status structure, refer
// to the `reasonResolved` property for the last run.
//
// See #taskException
type TaskException struct {
	RoutingKeyKind string `mwords:"*"`
	TaskID         string `mwords:"*"`
	RunID          string `mwords:"*"`
	WorkerGroup    string `mwords:"*"`
	WorkerID       string `mwords:"*"`
	ProvisionerID  string `mwords:"*"`
	WorkerType     string `mwords:"*"`
	SchedulerID    string `mwords:"*"`
	TaskGroupID    string `mwords:"*"`
	Reserved       string `mwords:"#"`
}

func (binding TaskException) RoutingKey() string {
	return generateRoutingKey(&binding)
}

func (binding TaskException) ExchangeName() string {
	return "exchange/taskcluster-queue/v1/task-exception"
}

func (binding TaskException) NewPayloadObject() interface{} {
	return new(TaskExceptionMessage)
}

// A message is published on task-group-resolved whenever all submitted
// tasks (whether scheduled or unscheduled) for a given task group have
// been resolved, regardless of whether they resolved as successful or
// not. A task group may be resolved multiple times, since new tasks may
// be submitted against an already resolved task group.
//
// See #taskGroupResolved
type TaskGroupResolved struct {
	RoutingKeyKind string `mwords:"*"`
	TaskGroupID    string `mwords:"*"`
	SchedulerID    string `mwords:"*"`
	Reserved       string `mwords:"#"`
}

func (binding TaskGroupResolved) RoutingKey() string {
	return generateRoutingKey(&binding)
}

func (binding TaskGroupResolved) ExchangeName() string {
	return "exchange/taskcluster-queue/v1/task-group-resolved"
}

func (binding TaskGroupResolved) NewPayloadObject() interface{} {
	return new(TaskGroupResolvedMessage)
}

func generateRoutingKey(x interface{}) string {
	val := reflect.ValueOf(x).Elem()
	p := make([]string, 0, val.NumField())
	for i := 0; i < val.NumField(); i++ {
		valueField := val.Field(i)
		typeField := val.Type().Field(i)
		tag := typeField.Tag
		if t := tag.Get("mwords"); t != "" {
			if v := valueField.Interface(); v == "" {
				p = append(p, t)
			} else {
				p = append(p, v.(string))
			}
		}
	}
	return strings.Join(p, ".")
}
