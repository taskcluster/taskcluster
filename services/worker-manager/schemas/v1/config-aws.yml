$schema: "/schemas/common/metaschema.json#"
title: AWS Provider Config
description: Object with an array of possible options for different regions
type: object
properties:
  launchConfigs:
    title: Launch Configurations
    type: array
    uniqueItems: true
    items:
      type: object
      properties:
        workerManager:
          title: Worker Manager Config
          type: object
          description: |-
            Worker Manager's own configuration settings per launch configuration.
            The other properties of the launch configuration section are passed directly through to
            AWS APIs, whereas this section is interpreted directly by Worker Manager.
          properties:
            launchConfigId: { $const: launch-config-id }
            capacityPerInstance: { $const: lc-capacity-per-instance }
            initialWeight: { $const: lc-initial-weight }
            maxCapacity: { $const: lc-max-capacity }
          additionalProperties: false
        region:
          title: Region
          type: string
          description: AWS region (not to be confused with AZ) to launch the instances in
        launchConfig:
          title: Launch Configuration
          type: object
          description: |
            An object to be passed in to AWS runInstances method.
            See the documentation [here](https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/EC2.html#runInstances-property)
            You can configure any properties you need. Note, however, that we disallow passing in arbitrary IAM instance profiles.
          properties:
            ImageId:
              type: string
              description: The ID of the AMI to launch an instance from.
          required:
            - ImageId
          not:
            required:
              - IamInstanceProfile
              - UserData
              - MinCount
              - MaxCount
          additionalProperties: true
        additionalUserData:
          type: object
          properties:
            # These properties are not allowed, so we assert that
            # they do not match the empty schema
            rootUrl: {not: {}}
            workerPoolId: {not: {}}
            providerId: {not: {}}
            workerGroup: {not: {}}
            workerConfig: {not: {}}
          required: []
          additionalProperties: true
        capacityPerInstance: { $const: capacity-per-instance-deprecated }
        workerConfig:
          title: Worker Config
          type: object
          additionalProperties: true
          description: |
            This value is supplied unchanged as the `workerConfig` property of the `taskcluster` instance metadata attribute.
            The expectation is that the worker will merge this information with configuration from other sources,
            and this is precisely what [worker-runner](https://docs.taskcluster.net/docs/reference/workers/worker-runner) does.
            This property must not be used for secret configuration, as it is visible both in the worker pool configuration and in the worker instance's metadata.
            Instead, put secret configuration in the [secrets service](https://docs.taskcluster.net/docs/reference/workers/worker-runner).
      additionalProperties: false
      required:
        - region
        - launchConfig
  lifecycle: {$ref: 'worker-lifecycle.json#'}
  minCapacity: { $const: min-capacity }
  maxCapacity: { $const: max-capacity }
  scalingRatio: { $const: scaling-ratio }
additionalProperties: false
required:
  - launchConfigs
  - minCapacity
  - maxCapacity
