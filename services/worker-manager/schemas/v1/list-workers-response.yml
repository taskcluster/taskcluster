$schema: "/schemas/common/metaschema.json#"
title:              "List Workers Response"
description: |
  Response from a `listWorkers` request.
type:               object
properties:
  workers:
    type:           array
    title:          "Workers from a WorkerType"
    description: |
      List of workers in this worker-type.
    uniqueItems: true
    items:
      title:        "Worker"
      type:         object
      properties:
        workerGroup:
          description: |
            Identifier for the worker group containing this worker.
          type:         string
          minLength:    {$const: identifier-min-length}
          maxLength:    {$const: identifier-max-length}
          pattern:      {$const: identifier-pattern}
        workerId:
          description: |
            Identifier for this worker (unique within this worker group).
          type:         string
          minLength:    {$const: identifier-min-length}
          maxLength:    {$const: identifier-max-length}
          pattern:      {$const: identifier-pattern}
        workerPoolId: {$ref: "task.json#/properties/workerPoolId"}
        quarantineUntil:
          title:        "Worker Quarantine"
          description: |
            Quarantining a worker allows the machine to remain alive but not accept jobs.
            Once the quarantineUntil time has elapsed, the worker resumes accepting jobs.
            Note that a quarantine can be lifted by setting `quarantineUntil` to the present time (or
            somewhere in the past).
          type:         string
          format:       date-time
        firstClaim:
          title:        "First task claimed"
          description: |
            Date of the first time this worker claimed a task.
          type:         string
          format:       date-time
        latestTask:
          title:          "Most Recent Task"
          description: |
            The most recent claimed task
          $ref:       "task-run.json#"
        lastDateActive:
          title:        "Worker Last Date Active"
          description: |
            Date of the last time this worker was seen active. Updated each time a worker calls
            `queue.claimWork`, `queue.reclaimTask`, and `queue.declareWorker` for this task queue.
            `lastDateActive` is updated every half hour but may be off by up-to half an hour.
            Nonetheless, `lastDateActive` is a good indicator of when the worker was last seen active.
            This defaults to null in the database, and is set to the current time when the worker
            is first seen.
          type:         string
          format:       date-time
        state:
          title: State
          description: |
            A string specifying the state this worker is in so far as worker-manager knows.
            A "requested" worker is in the process of starting up, and if successful will enter
            the "running" state once it has registered with the `registerWorker` API method.  A
            "stopping" worker is in the process of shutting down and deleting resources, while
            a "stopped" worker is completely stopped.  Stopped workers are kept for historical
            purposes and are purged when they expire.  Note that some providers transition workers
            directly from "running" to "stopped".
            An "standalone" worker is a worker that is not managed by worker-manager, these workers
            are only known by the queue.
          type: string
          enum: ["requested", "running", "stopping", "stopped", "standalone"]
        capacity:
          title: Worker Capacity
          description: |
            Number of tasks this worker can handle at once. A worker capacity of 0 means
            the worker is not managed by worker manager and is only known to the queue, the
            true capacity is not known.
          type: integer
          minimum: 0
        providerId:
          title: Provider
          type: string
          # note that this is typically used as the workerGroup for workers,
          # so its format should match that for workerGroup.
          minLength: {$const: identifier-min-length}
          maxLength: {$const: identifier-max-length}
          pattern: {$const: identifier-pattern}
          description: |
            The provider that had started the worker and responsible for managing it.
            Can be different from the provider that's currently in the worker pool config.
            A providerId of "none" is used when the worker is not managed by worker manager.
        launchConfigId: {$const: launch-config-id}
      additionalProperties: false
      required:
        - workerGroup
        - workerId
  continuationToken:
    type:           string
    title:          "Continuation Token"
    description: |
      Opaque `continuationToken` to be given as query-string option to get the
      next set of workers in the worker-type.
      This property is only present if another request is necessary to fetch all
      results. In practice the next request with a `continuationToken` may not
      return additional results, but it can. Thus, you can only be sure to have
      all the results if you've called `listWorkerTypes` with `continuationToken`
      until you get a result without a `continuationToken`.
additionalProperties: false
required:
 - workers
