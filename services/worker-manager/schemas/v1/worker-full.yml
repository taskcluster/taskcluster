$schema: "/schemas/common/metaschema.json#"
title: Worker Full Definition
description: A complete worker definition.
type: object
properties:

  workerPoolId: {$ref: "worker-pool-full.json#/properties/workerPoolId"}

  workerGroup:
    title: Worker group
    type: string
    description: Worker group to which this worker belongs
    minLength: {$const: identifier-min-length}
    maxLength: {$const: identifier-max-length}
    pattern: {$const: identifier-pattern}

  workerId:
    title: Worker ID
    type: string
    description: Worker ID
    minLength: {$const: identifier-min-length}
    maxLength: {$const: identifier-max-length}
    pattern: {$const: identifier-pattern}

  providerId:
    title: Provider
    type: string
    # note that this is typically used as the workerGroup for workers,
    # so its format should match that for workerGroup.
    minLength: {$const: identifier-min-length}
    maxLength: {$const: identifier-max-length}
    pattern: {$const: identifier-pattern}
    description: |
      The provider that had started the worker and responsible for managing it.
      Can be different from the provider that's currently in the worker pool config.

  created:
    title: Created
    description: Date and time when this worker was created
    type: string
    format: date-time

  expires:
    title: Expires
    description: Date and time when this worker will be deleted from the DB
    type: string
    format: date-time

  lastModified:
    title: Last Modified
    description: Date and time when this worker last changed state
    type: string
    format: date-time

  lastChecked:
    title: Last Checked
    description: |
      Date and time when the state of this worker was verified with a cloud api.
      For providers with nothing to check, this will just be permanently set to the
      time the worker was created.
    type: string
    format: date-time

  state:
    title: State
    description: |
      A string specifying the state this worker is in so far as worker-manager knows.
      A "requested" worker is in the process of starting up, and if successful will enter
      the "running" state once it has registered with the `registerWorker` API method.  A
      "stopping" worker is in the process of shutting down and deleting resources, while
      a "stopped" worker is completely stopped.  Stopped workers are kept for historical
      purposes and are purged when they expire.  Note that some providers transition workers
      directly from "running" to "stopped".
    type: string
    enum: ["requested", "running", "stopping", "stopped"]

  capacity:
    title: Worker Capacity
    description: Number of tasks this worker can handle at once
    type: integer
    minimum: 1

  launchConfigId: { $const: launch-config-id }

additionalProperties: false
required:
  - workerPoolId
  - workerGroup
  - workerId
  - providerId
  - created
  - expires
  - state
  - capacity
  - lastChecked
  - lastModified
