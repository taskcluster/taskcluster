$schema: "/schemas/common/metaschema.json#"
title:          "Worker Response"
description: |
  Response containing information about a worker.
type:           object
properties:
  provisionerId: {$ref: "task.json#/properties/provisionerId"}
  workerType: {$ref: "task.json#/properties/workerType"}
  workerPoolId: {$ref: "task.json#/properties/workerPoolId"}
  workerGroup:
    title:        "Worker Group"
    description: |
      Identifier for group that worker who executes this run is a part of,
      this identifier is mainly used for efficient routing.
    type:         string
    minLength:    {$const: identifier-min-length}
    maxLength:    {$const: identifier-max-length}
    pattern:      {$const: identifier-pattern}
  workerId:
    title:        "Worker Identifier"
    description: |
      Identifier for worker evaluating this run within given
      `workerGroup`.
    type:         string
    minLength:    {$const: identifier-min-length}
    maxLength:    {$const: identifier-max-length}
    pattern:      {$const: identifier-pattern}
  recentTasks:
    title:        "Most Recent Tasks"
    description: |
      List of 20 most recent tasks claimed by the worker.
    type:         array
    uniqueItems: false
    items:
      $ref:       "task-run.json#"
  expires:
    title:        "Worker Expiration"
    description: |
      Date and time after which the worker will be automatically
      deleted by the queue.
    type:         string
    format:       date-time
  quarantineUntil:
    title:        "Worker Quarantine"
    description: |
      Quarantining a worker allows the machine to remain alive but not accept jobs.
      Once the quarantineUntil time has elapsed, the worker resumes accepting jobs.
      Note that a quarantine can be lifted by setting `quarantineUntil` to the present time (or
      somewhere in the past).
    type:         "string"
    format:       date-time
  quarantineDetails:
    title:       "Worker Quarantine Details"
    description: |
      This is a list of changes to the worker's quarantine status. Each entry is an object
      containing information about the time, clientId and reason for the change.
    type:        array
    uniqueItems: true
    items:       {$const: quarantine-details-item}
  firstClaim:
    title:        "First task claimed"
    description: |
      Date of the first time this worker claimed a task.
    type:         string
    format:       date-time
  lastDateActive:
    title:        "Worker Last Date Active"
    description: |
      Date of the last time this worker was seen active. Updated each time a worker calls
      `queue.claimWork`, `queue.reclaimTask`, and `queue.declareWorker` for this task queue.
      `lastDateActive` is updated every half hour but may be off by up-to half an hour.
      Nonetheless, `lastDateActive` is a good indicator of when the worker was last seen active.
      This defaults to null in the database, and is set to the current time when the worker
      is first seen.
    type:         string
    format:       date-time
  actions:
    title:        "Worker Actions"
    type:         array
    uniqueItems: false
    items:
      type:       object
      title:      "Worker Action"
      description: {$const: action-description}
      properties:
        name:
          title:  "Name"
          description: |
            Short names for things like logging/error messages.
          type:   string
        title:
          title:  "Title"
          description: |
            Appropriate title for any sort of Modal prompt.
        context:
          title:  "Context"
          description: |
            Only actions with the context `worker` are included.
          type:   string
          enum:   ["worker"]
        url:
          title:  "URL"
          description: {$const: action-url-description}
          type:    string
        method:
          title:  "Method"
          description: |
            Method to indicate the desired action to be performed for a given resource.
          type:   string
          enum:   ["POST", "PUT", "DELETE", "PATCH"]
        description:
          title:   "Description"
          description: |
            Description of the provisioner.
          type:    string
      required:
        - name
        - title
        - context
        - url
        - method
        - description
      additionalProperties: false
  state:
    title: State
    description: |
      A string specifying the state this worker is in so far as worker-manager knows.
      A "requested" worker is in the process of starting up, and if successful will enter
      the "running" state once it has registered with the `registerWorker` API method.  A
      "stopping" worker is in the process of shutting down and deleting resources, while
      a "stopped" worker is completely stopped.  Stopped workers are kept for historical
      purposes and are purged when they expire.  Note that some providers transition workers
      directly from "running" to "stopped".
      An "standalone" worker is a worker that is not managed by worker-manager, these workers
      are only known by the queue.
    type: string
    enum: ["requested", "running", "stopping", "stopped", "standalone"]
  capacity:
    title: Worker Capacity
    description: |
      Number of tasks this worker can handle at once. A worker capacity of 0 means
      the worker is not managed by worker manager and is only known to the queue, the
      true capacity is not known.
    type: integer
    minimum: 0
  providerId:
    title: Provider
    type: string
    # note that this is typically used as the workerGroup for workers,
    # so its format should match that for workerGroup.
    minLength: {$const: identifier-min-length}
    maxLength: {$const: identifier-max-length}
    pattern: {$const: identifier-pattern}
    description: |
      The provider that had started the worker and responsible for managing it.
      Can be different from the provider that's currently in the worker pool config.
      A providerId of "none" is used when the worker is not managed by worker manager.
additionalProperties: false
required:
  - provisionerId
  - workerType
  - workerGroup
  - workerId
  - recentTasks
  - expires
  - firstClaim
  - actions
