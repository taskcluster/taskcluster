defaults:
  app:
    # Azure table for the client table
    clientTableName:          Clients

    # Azure table for the roles table
    rolesTableName:           Roles

    # Key for signing in base.Entity (sufficiently random string required)
    tableSigningKey:          !env TABLE_SIGNING_KEY
    # Key for data encryption in base.Entity (32 random bytes as base64)
    tableCryptoKey:           !env TABLE_CRYPTO_KEY

    # Publish references and schemas
    publishMetaData:          !env:bool PUBLISH_METADATA

    # Exchange prefix for exchanges declared
    exchangePrefix:           v1/

    # Name of component in statistics
    statsComponent:           auth

    # root accessToken, if defined will cause root client to be
    # automatically created when application is started
    rootAccessToken:          !env ROOT_ACCESS_TOKEN

    # Accounts that auth can delegate access to, as JSON
    azureAccounts:            !env:json AZURE_ACCOUNTS

    # Maximum before updating lastUsed, MUST be negative
    # A sane value is something like 6 hours as all nodes will race to update
    # this value, and it's really only a best effort service.
    maxLastUsedDelay:         '- 6 hours'

  server:
    # Public URL from which the server can be accessed (used for persona)
    publicUrl:                https://auth.taskcluster.net

    # Port to listen for requests on
    port:                     !env:number PORT

    # Environment 'development' or 'production'
    env:                      !env NODE_ENV

    # Force SSL, not useful when runnning locally
    forceSSL:                 !env:bool FORCE_SSL

    # Trust a forwarding proxy
    trustProxy:               !env:bool TRUST_PROXY

  azure:
    # Azure table storage account name
    accountName:              !env AZURE_ACCOUNT_NAME

    # Azure table storage account key
    accountKey:               !env AZURE_ACCOUNT_KEY

  pulse:
    username:                 !env PULSE_USERNAME
    password:                 !env PULSE_PASSWORD

  raven:
   # This can be grabbed from the settings of the sentry project
   # and is a string that looks like:
   # https://<pubkey>:<privkey>@app.getsentry.com/<port>
   sentryDSN:                 !env SENTRY_DSN

  influx:
    connectionString:         !env INFLUX_CONNECTION_STRING

  # AWS SDK configuration for delegation of S3 access and publication of
  # schemas and references
  aws:
    accessKeyId:              !env AWS_ACCESS_KEY_ID
    secretAccessKey:          !env AWS_SECRET_ACCESS_KEY
    # Default AWS region, this is where the S3 bucket lives
    region:                   'us-west-2'
    # Lock API version to use the latest API from 2013, this is fuzzy locking,
    # but it does the trick...
    apiVersion:               '2014-01-01'

production:
  app:
    clientTableName:          Clients
    rolesTableName:           Roles
  server:
    forceSSL:                 true
    trustProxy:               true
    env:                      'production'
    development:              false
test:
  app:
    clientTableName:          TestClients28
    rolesTableName:           TestRoles28
    tableSigningKey:          not-a-secret-so-you-cant-guess-it
    tableCryptoKey:           AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
    publishMetaData:          false
    statsComponent:           auth-tests
    # hardcoded into helper.js
    rootAccessToken:          PKqZk1pIRgKnSLNXC86rKwl5Rp5Ki4SsKlZGEu2_kGNQ
    # Special value for tests, as we don't want to wait forever
    maxLastUsedDelay:         '- 3 seconds'
  # Test bucket for STS credentials
  test:
    testBucket:               !env TEST_BUCKET
  server:
    publicUrl:                http://localhost:60551
    forceSSL:                 false
    port:                     60551
    env:                      development
    development:              true
    trustProxy:               true
  checkStaging:
    baseUrl:                  "https://taskcluster-auth-staging.herokuapp.com/v1/"
