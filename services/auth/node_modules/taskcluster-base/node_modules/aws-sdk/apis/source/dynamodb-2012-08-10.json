{
  "api_version": "2012-08-10",
  "type": "json",
  "json_version": 1.0,
  "target_prefix": "DynamoDB_20120810",
  "signature_version": "v4",
  "service_full_name": "Amazon DynamoDB",
  "service_abbreviation": "DynamoDB",
  "endpoint_prefix": "dynamodb",
  "xmlnamespace": "http://dynamodb.amazonaws.com/doc/2012-08-10/",
  "documentation": "\n    <fullname>Amazon DynamoDB</fullname>\n    <b>Overview</b>\n    <p>This is the Amazon DynamoDB API Reference. This guide provides descriptions and samples of the Amazon DynamoDB\n      API. </p>\n  ",
  "operations": {
    "BatchGetItem": {
      "name": "BatchGetItem",
      "input": {
        "shape_name": "BatchGetItemInput",
        "type": "structure",
        "members": {
          "RequestItems": {
            "shape_name": "BatchGetRequestMap",
            "type": "map",
            "keys": {
              "shape_name": "TableName",
              "type": "string",
              "min_length": 3,
              "max_length": 255,
              "pattern": "[a-zA-Z0-9_.-]+",
              "documentation": null
            },
            "members": {
              "shape_name": "KeysAndAttributes",
              "type": "structure",
              "members": {
                "Keys": {
                  "shape_name": "KeyList",
                  "type": "list",
                  "members": {
                    "shape_name": "Key",
                    "type": "map",
                    "keys": {
                      "shape_name": "AttributeName",
                      "type": "string",
                      "documentation": null
                    },
                    "members": {
                      "shape_name": "AttributeValue",
                      "type": "structure",
                      "members": {
                        "S": {
                          "shape_name": "StringAttributeValue",
                          "type": "string",
                          "documentation": "\n    <p>A String data type</p>\n  "
                        },
                        "N": {
                          "shape_name": "NumberAttributeValue",
                          "type": "string",
                          "documentation": "\n    <p>A Number data type</p>\n  "
                        },
                        "B": {
                          "shape_name": "BinaryAttributeValue",
                          "type": "blob",
                          "documentation": "\n    <p>A Binary data type</p>\n  "
                        },
                        "SS": {
                          "shape_name": "StringSetAttributeValue",
                          "type": "list",
                          "members": {
                            "shape_name": "StringAttributeValue",
                            "type": "string",
                            "documentation": null
                          },
                          "documentation": "\n    <p>A String set data type</p>\n  "
                        },
                        "NS": {
                          "shape_name": "NumberSetAttributeValue",
                          "type": "list",
                          "members": {
                            "shape_name": "NumberAttributeValue",
                            "type": "string",
                            "documentation": null
                          },
                          "documentation": "\n    <p> Number set data type</p>\n  "
                        },
                        "BS": {
                          "shape_name": "BinarySetAttributeValue",
                          "type": "list",
                          "members": {
                            "shape_name": "BinaryAttributeValue",
                            "type": "blob",
                            "documentation": null
                          },
                          "documentation": "\n    <p>A Binary set data type</p>\n  "
                        }
                      },
                      "documentation": "\n    <p>Represents the data for an attribute. You can set one, and only one, of the elements.</p>\n  "
                    },
                    "documentation": null
                  },
                  "min_length": 1,
                  "max_length": 100,
                  "documentation": "\n    <p>The primary key attribute values that define the items and the attributes\n      associated with the items.</p>\n  ",
                  "required": true
                },
                "AttributesToGet": {
                  "shape_name": "AttributeNameList",
                  "type": "list",
                  "members": {
                    "shape_name": "AttributeName",
                    "type": "string",
                    "documentation": null
                  },
                  "min_length": 1,
                  "documentation": "\n    <p>One or more attributes to retrieve from the table or index. If no attribute names are \n      specified then all attributes will be returned. If any of the specified attributes are not\n      found, they will not appear in the result.</p>\n              <p>If you are querying an index and request only attributes that are projected into that\n          index, the operation will read only the index and not the table. If any of the requested\n          attributes are not projected into the index, Amazon DynamoDB will need to fetch each\n          matching item from the table. This extra fetching incurs additional throughput cost and\n          latency. </p>\n\n  "
                },
                "ConsistentRead": {
                  "shape_name": "ConsistentRead",
                  "type": "boolean",
                  "documentation": "\n    <p>The consistency of a read operation. If set to <code>true</code>, then a strongly\n      consistent read is used; otherwise, an eventually consistent read is used.</p>\n  "
                }
              },
              "documentation": "\n    <p>Represents a set of primary keys and, for each key, the attributes to retrieve from the\n      table.</p>\n  "
            },
            "min_length": 1,
            "max_length": 100,
            "documentation": "\n    <p>A map of one or more table names and, for each table, the corresponding primary keys for the items to retrieve.\n      Each table name can be invoked only once.</p>\n    <p>Each element in the map consists of the following:</p>\n    <ul>\n      <li>\n        <p><i>Keys</i> - An array of primary key attribute values that define specific items in the table.</p>\n      </li>\n\n      <li>\n        <p><i>AttributesToGet</i> - One or more attributes to be retrieved from the table or index. By\n          default, all attributes are returned. If a specified attribute is not found, it does not\n          appear in the result.</p>\n      </li>\n\n      <li>\n        <p><i>ConsistentRead</i> - If <code>true</code>, a strongly consistent read is used; if\n            <code>false</code> (the default), an eventually consistent read is used.</p>\n      </li>\n    </ul>\n  ",
            "required": true
          },
          "ReturnConsumedCapacity": {
            "shape_name": "ReturnConsumedCapacity",
            "type": "string",
            "enum": [
              "INDEXES",
              "TOTAL",
              "NONE"
            ],
            "documentation": "\n    <p>If set to <code>TOTAL</code>, the response includes <i>ConsumedCapacity</i> data for tables and indexes. If set to <code>INDEXES</code>, the repsonse includes <i>ConsumedCapacity</i> for indexes. If set to <code>NONE</code> (the default), <i>ConsumedCapacity</i> is not included in the response.</p>\n  "
          }
        },
        "documentation": "\n    <p>Represents the input of a <i>BatchGetItem</i> operation.</p>\n  "
      },
      "output": {
        "shape_name": "BatchGetItemOutput",
        "type": "structure",
        "members": {
          "Responses": {
            "shape_name": "BatchGetResponseMap",
            "type": "map",
            "keys": {
              "shape_name": "TableName",
              "type": "string",
              "min_length": 3,
              "max_length": 255,
              "pattern": "[a-zA-Z0-9_.-]+",
              "documentation": null
            },
            "members": {
              "shape_name": "ItemList",
              "type": "list",
              "members": {
                "shape_name": "AttributeMap",
                "type": "map",
                "keys": {
                  "shape_name": "AttributeName",
                  "type": "string",
                  "documentation": null
                },
                "members": {
                  "shape_name": "AttributeValue",
                  "type": "structure",
                  "members": {
                    "S": {
                      "shape_name": "StringAttributeValue",
                      "type": "string",
                      "documentation": "\n    <p>A String data type</p>\n  "
                    },
                    "N": {
                      "shape_name": "NumberAttributeValue",
                      "type": "string",
                      "documentation": "\n    <p>A Number data type</p>\n  "
                    },
                    "B": {
                      "shape_name": "BinaryAttributeValue",
                      "type": "blob",
                      "documentation": "\n    <p>A Binary data type</p>\n  "
                    },
                    "SS": {
                      "shape_name": "StringSetAttributeValue",
                      "type": "list",
                      "members": {
                        "shape_name": "StringAttributeValue",
                        "type": "string",
                        "documentation": null
                      },
                      "documentation": "\n    <p>A String set data type</p>\n  "
                    },
                    "NS": {
                      "shape_name": "NumberSetAttributeValue",
                      "type": "list",
                      "members": {
                        "shape_name": "NumberAttributeValue",
                        "type": "string",
                        "documentation": null
                      },
                      "documentation": "\n    <p> Number set data type</p>\n  "
                    },
                    "BS": {
                      "shape_name": "BinarySetAttributeValue",
                      "type": "list",
                      "members": {
                        "shape_name": "BinaryAttributeValue",
                        "type": "blob",
                        "documentation": null
                      },
                      "documentation": "\n    <p>A Binary set data type</p>\n  "
                    }
                  },
                  "documentation": "\n    <p>Represents the data for an attribute. You can set one, and only one, of the elements.</p>\n  "
                },
                "documentation": null
              },
              "documentation": null
            },
            "documentation": "\n    <p>A map of table name to a list of items.  Each object in <i>Responses</i> consists of a table name, along with a map of attribute data consisting of the data type and attribute value.</p>\n  "
          },
          "UnprocessedKeys": {
            "shape_name": "BatchGetRequestMap",
            "type": "map",
            "keys": {
              "shape_name": "TableName",
              "type": "string",
              "min_length": 3,
              "max_length": 255,
              "pattern": "[a-zA-Z0-9_.-]+",
              "documentation": null
            },
            "members": {
              "shape_name": "KeysAndAttributes",
              "type": "structure",
              "members": {
                "Keys": {
                  "shape_name": "KeyList",
                  "type": "list",
                  "members": {
                    "shape_name": "Key",
                    "type": "map",
                    "keys": {
                      "shape_name": "AttributeName",
                      "type": "string",
                      "documentation": null
                    },
                    "members": {
                      "shape_name": "AttributeValue",
                      "type": "structure",
                      "members": {
                        "S": {
                          "shape_name": "StringAttributeValue",
                          "type": "string",
                          "documentation": "\n    <p>A String data type</p>\n  "
                        },
                        "N": {
                          "shape_name": "NumberAttributeValue",
                          "type": "string",
                          "documentation": "\n    <p>A Number data type</p>\n  "
                        },
                        "B": {
                          "shape_name": "BinaryAttributeValue",
                          "type": "blob",
                          "documentation": "\n    <p>A Binary data type</p>\n  "
                        },
                        "SS": {
                          "shape_name": "StringSetAttributeValue",
                          "type": "list",
                          "members": {
                            "shape_name": "StringAttributeValue",
                            "type": "string",
                            "documentation": null
                          },
                          "documentation": "\n    <p>A String set data type</p>\n  "
                        },
                        "NS": {
                          "shape_name": "NumberSetAttributeValue",
                          "type": "list",
                          "members": {
                            "shape_name": "NumberAttributeValue",
                            "type": "string",
                            "documentation": null
                          },
                          "documentation": "\n    <p> Number set data type</p>\n  "
                        },
                        "BS": {
                          "shape_name": "BinarySetAttributeValue",
                          "type": "list",
                          "members": {
                            "shape_name": "BinaryAttributeValue",
                            "type": "blob",
                            "documentation": null
                          },
                          "documentation": "\n    <p>A Binary set data type</p>\n  "
                        }
                      },
                      "documentation": "\n    <p>Represents the data for an attribute. You can set one, and only one, of the elements.</p>\n  "
                    },
                    "documentation": null
                  },
                  "min_length": 1,
                  "max_length": 100,
                  "documentation": "\n    <p>The primary key attribute values that define the items and the attributes\n      associated with the items.</p>\n  ",
                  "required": true
                },
                "AttributesToGet": {
                  "shape_name": "AttributeNameList",
                  "type": "list",
                  "members": {
                    "shape_name": "AttributeName",
                    "type": "string",
                    "documentation": null
                  },
                  "min_length": 1,
                  "documentation": "\n    <p>One or more attributes to retrieve from the table or index. If no attribute names are \n      specified then all attributes will be returned. If any of the specified attributes are not\n      found, they will not appear in the result.</p>\n              <p>If you are querying an index and request only attributes that are projected into that\n          index, the operation will read only the index and not the table. If any of the requested\n          attributes are not projected into the index, Amazon DynamoDB will need to fetch each\n          matching item from the table. This extra fetching incurs additional throughput cost and\n          latency. </p>\n\n  "
                },
                "ConsistentRead": {
                  "shape_name": "ConsistentRead",
                  "type": "boolean",
                  "documentation": "\n    <p>The consistency of a read operation. If set to <code>true</code>, then a strongly\n      consistent read is used; otherwise, an eventually consistent read is used.</p>\n  "
                }
              },
              "documentation": "\n    <p>Represents a set of primary keys and, for each key, the attributes to retrieve from the\n      table.</p>\n  "
            },
            "min_length": 1,
            "max_length": 100,
            "documentation": "\n    <p>A map of tables and their respective keys that were not processed with the current response.\n      The <i>UnprocessedKeys</i> value is in the same form as <i>RequestItems</i>, so the value can\n      be provided directly to a subsequent <i>BatchGetItem</i> operation. For more information, see\n        <i>RequestItems</i> in the Request Parameters section.</p>\n    <p>Each element consists of:</p>\n    <ul>\n      <li>\n        <p><i>Keys</i> - An array of primary key attribute values that define specific items in the table.</p>\n      </li>\n      \n      \n      <li>\n        <li>\n          <p><i>AttributesToGet</i> - One or more attributes to be retrieved from the table or index. By\n            default, all attributes are returned. If a specified attribute is not found, it does not\n            appear in the result.</p>\n        </li>\n                  <p>If you are querying an index and request only attributes that are projected into that\n          index, the operation will read only the index and not the table. If any of the requested\n          attributes are not projected into the index, Amazon DynamoDB will need to fetch each\n          matching item from the table. This extra fetching incurs additional throughput cost and\n          latency. </p>\n\n      </li>\n\n      <li>\n        <p><i>ConsistentRead</i> - The consistency of a read operation. If set to\n            <code>true</code>, then a strongly consistent read is used; otherwise, an eventually\n          consistent read is used.</p>\n      </li>\n    </ul>\n\n  "
          },
          "ConsumedCapacity": {
            "shape_name": "ConsumedCapacityMultiple",
            "type": "list",
            "members": {
              "shape_name": "ConsumedCapacity",
              "type": "structure",
              "members": {
                "TableName": {
                  "shape_name": "TableName",
                  "type": "string",
                  "min_length": 3,
                  "max_length": 255,
                  "pattern": "[a-zA-Z0-9_.-]+",
                  "documentation": "\n    <p>The name of the table that was affected by the operation.</p>\n  "
                },
                "CapacityUnits": {
                  "shape_name": "ConsumedCapacityUnits",
                  "type": "double",
                  "documentation": "\n    <p>The total number of capacity units consumed by the operation.</p>\n  "
                },
                "Table": {
                  "shape_name": "Capacity",
                  "type": "structure",
                  "members": {
                    "CapacityUnits": {
                      "shape_name": "ConsumedCapacityUnits",
                      "type": "double",
                      "documentation": "\n    <p>The total number of capacity units consumed on a table or an index.</p>\n  "
                    }
                  },
                  "documentation": "\n    <p>The amount of throughput consumed on the table affected by the operation.</p>\n  "
                },
                "LocalSecondaryIndexes": {
                  "shape_name": "SecondaryIndexesCapacityMap",
                  "type": "map",
                  "keys": {
                    "shape_name": "IndexName",
                    "type": "string",
                    "min_length": 3,
                    "max_length": 255,
                    "pattern": "[a-zA-Z0-9_.-]+",
                    "documentation": null
                  },
                  "members": {
                    "shape_name": "Capacity",
                    "type": "structure",
                    "members": {
                      "CapacityUnits": {
                        "shape_name": "ConsumedCapacityUnits",
                        "type": "double",
                        "documentation": "\n    <p>The total number of capacity units consumed on a table or an index.</p>\n  "
                      }
                    },
                    "documentation": "\n    <p>Represents the amount of provisioned throughput capacity consumed on a table or an index. </p>\n  "
                  },
                  "documentation": "\n    <p>The amount of throughput consumed on each local index affected by the operation.</p>\n  "
                },
                "GlobalSecondaryIndexes": {
                  "shape_name": "SecondaryIndexesCapacityMap",
                  "type": "map",
                  "keys": {
                    "shape_name": "IndexName",
                    "type": "string",
                    "min_length": 3,
                    "max_length": 255,
                    "pattern": "[a-zA-Z0-9_.-]+",
                    "documentation": null
                  },
                  "members": {
                    "shape_name": "Capacity",
                    "type": "structure",
                    "members": {
                      "CapacityUnits": {
                        "shape_name": "ConsumedCapacityUnits",
                        "type": "double",
                        "documentation": "\n    <p>The total number of capacity units consumed on a table or an index.</p>\n  "
                      }
                    },
                    "documentation": "\n    <p>Represents the amount of provisioned throughput capacity consumed on a table or an index. </p>\n  "
                  },
                  "documentation": "\n    <p>The amount of throughput consumed on each global index affected by the operation.</p>\n  "
                }
              },
              "documentation": "\n    <p>Represents the capacity units consumed by an operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. <i>ConsumedCapacity</i> is only returned if it was asked for in the request. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html\">Provisioned Throughput</a> in the Amazon DynamoDB Developer Guide.</p>\n  "
            },
            "documentation": "\n    <p>The write capacity units consumed by the operation.</p>\n    <p>Each element consists of:</p>\n    <ul>\n      <li>\n        <p><i>TableName</i> - The table that consumed the provisioned throughput.</p>\n      </li>\n\n      <li>\n        <p><i>CapacityUnits</i> - The total number of capacity units consumed.</p>\n      </li>\n    </ul>\n  "
          }
        },
        "documentation": "\n    <p>Represents the output of a <i>BatchGetItem</i> operation.</p>\n  "
      },
      "errors": [
        {
          "shape_name": "ProvisionedThroughputExceededException",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>You exceeded your maximum allowed provisioned throughput.</p>\n  "
            }
          },
          "documentation": "\n    <p>The request rate is too high, or the request is too large, for the available throughput to\n      accommodate. The AWS SDKs automatically retry requests that receive this exception;\n      therefore, your request will eventually succeed, unless the request is too large or your retry\n      queue is too large to finish. Reduce the frequency of requests by using the strategies listed in\n        <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#APIRetries\">Error Retries and Exponential Backoff</a> in the Amazon DynamoDB Developer Guide.</p>\n  "
        },
        {
          "shape_name": "ResourceNotFoundException",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>The resource which is being requested does not exist.</p>\n  "
            }
          },
          "documentation": "\n    <p>The operation tried to access a nonexistent table or index. The resource may not be specified correctly, or its status may not be <code>ACTIVE</code>.</p>\n  "
        },
        {
          "shape_name": "InternalServerError",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>The server encountered an internal error trying to fulfill the request.</p>\n  "
            }
          },
          "documentation": "\n    <p>An error occurred on the server side.</p>\n  "
        }
      ],
      "documentation": "\n    <p>The \n      <i>BatchGetItem</i> operation returns the attributes of one or more items from one or more tables. You identify requested items by primary key.</p>\n    <p>A single operation can retrieve up to 1 MB of data, which can comprise as many as 100 items.\n        <i>BatchGetItem</i> will return a partial result if the response size limit is exceeded, the\n      table's provisioned throughput is exceeded, or an internal processing failure occurs. If a\n      partial result is returned, the operation returns a value for <i>UnprocessedKeys</i>. You can\n      use this value to retry the operation starting with the next item to get.</p>\n    <p>For example, if you ask to retrieve 100 items, but each individual item is 50 KB in size, the\n      system returns 20 items (1 MB) and an appropriate <i>UnprocessedKeys</i> value so you can get the\n      next page of results. If desired, your application can include its own logic to assemble the\n      pages of results into one dataset.</p>\n    <p>If no items can be processed because of insufficient provisioned throughput on each of the\n      tables involved in the request, <i>BatchGetItem</i> throws <i>ProvisionedThroughputExceededException</i>. </p>\n      <p>By default, <i>BatchGetItem</i> performs eventually consistent reads on every table in the\n        request. If you want strongly consistent reads instead, you can set <i>ConsistentRead</i> to <code>true</code> for any or all tables.</p>\n      <p>In order to minimize response latency, <i>BatchGetItem</i> fetches items in parallel.</p>\n      <p>When designing your application, keep in mind that Amazon DynamoDB does not return attributes in any particular order. To help parse the response by item, include the primary key values for the items in your request in the\n          <i>AttributesToGet</i> parameter.</p>\n      <p>If a requested item does not exist, it is not returned in the result. Requests for nonexistent items consume the minimum read capacity units according to the\n        type of read. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithDDTables.html#CapacityUnitCalculations\">Capacity Units Calculations</a> in the Amazon DynamoDB Developer Guide.</p>\n\n    <examples>\n      <example>\n        <name>Retrieve Items From Multiple Tables</name>\n        <description>The following sample requests attributes from two different\n          tables.</description>\n        <request><![CDATA[\nPOST / HTTP/1.1\nHost: dynamodb.<region>.<domain>;\nX-Amz-Date: <Date>\nAuthorization: AWS4-HMAC-SHA256 Credential=<Credential>, SignedHeaders=content-length;content-type;host;user-agent;x-amz-content-sha256;x-amz-date;x-amz-target, Signature=<Signature>\nUser-Agent: <UserAgentString>\nx-amz-content-sha256: <PayloadHash>\nContent-Type: application/x-amz-json-1.0\nContent-Length: <PayloadSizeBytes>     \nConnection: Keep-Alive]]>\nX-Amz-Target: DynamoDB_20120810.BatchGetItem \n\n{\n    \"RequestItems\": {\n        \"Forum\": {\n            \"Keys\": [\n                {\n                    \"Name\":{\"S\":\"Amazon DynamoDB\"}\n                },\n                {\n                    \"Name\":{\"S\":\"Amazon RDS\"}\n                },\n                {\n                    \"Name\":{\"S\":\"Amazon Redshift\"}\n                }\n            ],\n            \"AttributesToGet\": [\n                \"Name\",\"Threads\",\"Messages\",\"Views\"\n            ]\n        },\n        \"Thread\": {\n            \"Keys\": [\n                {\n                    \"ForumName\":{\"S\":\"Amazon DynamoDB\"}\n                },\n                {\n                    \"Subject\":{\"S\":\"Concurrent reads\"}\n                }\n            ],\n            \"AttributesToGet\": [\n                \"Tags\",\"Message\"\n            ]\n        }\n    },\n    \"ReturnConsumedCapacity\": \"TOTAL\"\n}\n        </request>\n        <response><![CDATA[\nHTTP/1.1 200 OK\nx-amzn-RequestId: <RequestId> \nx-amz-crc32: <Checksum>\nContent-Type: application/x-amz-json-1.0\nContent-Length: <PayloadSizeBytes>\nDate: <Date>\n]]>\n{\n    \"Responses\": {\n        \"Forum\": [\n            {\n                \"Name\":{\n                    \"S\":\"Amazon DynamoDB\"\n                },\n                \"Threads\":{\n                    \"N\":\"5\"\n                },\n                \"Messages\":{\n                    \"N\":\"19\"\n                },\n                \"Views\":{\n                    \"N\":\"35\"\n                }\n            },\n            {\n                \"Name\":{\n                    \"S\":\"Amazon RDS\"\n                },\n                \"Threads\":{\n                    \"N\":\"8\"\n                },\n                \"Messages\":{\n                    \"N\":\"32\"\n                },\n                \"Views\":{\n                    \"N\":\"38\"\n                }\n            },\n            {\n                \"Name\":{\n                    \"S\":\"Amazon Redshift\"\n                },\n                \"Threads\":{\n                    \"N\":\"12\"\n                },\n                \"Messages\":{\n                    \"N\":\"55\"\n                },\n                \"Views\":{\n                    \"N\":\"47\"\n                }\n            }\n        ]\n        \"Thread\": [\n            {\n                \"Tags\":{\n                    \"SS\":[\"Reads\",\"MultipleUsers\"]\n                },\n                \"Message\":{\n                    \"S\":\"How many users can read a single data item at a time? Are there any limits?\"\n                }\n            }\n        ]\n    },\n    \"UnprocessedKeys\": {\n    },\n    \"ConsumedCapacity\": [\n        {\n            \"TableName\": \"Forum\",\n            \"CapacityUnits\": 3\n        },\n        {\n            \"TableName\": \"Thread\",\n            \"CapacityUnits\": 1\n        }\n    ]\n}\n        </response>\n      </example>\n    </examples>\n  "
    },
    "BatchWriteItem": {
      "name": "BatchWriteItem",
      "input": {
        "shape_name": "BatchWriteItemInput",
        "type": "structure",
        "members": {
          "RequestItems": {
            "shape_name": "BatchWriteItemRequestMap",
            "type": "map",
            "keys": {
              "shape_name": "TableName",
              "type": "string",
              "min_length": 3,
              "max_length": 255,
              "pattern": "[a-zA-Z0-9_.-]+",
              "documentation": null
            },
            "members": {
              "shape_name": "WriteRequests",
              "type": "list",
              "members": {
                "shape_name": "WriteRequest",
                "type": "structure",
                "members": {
                  "PutRequest": {
                    "shape_name": "PutRequest",
                    "type": "structure",
                    "members": {
                      "Item": {
                        "shape_name": "PutItemInputAttributeMap",
                        "type": "map",
                        "keys": {
                          "shape_name": "AttributeName",
                          "type": "string",
                          "documentation": null
                        },
                        "members": {
                          "shape_name": "AttributeValue",
                          "type": "structure",
                          "members": {
                            "S": {
                              "shape_name": "StringAttributeValue",
                              "type": "string",
                              "documentation": "\n    <p>A String data type</p>\n  "
                            },
                            "N": {
                              "shape_name": "NumberAttributeValue",
                              "type": "string",
                              "documentation": "\n    <p>A Number data type</p>\n  "
                            },
                            "B": {
                              "shape_name": "BinaryAttributeValue",
                              "type": "blob",
                              "documentation": "\n    <p>A Binary data type</p>\n  "
                            },
                            "SS": {
                              "shape_name": "StringSetAttributeValue",
                              "type": "list",
                              "members": {
                                "shape_name": "StringAttributeValue",
                                "type": "string",
                                "documentation": null
                              },
                              "documentation": "\n    <p>A String set data type</p>\n  "
                            },
                            "NS": {
                              "shape_name": "NumberSetAttributeValue",
                              "type": "list",
                              "members": {
                                "shape_name": "NumberAttributeValue",
                                "type": "string",
                                "documentation": null
                              },
                              "documentation": "\n    <p> Number set data type</p>\n  "
                            },
                            "BS": {
                              "shape_name": "BinarySetAttributeValue",
                              "type": "list",
                              "members": {
                                "shape_name": "BinaryAttributeValue",
                                "type": "blob",
                                "documentation": null
                              },
                              "documentation": "\n    <p>A Binary set data type</p>\n  "
                            }
                          },
                          "documentation": "\n    <p>Represents the data for an attribute. You can set one, and only one, of the elements.</p>\n  "
                        },
                        "documentation": "\n    <p>A map of attribute name to attribute values, representing the primary key of an item to be\n      processed by <i>PutItem</i>. All of the table's primary key attributes must be specified, and\n      their data types must match those of the table's key schema. If any attributes are present in\n      the item which are part of an index key schema for the table, their types must match the index\n      key schema.</p>\n  ",
                        "required": true
                      }
                    },
                    "documentation": "\n    <p>A request to perform a <i>PutItem</i> operation.</p>\n  "
                  },
                  "DeleteRequest": {
                    "shape_name": "DeleteRequest",
                    "type": "structure",
                    "members": {
                      "Key": {
                        "shape_name": "Key",
                        "type": "map",
                        "keys": {
                          "shape_name": "AttributeName",
                          "type": "string",
                          "documentation": null
                        },
                        "members": {
                          "shape_name": "AttributeValue",
                          "type": "structure",
                          "members": {
                            "S": {
                              "shape_name": "StringAttributeValue",
                              "type": "string",
                              "documentation": "\n    <p>A String data type</p>\n  "
                            },
                            "N": {
                              "shape_name": "NumberAttributeValue",
                              "type": "string",
                              "documentation": "\n    <p>A Number data type</p>\n  "
                            },
                            "B": {
                              "shape_name": "BinaryAttributeValue",
                              "type": "blob",
                              "documentation": "\n    <p>A Binary data type</p>\n  "
                            },
                            "SS": {
                              "shape_name": "StringSetAttributeValue",
                              "type": "list",
                              "members": {
                                "shape_name": "StringAttributeValue",
                                "type": "string",
                                "documentation": null
                              },
                              "documentation": "\n    <p>A String set data type</p>\n  "
                            },
                            "NS": {
                              "shape_name": "NumberSetAttributeValue",
                              "type": "list",
                              "members": {
                                "shape_name": "NumberAttributeValue",
                                "type": "string",
                                "documentation": null
                              },
                              "documentation": "\n    <p> Number set data type</p>\n  "
                            },
                            "BS": {
                              "shape_name": "BinarySetAttributeValue",
                              "type": "list",
                              "members": {
                                "shape_name": "BinaryAttributeValue",
                                "type": "blob",
                                "documentation": null
                              },
                              "documentation": "\n    <p>A Binary set data type</p>\n  "
                            }
                          },
                          "documentation": "\n    <p>Represents the data for an attribute. You can set one, and only one, of the elements.</p>\n  "
                        },
                        "documentation": "\n    <p>A map of attribute name to attribute values, representing the primary key of the item to delete. All of the table's primary key attributes must be specified, and their data types must match those of the table's key schema.</p>\n  ",
                        "required": true
                      }
                    },
                    "documentation": "\n    <p>A request to perform a <i>DeleteItem</i> operation.</p>\n  "
                  }
                },
                "documentation": "\n    <p>Represents an operation to perform - either <i>DeleteItem</i> or <i>PutItem</i>.  You can only specify one of these operations, not both, in a single <i>WriteRequest</i>.  If you do need to perform both of these operations, you will need to specify two separate <i>WriteRequest</i> objects.</p>\n  "
              },
              "min_length": 1,
              "max_length": 25,
              "documentation": null
            },
            "min_length": 1,
            "max_length": 25,
            "documentation": "\n    <p>A map of one or more table names and, for each table, a list of operations to be performed\n        (<i>DeleteRequest</i> or <i>PutRequest</i>). Each element in the map consists of the following:</p>\n    <ul>\n      <li>\n        <p><i>DeleteRequest</i> - Perform a <i>DeleteItem</i> operation on the specified item.\n          The item to be deleted is identified by a <i>Key</i> subelement:</p>\n        <ul>\n          <li>\n            <p><i>Key</i> - A map of primary key attribute values that uniquely identify the\n              item. Each entry in this map consists of an attribute name and an attribute value.</p>\n          </li>\n        </ul>\n      </li>\n      <li>\n        <p><i>PutRequest</i> - Perform a <i>PutItem</i> operation on the specified item. The\n          item to be put is identified by an <i>Item</i> subelement:</p>\n        <ul>\n          <li>\n            <p><i>Item</i> - A map of attributes and their values. Each entry in this map consists\n              of an attribute name and an attribute value. Attribute values must not be null; string\n              and binary type attributes must have lengths greater than zero; and set type\n              attributes must not be empty. Requests that contain empty values will be rejected with a\n                <i>ValidationException</i>.</p>            \n            <p>If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.</p>\n</li>\n        </ul>\n      </li>\n    </ul>\n  ",
            "required": true
          },
          "ReturnConsumedCapacity": {
            "shape_name": "ReturnConsumedCapacity",
            "type": "string",
            "enum": [
              "INDEXES",
              "TOTAL",
              "NONE"
            ],
            "documentation": "\n    <p>If set to <code>TOTAL</code>, the response includes <i>ConsumedCapacity</i> data for tables and indexes. If set to <code>INDEXES</code>, the repsonse includes <i>ConsumedCapacity</i> for indexes. If set to <code>NONE</code> (the default), <i>ConsumedCapacity</i> is not included in the response.</p>\n  "
          },
          "ReturnItemCollectionMetrics": {
            "shape_name": "ReturnItemCollectionMetrics",
            "type": "string",
            "enum": [
              "SIZE",
              "NONE"
            ],
            "documentation": "\n        <p>If set to <code>SIZE</code>, statistics about item collections, if any, that were modified during\n      the operation are returned in the response. If set to <code>NONE</code> (the default), no statistics are returned.</p>\n "
          }
        },
        "documentation": "\n    <p>Represents the input of a <i>BatchWriteItem</i> operation.</p>\n  "
      },
      "output": {
        "shape_name": "BatchWriteItemOutput",
        "type": "structure",
        "members": {
          "UnprocessedItems": {
            "shape_name": "BatchWriteItemRequestMap",
            "type": "map",
            "keys": {
              "shape_name": "TableName",
              "type": "string",
              "min_length": 3,
              "max_length": 255,
              "pattern": "[a-zA-Z0-9_.-]+",
              "documentation": null
            },
            "members": {
              "shape_name": "WriteRequests",
              "type": "list",
              "members": {
                "shape_name": "WriteRequest",
                "type": "structure",
                "members": {
                  "PutRequest": {
                    "shape_name": "PutRequest",
                    "type": "structure",
                    "members": {
                      "Item": {
                        "shape_name": "PutItemInputAttributeMap",
                        "type": "map",
                        "keys": {
                          "shape_name": "AttributeName",
                          "type": "string",
                          "documentation": null
                        },
                        "members": {
                          "shape_name": "AttributeValue",
                          "type": "structure",
                          "members": {
                            "S": {
                              "shape_name": "StringAttributeValue",
                              "type": "string",
                              "documentation": "\n    <p>A String data type</p>\n  "
                            },
                            "N": {
                              "shape_name": "NumberAttributeValue",
                              "type": "string",
                              "documentation": "\n    <p>A Number data type</p>\n  "
                            },
                            "B": {
                              "shape_name": "BinaryAttributeValue",
                              "type": "blob",
                              "documentation": "\n    <p>A Binary data type</p>\n  "
                            },
                            "SS": {
                              "shape_name": "StringSetAttributeValue",
                              "type": "list",
                              "members": {
                                "shape_name": "StringAttributeValue",
                                "type": "string",
                                "documentation": null
                              },
                              "documentation": "\n    <p>A String set data type</p>\n  "
                            },
                            "NS": {
                              "shape_name": "NumberSetAttributeValue",
                              "type": "list",
                              "members": {
                                "shape_name": "NumberAttributeValue",
                                "type": "string",
                                "documentation": null
                              },
                              "documentation": "\n    <p> Number set data type</p>\n  "
                            },
                            "BS": {
                              "shape_name": "BinarySetAttributeValue",
                              "type": "list",
                              "members": {
                                "shape_name": "BinaryAttributeValue",
                                "type": "blob",
                                "documentation": null
                              },
                              "documentation": "\n    <p>A Binary set data type</p>\n  "
                            }
                          },
                          "documentation": "\n    <p>Represents the data for an attribute. You can set one, and only one, of the elements.</p>\n  "
                        },
                        "documentation": "\n    <p>A map of attribute name to attribute values, representing the primary key of an item to be\n      processed by <i>PutItem</i>. All of the table's primary key attributes must be specified, and\n      their data types must match those of the table's key schema. If any attributes are present in\n      the item which are part of an index key schema for the table, their types must match the index\n      key schema.</p>\n  ",
                        "required": true
                      }
                    },
                    "documentation": "\n    <p>A request to perform a <i>PutItem</i> operation.</p>\n  "
                  },
                  "DeleteRequest": {
                    "shape_name": "DeleteRequest",
                    "type": "structure",
                    "members": {
                      "Key": {
                        "shape_name": "Key",
                        "type": "map",
                        "keys": {
                          "shape_name": "AttributeName",
                          "type": "string",
                          "documentation": null
                        },
                        "members": {
                          "shape_name": "AttributeValue",
                          "type": "structure",
                          "members": {
                            "S": {
                              "shape_name": "StringAttributeValue",
                              "type": "string",
                              "documentation": "\n    <p>A String data type</p>\n  "
                            },
                            "N": {
                              "shape_name": "NumberAttributeValue",
                              "type": "string",
                              "documentation": "\n    <p>A Number data type</p>\n  "
                            },
                            "B": {
                              "shape_name": "BinaryAttributeValue",
                              "type": "blob",
                              "documentation": "\n    <p>A Binary data type</p>\n  "
                            },
                            "SS": {
                              "shape_name": "StringSetAttributeValue",
                              "type": "list",
                              "members": {
                                "shape_name": "StringAttributeValue",
                                "type": "string",
                                "documentation": null
                              },
                              "documentation": "\n    <p>A String set data type</p>\n  "
                            },
                            "NS": {
                              "shape_name": "NumberSetAttributeValue",
                              "type": "list",
                              "members": {
                                "shape_name": "NumberAttributeValue",
                                "type": "string",
                                "documentation": null
                              },
                              "documentation": "\n    <p> Number set data type</p>\n  "
                            },
                            "BS": {
                              "shape_name": "BinarySetAttributeValue",
                              "type": "list",
                              "members": {
                                "shape_name": "BinaryAttributeValue",
                                "type": "blob",
                                "documentation": null
                              },
                              "documentation": "\n    <p>A Binary set data type</p>\n  "
                            }
                          },
                          "documentation": "\n    <p>Represents the data for an attribute. You can set one, and only one, of the elements.</p>\n  "
                        },
                        "documentation": "\n    <p>A map of attribute name to attribute values, representing the primary key of the item to delete. All of the table's primary key attributes must be specified, and their data types must match those of the table's key schema.</p>\n  ",
                        "required": true
                      }
                    },
                    "documentation": "\n    <p>A request to perform a <i>DeleteItem</i> operation.</p>\n  "
                  }
                },
                "documentation": "\n    <p>Represents an operation to perform - either <i>DeleteItem</i> or <i>PutItem</i>.  You can only specify one of these operations, not both, in a single <i>WriteRequest</i>.  If you do need to perform both of these operations, you will need to specify two separate <i>WriteRequest</i> objects.</p>\n  "
              },
              "min_length": 1,
              "max_length": 25,
              "documentation": null
            },
            "min_length": 1,
            "max_length": 25,
            "documentation": "\n    <p>A map of tables and requests against those tables that were not processed. The\n        <i>UnprocessedKeys</i> value is in the same form as <i>RequestItems</i>, so you can provide\n      this value directly to a subsequent <i>BatchGetItem</i> operation. For more information, see\n        <i>RequestItems</i> in the Request Parameters section.</p>\n    <p>Each <i>UnprocessedItems</i> entry consists of a table name and, for that table, a list of\n      operations to perform (<i>DeleteRequest</i> or <i>PutRequest</i>).</p>\n    <ul>\n      <li>\n        <p><i>DeleteRequest</i> - Perform a <i>DeleteItem</i> operation on the specified item.\n          The item to be deleted is identified by a <i>Key</i> subelement:</p>\n        <ul>\n          <li>\n            <p><i>Key</i> - A map of primary key attribute values that uniquely identify the\n              item. Each entry in this map consists of an attribute name and an attribute value.</p>\n          </li>\n        </ul>\n      </li>\n      <li>\n        <p><i>PutRequest</i> - Perform a <i>PutItem</i> operation on the specified item. The\n          item to be put is identified by an <i>Item</i> subelement:</p>\n        <ul>\n          <li>\n            <p><i>Item</i> - A map of attributes and their values. Each entry in this map consists\n              of an attribute name and an attribute value. Attribute values must not be null; string\n              and binary type attributes must have lengths greater than zero; and set type\n              attributes must not be empty. Requests that contain empty values will be rejected with a\n              <i>ValidationException</i>.</p>            \n            <p>If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.</p>\n</li>\n        </ul>\n      </li>\n    </ul>\n  "
          },
          "ItemCollectionMetrics": {
            "shape_name": "ItemCollectionMetricsPerTable",
            "type": "map",
            "keys": {
              "shape_name": "TableName",
              "type": "string",
              "min_length": 3,
              "max_length": 255,
              "pattern": "[a-zA-Z0-9_.-]+",
              "documentation": null
            },
            "members": {
              "shape_name": "ItemCollectionMetricsMultiple",
              "type": "list",
              "members": {
                "shape_name": "ItemCollectionMetrics",
                "type": "structure",
                "members": {
                  "ItemCollectionKey": {
                    "shape_name": "ItemCollectionKeyAttributeMap",
                    "type": "map",
                    "keys": {
                      "shape_name": "AttributeName",
                      "type": "string",
                      "documentation": null
                    },
                    "members": {
                      "shape_name": "AttributeValue",
                      "type": "structure",
                      "members": {
                        "S": {
                          "shape_name": "StringAttributeValue",
                          "type": "string",
                          "documentation": "\n    <p>A String data type</p>\n  "
                        },
                        "N": {
                          "shape_name": "NumberAttributeValue",
                          "type": "string",
                          "documentation": "\n    <p>A Number data type</p>\n  "
                        },
                        "B": {
                          "shape_name": "BinaryAttributeValue",
                          "type": "blob",
                          "documentation": "\n    <p>A Binary data type</p>\n  "
                        },
                        "SS": {
                          "shape_name": "StringSetAttributeValue",
                          "type": "list",
                          "members": {
                            "shape_name": "StringAttributeValue",
                            "type": "string",
                            "documentation": null
                          },
                          "documentation": "\n    <p>A String set data type</p>\n  "
                        },
                        "NS": {
                          "shape_name": "NumberSetAttributeValue",
                          "type": "list",
                          "members": {
                            "shape_name": "NumberAttributeValue",
                            "type": "string",
                            "documentation": null
                          },
                          "documentation": "\n    <p> Number set data type</p>\n  "
                        },
                        "BS": {
                          "shape_name": "BinarySetAttributeValue",
                          "type": "list",
                          "members": {
                            "shape_name": "BinaryAttributeValue",
                            "type": "blob",
                            "documentation": null
                          },
                          "documentation": "\n    <p>A Binary set data type</p>\n  "
                        }
                      },
                      "documentation": "\n    <p>Represents the data for an attribute. You can set one, and only one, of the elements.</p>\n  "
                    },
                    "documentation": "\n    <p>The hash key value of the item collection. This is the same as the hash key of the item.</p>  \n   "
                  },
                  "SizeEstimateRangeGB": {
                    "shape_name": "ItemCollectionSizeEstimateRange",
                    "type": "list",
                    "members": {
                      "shape_name": "ItemCollectionSizeEstimateBound",
                      "type": "double",
                      "documentation": null
                    },
                    "documentation": "\n    <p>An estimate of item collection size, measured in gigabytes. This is a\n      two-element array containing a lower bound and an upper bound for the estimate. The estimate\n      includes the size of all the items in the table, plus the size of all attributes projected\n      into all of the local secondary indexes on that table. Use this estimate to measure whether a\n      local secondary index is approaching its size limit.</p>\n    <p>The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.</p>\n  "
                  }
                },
                "documentation": "\n    <p>Information about item collections, if any, that were affected by the operation. <i>ItemCollectionMetrics</i> is only returned if it was asked for in the request. If the\n      table does not have any local secondary indexes, this information is not returned in the\n      response.</p>\n  "
              },
              "documentation": null
            },
            "documentation": "\n    <p>A list of tables that were processed by <i>BatchWriteItem</i> and, for each table,\n      information about any item collections that were affected by individual <i>DeleteItem</i> or\n        <i>PutItem</i> operations.</p>\n    <p>Each entry consists of the following subelements:</p>\n    <ul>\n      <li>\n        <p><i>ItemCollectionKey</i> - The hash key value of the item collection. This is the same as the hash key of the item.</p>\n      </li>\n      <li>\n        <p><i>SizeEstimateRange</i> - An estimate of item collection size, expressed in\n          GB. This is a two-element array containing a lower bound and an upper bound for\n          the estimate. The estimate includes the size of all the items in the table, plus the size\n          of all attributes projected into all of the local secondary indexes on the table. Use this\n          estimate to measure whether a local secondary index is approaching its size limit.</p>\n        <p>The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.</p>\n      </li>\n    </ul>\n  "
          },
          "ConsumedCapacity": {
            "shape_name": "ConsumedCapacityMultiple",
            "type": "list",
            "members": {
              "shape_name": "ConsumedCapacity",
              "type": "structure",
              "members": {
                "TableName": {
                  "shape_name": "TableName",
                  "type": "string",
                  "min_length": 3,
                  "max_length": 255,
                  "pattern": "[a-zA-Z0-9_.-]+",
                  "documentation": "\n    <p>The name of the table that was affected by the operation.</p>\n  "
                },
                "CapacityUnits": {
                  "shape_name": "ConsumedCapacityUnits",
                  "type": "double",
                  "documentation": "\n    <p>The total number of capacity units consumed by the operation.</p>\n  "
                },
                "Table": {
                  "shape_name": "Capacity",
                  "type": "structure",
                  "members": {
                    "CapacityUnits": {
                      "shape_name": "ConsumedCapacityUnits",
                      "type": "double",
                      "documentation": "\n    <p>The total number of capacity units consumed on a table or an index.</p>\n  "
                    }
                  },
                  "documentation": "\n    <p>The amount of throughput consumed on the table affected by the operation.</p>\n  "
                },
                "LocalSecondaryIndexes": {
                  "shape_name": "SecondaryIndexesCapacityMap",
                  "type": "map",
                  "keys": {
                    "shape_name": "IndexName",
                    "type": "string",
                    "min_length": 3,
                    "max_length": 255,
                    "pattern": "[a-zA-Z0-9_.-]+",
                    "documentation": null
                  },
                  "members": {
                    "shape_name": "Capacity",
                    "type": "structure",
                    "members": {
                      "CapacityUnits": {
                        "shape_name": "ConsumedCapacityUnits",
                        "type": "double",
                        "documentation": "\n    <p>The total number of capacity units consumed on a table or an index.</p>\n  "
                      }
                    },
                    "documentation": "\n    <p>Represents the amount of provisioned throughput capacity consumed on a table or an index. </p>\n  "
                  },
                  "documentation": "\n    <p>The amount of throughput consumed on each local index affected by the operation.</p>\n  "
                },
                "GlobalSecondaryIndexes": {
                  "shape_name": "SecondaryIndexesCapacityMap",
                  "type": "map",
                  "keys": {
                    "shape_name": "IndexName",
                    "type": "string",
                    "min_length": 3,
                    "max_length": 255,
                    "pattern": "[a-zA-Z0-9_.-]+",
                    "documentation": null
                  },
                  "members": {
                    "shape_name": "Capacity",
                    "type": "structure",
                    "members": {
                      "CapacityUnits": {
                        "shape_name": "ConsumedCapacityUnits",
                        "type": "double",
                        "documentation": "\n    <p>The total number of capacity units consumed on a table or an index.</p>\n  "
                      }
                    },
                    "documentation": "\n    <p>Represents the amount of provisioned throughput capacity consumed on a table or an index. </p>\n  "
                  },
                  "documentation": "\n    <p>The amount of throughput consumed on each global index affected by the operation.</p>\n  "
                }
              },
              "documentation": "\n    <p>Represents the capacity units consumed by an operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. <i>ConsumedCapacity</i> is only returned if it was asked for in the request. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html\">Provisioned Throughput</a> in the Amazon DynamoDB Developer Guide.</p>\n  "
            },
            "documentation": "\n    <p>The capacity units consumed by the operation.</p>\n    <p>Each element consists of:</p>\n    <ul>\n      <li>\n        <p><i>TableName</i> - The table that consumed the provisioned throughput.</p>\n      </li>\n      <li>\n        <p><i>CapacityUnits</i> - The total number of capacity units consumed.</p>\n      </li>\n    </ul>\n  "
          }
        },
        "documentation": "\n    <p>Represents the output of a <i>BatchWriteItem</i> operation.</p>\n  "
      },
      "errors": [
        {
          "shape_name": "ProvisionedThroughputExceededException",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>You exceeded your maximum allowed provisioned throughput.</p>\n  "
            }
          },
          "documentation": "\n    <p>The request rate is too high, or the request is too large, for the available throughput to\n      accommodate. The AWS SDKs automatically retry requests that receive this exception;\n      therefore, your request will eventually succeed, unless the request is too large or your retry\n      queue is too large to finish. Reduce the frequency of requests by using the strategies listed in\n        <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#APIRetries\">Error Retries and Exponential Backoff</a> in the Amazon DynamoDB Developer Guide.</p>\n  "
        },
        {
          "shape_name": "ResourceNotFoundException",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>The resource which is being requested does not exist.</p>\n  "
            }
          },
          "documentation": "\n    <p>The operation tried to access a nonexistent table or index. The resource may not be specified correctly, or its status may not be <code>ACTIVE</code>.</p>\n  "
        },
        {
          "shape_name": "ItemCollectionSizeLimitExceededException",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>The total size of an item collection has exceeded the maximum limit of 10 gigabytes.</p>\n  "
            }
          },
          "documentation": "\n    <p>An item collection is too large. This exception is only returned for tables that have one or\n      more local secondary indexes.</p>\n  "
        },
        {
          "shape_name": "InternalServerError",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>The server encountered an internal error trying to fulfill the request.</p>\n  "
            }
          },
          "documentation": "\n    <p>An error occurred on the server side.</p>\n  "
        }
      ],
      "documentation": "\n    <p>The <i>BatchWriteItem</i> operation puts or deletes multiple items in one or more tables. A\n      single call to <i>BatchWriteItem</i> can write up to 1 MB of data, which can comprise as many\n      as 25 put or delete requests. Individual items to be written can be as large as 64 KB.</p>\n    <note>\n      <p><i>BatchWriteItem</i> cannot update items. To update items, use the <i>UpdateItem</i>\n        API.</p>\n    </note>\n    <p>The individual <i>PutItem</i> and <i>DeleteItem</i> operations specified in\n        <i>BatchWriteItem</i> are atomic; however <i>BatchWriteItem</i> as a whole is not. If any\n      requested operations fail because the table's provisioned throughput is exceeded or an\n      internal processing failure occurs, the failed operations are returned in the\n        <i>UnprocessedItems</i> response parameter. You can investigate and optionally resend the\n      requests. Typically, you would call <i>BatchWriteItem</i> in a loop. Each iteration would\n      check for unprocessed items and submit a new <i>BatchWriteItem</i> request with those\n      unprocessed items until all items have been processed.</p>\n    <p>To write one item, you can use the <i>PutItem</i> operation; to delete one item, you can use the <i>DeleteItem</i> operation.</p>\n    <p>With <i>BatchWriteItem</i>, you can efficiently write or delete large amounts of data, such\n      as from Amazon Elastic MapReduce (EMR), or copy data from another database into Amazon DynamoDB. In\n      order to improve performance with these large-scale operations, <i>BatchWriteItem</i> does not\n      behave in the same way as individual <i>PutItem</i> and <i>DeleteItem</i> calls would For\n      example, you cannot specify conditions on individual put and delete requests, and\n        <i>BatchWriteItem</i> does not return deleted items in the response.</p>\n    <p>If you use a programming language that supports concurrency, such as Java, you can use\n      threads to write items in parallel. Your application must include the necessary logic to manage the threads.</p>\n    <p>With languages that don't support threading, such as PHP, <i>BatchWriteItem</i> will write or\n      delete the specified items one at a time. In both situations, <i>BatchWriteItem</i> provides\n      an alternative where the API performs the specified put and delete operations in parallel,\n      giving you the power of the thread pool approach without having to introduce complexity into\n      your application.</p>\n    <p>Parallel processing reduces latency, but each specified put and delete request consumes the\n      same number of write capacity units whether it is processed in parallel or not. Delete\n      operations on nonexistent items consume one write capacity unit.</p>\n    <p>If one or more of the following is true, Amazon DynamoDB rejects the entire batch write operation:</p>\n      <ul>\n<li>\n        <p>One or more tables specified in the <i>BatchWriteItem</i> request does not\n          exist.</p>\n      </li>\n      <li>\n      <p>Primary key attributes specified on an item in the request do not match those in the\n        corresponding table's primary key schema.</p>\n      </li>\n      <li>\n        <p>You try to perform multiple operations on the same item in the same\n          <i>BatchWriteItem</i> request. For example, you cannot put and delete the same item in\n          the same <i>BatchWriteItem</i> request. </p>\n      </li>\n      <li>\n        <p>The total request size exceeds 1 MB.</p>\n      </li>\n      <li>\n        <p>Any individual item in a batch exceeds 64 KB.</p>\n      </li>\n    </ul>\n\n    <examples>\n      <example>\n        <name>Multiple Operations on One Table</name>\n        <description>This example writes several items to the Forum table. The response shows that\n          the final put operation failed, possibly because the application exceeded the provisioned\n          throughput on the table. The UnprocessedItems object shows the unsuccessful put request.\n          The application can call BatchWriteItem again to address such unprocessed\n          requests.</description>\n        <request><![CDATA[\nPOST / HTTP/1.1\nHost: dynamodb.<region>.<domain>;\nX-Amz-Date: <Date>\nAuthorization: AWS4-HMAC-SHA256 Credential=<Credential>, SignedHeaders=content-length;content-type;host;user-agent;x-amz-content-sha256;x-amz-date;x-amz-target, Signature=<Signature>\nUser-Agent: <UserAgentString>\nx-amz-content-sha256: <PayloadHash>\nContent-Type: application/x-amz-json-1.0\nContent-Length: <PayloadSizeBytes>     \nConnection: Keep-Alive]]> X-Amz-Target: DynamoDB_20120810.BatchWriteItem \n\n{\n    \"RequestItems\": {\n        \"Forum\": [\n            {\n                \"PutRequest\": {\n                    \"Item\": {\n                        \"Name\": {\n                            \"S\": \"Amazon DynamoDB\"\n                        },\n                        \"Category\": {\n                            \"S\": \"Amazon Web Services\"\n                        }\n                    }\n                }\n            },\n            {\n                \"PutRequest\": {\n                    \"Item\": {\n                        \"Name\": {\n                            \"S\": \"Amazon RDS\"\n                        },\n                        \"Category\": {\n                            \"S\": \"Amazon Web Services\"\n                        }\n                    }\n                }\n            },\n            {\n                \"PutRequest\": {\n                    \"Item\": {\n                        \"Name\": {\n                            \"S\": \"Amazon Redshift\"\n                        },\n                        \"Category\": {\n                            \"S\": \"Amazon Web Services\"\n                        }\n                    }\n                }\n            },\n            {\n                \"PutRequest\": {\n                    \"Item\": {\n                        \"Name\": {\n                            \"S\": \"Amazon ElastiCache\"\n                        },\n                        \"Category\": {\n                            \"S\": \"Amazon Web Services\"\n                        }\n                    }\n                }\n            }\n        ]\n    },\n    \"ReturnConsumedCapacity\": \"TOTAL\"\n}\n        </request>\n        <response><![CDATA[\nHTTP/1.1 200 OK\nx-amzn-RequestId: <RequestId> \nx-amz-crc32: <Checksum>\nContent-Type: application/x-amz-json-1.0\nContent-Length: <PayloadSizeBytes>\nDate: <Date>\n]]> {\n    \"UnprocessedItems\": {\n        \"Forum\": [\n            {\n                \"PutRequest\": {\n                    \"Item\": {\n                        \"Name\": {\n                            \"S\": \"Amazon ElastiCache\"\n                        },\n                        \"Category\": {\n                            \"S\": \"Amazon Web Services\"\n                        }\n                    }\n                }\n            }\n        ]\n    },\n    \"ConsumedCapacity\": [\n        {\n            \"TableName\": \"Forum\",\n            \"CapacityUnits\": 3\n        }\n    ]\n}\n        </response>\n      </example>\n    </examples>\n  "
    },
    "CreateTable": {
      "name": "CreateTable",
      "input": {
        "shape_name": "CreateTableInput",
        "type": "structure",
        "members": {
          "AttributeDefinitions": {
            "shape_name": "AttributeDefinitions",
            "type": "list",
            "members": {
              "shape_name": "AttributeDefinition",
              "type": "structure",
              "members": {
                "AttributeName": {
                  "shape_name": "KeySchemaAttributeName",
                  "type": "string",
                  "min_length": 1,
                  "max_length": 255,
                  "documentation": "\n    <p>A name for the attribute.</p>\n  ",
                  "required": true
                },
                "AttributeType": {
                  "shape_name": "ScalarAttributeType",
                  "type": "string",
                  "enum": [
                    "S",
                    "N",
                    "B"
                  ],
                  "documentation": "\n    <p>The data type for the attribute.</p>\n  ",
                  "required": true
                }
              },
              "documentation": "\n    <p>Represents an attribute for describing the key schema for the table and indexes.</p>\n  "
            },
            "documentation": "\n    <p>An array of attributes that describe the key schema for the table and indexes.</p>\n  ",
            "required": true
          },
          "TableName": {
            "shape_name": "TableName",
            "type": "string",
            "min_length": 3,
            "max_length": 255,
            "pattern": "[a-zA-Z0-9_.-]+",
            "documentation": "\n    <p>The name of the table to create.</p>\n  ",
            "required": true
          },
          "KeySchema": {
            "shape_name": "KeySchema",
            "type": "list",
            "members": {
              "shape_name": "KeySchemaElement",
              "type": "structure",
              "members": {
                "AttributeName": {
                  "shape_name": "KeySchemaAttributeName",
                  "type": "string",
                  "min_length": 1,
                  "max_length": 255,
                  "documentation": "\n    <p>The name of a key attribute.</p>\n  ",
                  "required": true
                },
                "KeyType": {
                  "shape_name": "KeyType",
                  "type": "string",
                  "enum": [
                    "HASH",
                    "RANGE"
                  ],
                  "documentation": "\n    <p>The attribute data, consisting of the data type and the attribute value\n      itself.</p>\n  ",
                  "required": true
                }
              },
              "documentation": "\n    <p>Represents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or\n      the key attributes of an index.</p>\n  "
            },
            "min_length": 1,
            "max_length": 2,
            "documentation": "\n    <p>Specifies the attributes that make up the primary key for a table or an index. The attributes in\n        <i>KeySchema</i> must also be defined in the <i>AttributeDefinitions</i> array. For more\n      information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html\">Data\n        Model</a> in the Amazon DynamoDB Developer Guide.</p>\n    <p>Each <i>KeySchemaElement</i> in the array is composed of:</p>\n    <ul>\n      <li>\n        <p><i>AttributeName</i> - The name of this key attribute.</p>\n      </li>\n      <li>\n        <p><i>KeyType</i> - Determines whether the key attribute is <code>HASH</code> or\n            <code>RANGE</code>.</p>\n      </li>\n    </ul>\n    <p>For a primary key that consists of a hash attribute, you must specify exactly one element with a <i>KeyType</i> of <code>HASH</code>.</p>\n<p>For a primary key that consists of hash and range attributes, you must specify exactly two elements, in this order:  The first element must have a <i>KeyType</i> of <code>HASH</code>, and the second element must have a <i>KeyType</i> of <code>RANGE</code>.</p> \n    <p>For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithDDTables.html#WorkingWithDDTables.primary.key\">Specifying the Primary Key</a> in the Amazon DynamoDB Developer Guide.</p>\n  ",
            "required": true
          },
          "LocalSecondaryIndexes": {
            "shape_name": "LocalSecondaryIndexList",
            "type": "list",
            "members": {
              "shape_name": "LocalSecondaryIndex",
              "type": "structure",
              "members": {
                "IndexName": {
                  "shape_name": "IndexName",
                  "type": "string",
                  "min_length": 3,
                  "max_length": 255,
                  "pattern": "[a-zA-Z0-9_.-]+",
                  "documentation": "\n    <p>The name of the local secondary index. The name must be unique among all other indexes\n      on this table.</p>\n  ",
                  "required": true
                },
                "KeySchema": {
                  "shape_name": "KeySchema",
                  "type": "list",
                  "members": {
                    "shape_name": "KeySchemaElement",
                    "type": "structure",
                    "members": {
                      "AttributeName": {
                        "shape_name": "KeySchemaAttributeName",
                        "type": "string",
                        "min_length": 1,
                        "max_length": 255,
                        "documentation": "\n    <p>The name of a key attribute.</p>\n  ",
                        "required": true
                      },
                      "KeyType": {
                        "shape_name": "KeyType",
                        "type": "string",
                        "enum": [
                          "HASH",
                          "RANGE"
                        ],
                        "documentation": "\n    <p>The attribute data, consisting of the data type and the attribute value\n      itself.</p>\n  ",
                        "required": true
                      }
                    },
                    "documentation": "\n    <p>Represents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or\n      the key attributes of an index.</p>\n  "
                  },
                  "min_length": 1,
                  "max_length": 2,
                  "documentation": "\n    <p>The complete key schema for the local secondary index, consisting of one or more pairs of attribute names and key types\n      (<code>HASH</code> or <code>RANGE</code>).</p>",
                  "required": true
                },
                "Projection": {
                  "shape_name": "Projection",
                  "type": "structure",
                  "members": {
                    "ProjectionType": {
                      "shape_name": "ProjectionType",
                      "type": "string",
                      "enum": [
                        "ALL",
                        "KEYS_ONLY",
                        "INCLUDE"
                      ],
                      "documentation": "\n    <p>The set of attributes that are projected into the index:</p>\n    <ul>\n      <li>\n        <p><code>KEYS_ONLY</code> - Only the index and primary keys are projected into the\n          index.</p>\n      </li>\n      <li>\n        <p><code>INCLUDE</code> - Only the specified table attributes are projected into the\n          index. The list of projected attributes are\n          in <i>NonKeyAttributes</i>.</p>\n      </li>\n      <li>\n        <p><code>ALL</code> - All of the table attributes are projected into the\n          index.</p>\n      </li>\n    </ul>\n  "
                    },
                    "NonKeyAttributes": {
                      "shape_name": "NonKeyAttributeNameList",
                      "type": "list",
                      "members": {
                        "shape_name": "NonKeyAttributeName",
                        "type": "string",
                        "min_length": 1,
                        "max_length": 255,
                        "documentation": null
                      },
                      "min_length": 1,
                      "max_length": 20,
                      "documentation": "\n    <p>Represents the non-key attribute names which will be projected into the index.</p>\n    <p>For local secondary indexes, the total count of <i>NonKeyAttributes</i> summed across all of the local secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.</p>\n  "
                    }
                  },
                  "documentation": "\n    <p>Represents attributes that are copied (projected) from the table into an index. These are in\n      addition to the primary key attributes and index key attributes, which are automatically\n      projected.</p>\n  ",
                  "required": true
                }
              },
              "documentation": "\n    <p>Represents a local secondary index.</p>\n  "
            },
            "documentation": "\n    <p>One or more local secondary indexes (the maximum is five) to be created on the table. Each index is scoped to a given\n      hash key value. There is a 10 gigabyte size limit per hash key; otherwise, the size of a local secondary index is unconstrained.</p>\n    <p>Each local secondary index in the array includes the following:</p>\n    <ul>\n      <li>\n        <p><i>IndexName</i> - The name of the local secondary index. Must be unique only for this\n          table.</p>\n        <p></p>\n      </li>\n      <li>\n        <p><i>KeySchema</i> - Specifies the key schema for the local secondary index. The key schema must begin with the same hash key attribute as the table.</p>\n      </li>\n      <li>         <p><i>Projection</i> - Specifies\n          attributes that are copied (projected) from the table into the index. These are in\n          addition to the primary key attributes and index key\n          attributes, which are automatically projected. Each\n          attribute specification is composed of:</p>\n        <ul>\n          <li>\n            <p><i>ProjectionType</i> - One\n              of the following:</p>\n            <ul>\n              <li>\n                <p><code>KEYS_ONLY</code> - Only the index and primary keys are projected into the\n                  index.</p>\n              </li>\n              <li>\n                <p><code>INCLUDE</code> - Only the specified table attributes are projected into the\n                  index. The list of projected attributes are\n                  in <i>NonKeyAttributes</i>.</p>\n              </li>\n              <li>\n                <p><code>ALL</code> - All of the table attributes are projected into the\n                  index.</p>\n              </li>\n            </ul>\n          </li>\n          <li>\n            <p><i>NonKeyAttributes</i> - A list of one or more non-key attribute names that are \n              projected into the secondary index. The total count of attributes specified in <i>NonKeyAttributes</i>, summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.</p>\n          </li>\n        </ul>\n </li>\n    </ul>\n  "
          },
          "GlobalSecondaryIndexes": {
            "shape_name": "GlobalSecondaryIndexList",
            "type": "list",
            "members": {
              "shape_name": "GlobalSecondaryIndex",
              "type": "structure",
              "members": {
                "IndexName": {
                  "shape_name": "IndexName",
                  "type": "string",
                  "min_length": 3,
                  "max_length": 255,
                  "pattern": "[a-zA-Z0-9_.-]+",
                  "documentation": "\n    <p>The name of the global secondary index. The name must be unique among all other indexes on this table.</p>\n  ",
                  "required": true
                },
                "KeySchema": {
                  "shape_name": "KeySchema",
                  "type": "list",
                  "members": {
                    "shape_name": "KeySchemaElement",
                    "type": "structure",
                    "members": {
                      "AttributeName": {
                        "shape_name": "KeySchemaAttributeName",
                        "type": "string",
                        "min_length": 1,
                        "max_length": 255,
                        "documentation": "\n    <p>The name of a key attribute.</p>\n  ",
                        "required": true
                      },
                      "KeyType": {
                        "shape_name": "KeyType",
                        "type": "string",
                        "enum": [
                          "HASH",
                          "RANGE"
                        ],
                        "documentation": "\n    <p>The attribute data, consisting of the data type and the attribute value\n      itself.</p>\n  ",
                        "required": true
                      }
                    },
                    "documentation": "\n    <p>Represents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or\n      the key attributes of an index.</p>\n  "
                  },
                  "min_length": 1,
                  "max_length": 2,
                  "documentation": "\n    <p>The complete key schema for a global secondary index, which consists of one or more pairs of attribute\n      names and key types (<code>HASH</code> or <code>RANGE</code>).</p>\n  ",
                  "required": true
                },
                "Projection": {
                  "shape_name": "Projection",
                  "type": "structure",
                  "members": {
                    "ProjectionType": {
                      "shape_name": "ProjectionType",
                      "type": "string",
                      "enum": [
                        "ALL",
                        "KEYS_ONLY",
                        "INCLUDE"
                      ],
                      "documentation": "\n    <p>The set of attributes that are projected into the index:</p>\n    <ul>\n      <li>\n        <p><code>KEYS_ONLY</code> - Only the index and primary keys are projected into the\n          index.</p>\n      </li>\n      <li>\n        <p><code>INCLUDE</code> - Only the specified table attributes are projected into the\n          index. The list of projected attributes are\n          in <i>NonKeyAttributes</i>.</p>\n      </li>\n      <li>\n        <p><code>ALL</code> - All of the table attributes are projected into the\n          index.</p>\n      </li>\n    </ul>\n  "
                    },
                    "NonKeyAttributes": {
                      "shape_name": "NonKeyAttributeNameList",
                      "type": "list",
                      "members": {
                        "shape_name": "NonKeyAttributeName",
                        "type": "string",
                        "min_length": 1,
                        "max_length": 255,
                        "documentation": null
                      },
                      "min_length": 1,
                      "max_length": 20,
                      "documentation": "\n    <p>Represents the non-key attribute names which will be projected into the index.</p>\n    <p>For local secondary indexes, the total count of <i>NonKeyAttributes</i> summed across all of the local secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.</p>\n  "
                    }
                  },
                  "documentation": "\n    <p>Represents attributes that are copied (projected) from the table into an index. These are in\n      addition to the primary key attributes and index key attributes, which are automatically\n      projected.</p>\n  ",
                  "required": true
                },
                "ProvisionedThroughput": {
                  "shape_name": "ProvisionedThroughput",
                  "type": "structure",
                  "members": {
                    "ReadCapacityUnits": {
                      "shape_name": "PositiveLongObject",
                      "type": "long",
                      "min_length": 1,
                      "documentation": "\n    <p>The maximum number of strongly consistent reads consumed per second before Amazon DynamoDB returns a\n      <i>ThrottlingException</i>. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithDDTables.html#ProvisionedThroughput\">Specifying Read and Write Requirements</a> in the Amazon DynamoDB Developer Guide.</p>\n  ",
                      "required": true
                    },
                    "WriteCapacityUnits": {
                      "shape_name": "PositiveLongObject",
                      "type": "long",
                      "min_length": 1,
                      "documentation": "\n    <p>The maximum number of writes consumed per second before Amazon DynamoDB returns a\n      <i>ThrottlingException</i>. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithDDTables.html#ProvisionedThroughput\">Specifying Read and Write Requirements</a> in the Amazon DynamoDB Developer Guide.</p>\n  ",
                      "required": true
                    }
                  },
                  "documentation": "\n    <p>Represents the provisioned throughput settings for a specified table or index. The settings can be modified using the <i>UpdateTable</i> operation.</p>\n      <p>For current minimum and maximum provisioned throughput values, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\">Limits</a> in the Amazon DynamoDB Developer Guide.</p>\n  ",
                  "required": true
                }
              },
              "documentation": "\n    <p>Represents a global secondary index.</p>\n  "
            },
            "documentation": "\n    <p>One or more global secondary indexes (the maximum is five) to be created on the table. Each global secondary index in the array includes the following:</p>\n    <ul>\n      <li>\n        <p><i>IndexName</i> - The name of the global secondary index. Must be unique only for this table.</p>\n        <p></p>\n      </li>\n      <li>\n        <p><i>KeySchema</i> - Specifies the key schema for the global secondary index.</p>\n      </li>\n      <li>         <p><i>Projection</i> - Specifies\n          attributes that are copied (projected) from the table into the index. These are in\n          addition to the primary key attributes and index key\n          attributes, which are automatically projected. Each\n          attribute specification is composed of:</p>\n        <ul>\n          <li>\n            <p><i>ProjectionType</i> - One\n              of the following:</p>\n            <ul>\n              <li>\n                <p><code>KEYS_ONLY</code> - Only the index and primary keys are projected into the\n                  index.</p>\n              </li>\n              <li>\n                <p><code>INCLUDE</code> - Only the specified table attributes are projected into the\n                  index. The list of projected attributes are\n                  in <i>NonKeyAttributes</i>.</p>\n              </li>\n              <li>\n                <p><code>ALL</code> - All of the table attributes are projected into the\n                  index.</p>\n              </li>\n            </ul>\n          </li>\n          <li>\n            <p><i>NonKeyAttributes</i> - A list of one or more non-key attribute names that are \n              projected into the secondary index. The total count of attributes specified in <i>NonKeyAttributes</i>, summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.</p>\n          </li>\n        </ul>\n </li>\n      <li>\n        <p><i>ProvisionedThroughput</i> - The provisioned throughput settings for the global secondary index,\n          consisting of read and write capacity units.</p>\n      </li>\n    </ul>\n  "
          },
          "ProvisionedThroughput": {
            "shape_name": "ProvisionedThroughput",
            "type": "structure",
            "members": {
              "ReadCapacityUnits": {
                "shape_name": "PositiveLongObject",
                "type": "long",
                "min_length": 1,
                "documentation": "\n    <p>The maximum number of strongly consistent reads consumed per second before Amazon DynamoDB returns a\n      <i>ThrottlingException</i>. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithDDTables.html#ProvisionedThroughput\">Specifying Read and Write Requirements</a> in the Amazon DynamoDB Developer Guide.</p>\n  ",
                "required": true
              },
              "WriteCapacityUnits": {
                "shape_name": "PositiveLongObject",
                "type": "long",
                "min_length": 1,
                "documentation": "\n    <p>The maximum number of writes consumed per second before Amazon DynamoDB returns a\n      <i>ThrottlingException</i>. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithDDTables.html#ProvisionedThroughput\">Specifying Read and Write Requirements</a> in the Amazon DynamoDB Developer Guide.</p>\n  ",
                "required": true
              }
            },
            "documentation": "\n    <p>Represents the provisioned throughput settings for a specified table or index. The settings can be modified using the <i>UpdateTable</i> operation.</p>\n      <p>For current minimum and maximum provisioned throughput values, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\">Limits</a> in the Amazon DynamoDB Developer Guide.</p>\n  ",
            "required": true
          }
        },
        "documentation": "\n    <p>Represents the input of a <i>CreateTable</i> operation.</p>\n  "
      },
      "output": {
        "shape_name": "CreateTableOutput",
        "type": "structure",
        "members": {
          "TableDescription": {
            "shape_name": "TableDescription",
            "type": "structure",
            "members": {
              "AttributeDefinitions": {
                "shape_name": "AttributeDefinitions",
                "type": "list",
                "members": {
                  "shape_name": "AttributeDefinition",
                  "type": "structure",
                  "members": {
                    "AttributeName": {
                      "shape_name": "KeySchemaAttributeName",
                      "type": "string",
                      "min_length": 1,
                      "max_length": 255,
                      "documentation": "\n    <p>A name for the attribute.</p>\n  ",
                      "required": true
                    },
                    "AttributeType": {
                      "shape_name": "ScalarAttributeType",
                      "type": "string",
                      "enum": [
                        "S",
                        "N",
                        "B"
                      ],
                      "documentation": "\n    <p>The data type for the attribute.</p>\n  ",
                      "required": true
                    }
                  },
                  "documentation": "\n    <p>Represents an attribute for describing the key schema for the table and indexes.</p>\n  "
                },
                "documentation": "\n    <p>An array of <i>AttributeDefinition</i> objects.  Each of these objects describes one attribute in the table and index key schema.</p>\n      <p>Each <i>AttributeDefinition</i> object in this array is composed of:</p>\n    <ul>\n      <li>\n        <p><i>AttributeName</i> - The name of the attribute.</p>\n      </li>\n      <li>\n        <p><i>AttributeType</i> - The data type for the attribute.</p>\n      </li>\n    </ul>\n  "
              },
              "TableName": {
                "shape_name": "TableName",
                "type": "string",
                "min_length": 3,
                "max_length": 255,
                "pattern": "[a-zA-Z0-9_.-]+",
                "documentation": "\n    <p>The name of the table.</p>\n  "
              },
              "KeySchema": {
                "shape_name": "KeySchema",
                "type": "list",
                "members": {
                  "shape_name": "KeySchemaElement",
                  "type": "structure",
                  "members": {
                    "AttributeName": {
                      "shape_name": "KeySchemaAttributeName",
                      "type": "string",
                      "min_length": 1,
                      "max_length": 255,
                      "documentation": "\n    <p>The name of a key attribute.</p>\n  ",
                      "required": true
                    },
                    "KeyType": {
                      "shape_name": "KeyType",
                      "type": "string",
                      "enum": [
                        "HASH",
                        "RANGE"
                      ],
                      "documentation": "\n    <p>The attribute data, consisting of the data type and the attribute value\n      itself.</p>\n  ",
                      "required": true
                    }
                  },
                  "documentation": "\n    <p>Represents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or\n      the key attributes of an index.</p>\n  "
                },
                "min_length": 1,
                "max_length": 2,
                "documentation": "\n    <p>The primary key structure for the table. Each <i>KeySchemaElement</i> consists of:</p>\n    <ul>\n      <li>\n        <p><i>AttributeName</i> - The name of the attribute.</p>\n      </li>\n      <li>\n        <p><i>KeyType</i> - The key type for the attribute. Can be either <code>HASH</code> or\n            <code>RANGE</code>.</p>\n      </li>\n    </ul>\n    <p>For more information about primary keys, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey\">Primary Key</a> in the Amazon DynamoDB Developer Guide.</p>\n  "
              },
              "TableStatus": {
                "shape_name": "TableStatus",
                "type": "string",
                "enum": [
                  "CREATING",
                  "UPDATING",
                  "DELETING",
                  "ACTIVE"
                ],
                "documentation": "\n    <p>The current state of the table:</p>\n    <ul>\n      <li>\n        <p><i>CREATING</i> - The table is being created, as the result of a <i>CreateTable</i>\n          operation.</p>\n      </li>\n      <li>\n        <p><i>UPDATING</i> - The table is being updated, as the result of an <i>UpdateTable</i>\n          operation.</p>\n      </li>\n      <li>\n        <p><i>DELETING</i> - The table is being deleted, as the result of a <i>DeleteTable</i>\n          operation.</p>\n      </li>\n      <li>\n        <p><i>ACTIVE</i> - The table is ready for use.</p>\n      </li>\n    </ul>\n  "
              },
              "CreationDateTime": {
                "shape_name": "Date",
                "type": "timestamp",
                "documentation": "\n    <p>The date and time when the table was created, in <a href=\"http://www.epochconverter.com/\">UNIX epoch time</a> format.</p>\n  "
              },
              "ProvisionedThroughput": {
                "shape_name": "ProvisionedThroughputDescription",
                "type": "structure",
                "members": {
                  "LastIncreaseDateTime": {
                    "shape_name": "Date",
                    "type": "timestamp",
                    "documentation": "\n    <p>The date and time of the last provisioned throughput increase for this table.</p>\n  "
                  },
                  "LastDecreaseDateTime": {
                    "shape_name": "Date",
                    "type": "timestamp",
                    "documentation": "\n    <p>The date and time of the last provisioned throughput decrease for this table.</p>\n  "
                  },
                  "NumberOfDecreasesToday": {
                    "shape_name": "PositiveLongObject",
                    "type": "long",
                    "min_length": 1,
                    "documentation": "\n    <p>The number of provisioned throughput decreases for this table during this UTC calendar day.\n      For current maximums on provisioned throughput decreases, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\">Limits</a> in the Amazon DynamoDB Developer Guide.</p>\n  "
                  },
                  "ReadCapacityUnits": {
                    "shape_name": "PositiveLongObject",
                    "type": "long",
                    "min_length": 1,
                    "documentation": "\n    <p>The maximum number of strongly consistent reads consumed per second before Amazon DynamoDB returns a\n        <i>ThrottlingException</i>. Eventually consistent reads require less effort than strongly\n      consistent reads, so a setting of 50 <i>ReadCapacityUnits</i> per second provides 100\n      eventually consistent <i>ReadCapacityUnits</i> per second.</p>\n  "
                  },
                  "WriteCapacityUnits": {
                    "shape_name": "PositiveLongObject",
                    "type": "long",
                    "min_length": 1,
                    "documentation": "\n    <p>The maximum number of writes consumed per second before Amazon DynamoDB returns a\n        <i>ThrottlingException</i>.</p>\n  "
                  }
                },
                "documentation": "\n    <p>The provisioned throughput settings for the table, consisting of read and write\n      capacity units, along with data about increases and decreases.</p>\n  "
              },
              "TableSizeBytes": {
                "shape_name": "Long",
                "type": "long",
                "documentation": "\n    <p>The total size of the specified table, in bytes. Amazon DynamoDB updates this value approximately every six\n      hours. Recent changes might not be reflected in this value.\n      </p>\n  "
              },
              "ItemCount": {
                "shape_name": "Long",
                "type": "long",
                "documentation": "\n    <p>The number of items in the specified table. Amazon DynamoDB updates this value approximately every six\n      hours. Recent changes might not be reflected in this value.\n      </p>\n  "
              },
              "LocalSecondaryIndexes": {
                "shape_name": "LocalSecondaryIndexDescriptionList",
                "type": "list",
                "members": {
                  "shape_name": "LocalSecondaryIndexDescription",
                  "type": "structure",
                  "members": {
                    "IndexName": {
                      "shape_name": "IndexName",
                      "type": "string",
                      "min_length": 3,
                      "max_length": 255,
                      "pattern": "[a-zA-Z0-9_.-]+",
                      "documentation": "\n    <p>Represents the name of the local secondary index.</p>\n  "
                    },
                    "KeySchema": {
                      "shape_name": "KeySchema",
                      "type": "list",
                      "members": {
                        "shape_name": "KeySchemaElement",
                        "type": "structure",
                        "members": {
                          "AttributeName": {
                            "shape_name": "KeySchemaAttributeName",
                            "type": "string",
                            "min_length": 1,
                            "max_length": 255,
                            "documentation": "\n    <p>The name of a key attribute.</p>\n  ",
                            "required": true
                          },
                          "KeyType": {
                            "shape_name": "KeyType",
                            "type": "string",
                            "enum": [
                              "HASH",
                              "RANGE"
                            ],
                            "documentation": "\n    <p>The attribute data, consisting of the data type and the attribute value\n      itself.</p>\n  ",
                            "required": true
                          }
                        },
                        "documentation": "\n    <p>Represents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or\n      the key attributes of an index.</p>\n  "
                      },
                      "min_length": 1,
                      "max_length": 2,
                      "documentation": "The complete index\n    key schema, which consists of one or more pairs of attribute names and key types\n      (<code>HASH</code> or <code>RANGE</code>). "
                    },
                    "Projection": {
                      "shape_name": "Projection",
                      "type": "structure",
                      "members": {
                        "ProjectionType": {
                          "shape_name": "ProjectionType",
                          "type": "string",
                          "enum": [
                            "ALL",
                            "KEYS_ONLY",
                            "INCLUDE"
                          ],
                          "documentation": "\n    <p>The set of attributes that are projected into the index:</p>\n    <ul>\n      <li>\n        <p><code>KEYS_ONLY</code> - Only the index and primary keys are projected into the\n          index.</p>\n      </li>\n      <li>\n        <p><code>INCLUDE</code> - Only the specified table attributes are projected into the\n          index. The list of projected attributes are\n          in <i>NonKeyAttributes</i>.</p>\n      </li>\n      <li>\n        <p><code>ALL</code> - All of the table attributes are projected into the\n          index.</p>\n      </li>\n    </ul>\n  "
                        },
                        "NonKeyAttributes": {
                          "shape_name": "NonKeyAttributeNameList",
                          "type": "list",
                          "members": {
                            "shape_name": "NonKeyAttributeName",
                            "type": "string",
                            "min_length": 1,
                            "max_length": 255,
                            "documentation": null
                          },
                          "min_length": 1,
                          "max_length": 20,
                          "documentation": "\n    <p>Represents the non-key attribute names which will be projected into the index.</p>\n    <p>For local secondary indexes, the total count of <i>NonKeyAttributes</i> summed across all of the local secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.</p>\n  "
                        }
                      },
                      "documentation": "\n    <p>Represents attributes that are copied (projected) from the table into an index. These are in\n      addition to the primary key attributes and index key attributes, which are automatically\n      projected.</p>\n  "
                    },
                    "IndexSizeBytes": {
                      "shape_name": "Long",
                      "type": "long",
                      "documentation": "\n    <p>The total size of the specified index, in bytes. Amazon DynamoDB updates this value approximately every six\n      hours. Recent changes might not be reflected in this value.\n      </p>\n  "
                    },
                    "ItemCount": {
                      "shape_name": "Long",
                      "type": "long",
                      "documentation": "\n    <p>The number of items in the specified index. Amazon DynamoDB updates this value approximately every six\n      hours. Recent changes might not be reflected in this value.\n      </p>\n  "
                    }
                  },
                  "documentation": "\n    <p>Represents the properties of a local secondary index.</p>\n  "
                },
                "documentation": "\n    <p>Represents one or more local secondary indexes on the table. Each index is scoped to a given\n      hash key value. Tables with one or more local secondary indexes are subject to an item\n      collection size limit, where the amount of data within a given item collection cannot exceed\n      10 GB. Each element is composed of:</p>\n    <ul>\n      <li>\n        <p><i>IndexName</i> - The name of the local secondary index.</p>\n      </li>\n      <li>\n        <p><i>KeySchema</i> - Specifies the complete index key schema. The attribute names in the\n          key schema must be between 1 and 255 characters (inclusive). The key schema must begin with the same hash key attribute as the table.</p>\n      </li>\n      <li>         <p><i>Projection</i> - Specifies\n          attributes that are copied (projected) from the table into the index. These are in\n          addition to the primary key attributes and index key\n          attributes, which are automatically projected. Each\n          attribute specification is composed of:</p>\n        <ul>\n          <li>\n            <p><i>ProjectionType</i> - One\n              of the following:</p>\n            <ul>\n              <li>\n                <p><code>KEYS_ONLY</code> - Only the index and primary keys are projected into the\n                  index.</p>\n              </li>\n              <li>\n                <p><code>INCLUDE</code> - Only the specified table attributes are projected into the\n                  index. The list of projected attributes are\n                  in <i>NonKeyAttributes</i>.</p>\n              </li>\n              <li>\n                <p><code>ALL</code> - All of the table attributes are projected into the\n                  index.</p>\n              </li>\n            </ul>\n          </li>\n          <li>\n            <p><i>NonKeyAttributes</i> - A list of one or more non-key attribute names that are \n              projected into the secondary index. The total count of attributes specified in <i>NonKeyAttributes</i>, summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.</p>\n          </li>\n        </ul>\n </li>\n      <li>\n        <p><i>IndexSizeBytes</i> - Represents the total size of the index, in bytes. Amazon DynamoDB updates\n          this value approximately every six hours. Recent changes might not be reflected in this\n          value.</p>\n</li>\n      <li>\n        <p><i>ItemCount</i> - Represents the number of items in the index. Amazon DynamoDB updates this value\n          approximately every six hours. Recent changes might not be reflected in this value.</p>\n      </li>\n    </ul>\n    <p>If the table is in the <code>DELETING</code> state, no information about indexes will be returned.</p>\n  "
              },
              "GlobalSecondaryIndexes": {
                "shape_name": "GlobalSecondaryIndexDescriptionList",
                "type": "list",
                "members": {
                  "shape_name": "GlobalSecondaryIndexDescription",
                  "type": "structure",
                  "members": {
                    "IndexName": {
                      "shape_name": "IndexName",
                      "type": "string",
                      "min_length": 3,
                      "max_length": 255,
                      "pattern": "[a-zA-Z0-9_.-]+",
                      "documentation": "\n    <p>The name of the global secondary index.</p>\n  "
                    },
                    "KeySchema": {
                      "shape_name": "KeySchema",
                      "type": "list",
                      "members": {
                        "shape_name": "KeySchemaElement",
                        "type": "structure",
                        "members": {
                          "AttributeName": {
                            "shape_name": "KeySchemaAttributeName",
                            "type": "string",
                            "min_length": 1,
                            "max_length": 255,
                            "documentation": "\n    <p>The name of a key attribute.</p>\n  ",
                            "required": true
                          },
                          "KeyType": {
                            "shape_name": "KeyType",
                            "type": "string",
                            "enum": [
                              "HASH",
                              "RANGE"
                            ],
                            "documentation": "\n    <p>The attribute data, consisting of the data type and the attribute value\n      itself.</p>\n  ",
                            "required": true
                          }
                        },
                        "documentation": "\n    <p>Represents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or\n      the key attributes of an index.</p>\n  "
                      },
                      "min_length": 1,
                      "max_length": 2,
                      "documentation": "\n    <p>The complete key schema for the global secondary index, consisting of one or more pairs of attribute names and key types\n      (<code>HASH</code> or <code>RANGE</code>).</p> \n  "
                    },
                    "Projection": {
                      "shape_name": "Projection",
                      "type": "structure",
                      "members": {
                        "ProjectionType": {
                          "shape_name": "ProjectionType",
                          "type": "string",
                          "enum": [
                            "ALL",
                            "KEYS_ONLY",
                            "INCLUDE"
                          ],
                          "documentation": "\n    <p>The set of attributes that are projected into the index:</p>\n    <ul>\n      <li>\n        <p><code>KEYS_ONLY</code> - Only the index and primary keys are projected into the\n          index.</p>\n      </li>\n      <li>\n        <p><code>INCLUDE</code> - Only the specified table attributes are projected into the\n          index. The list of projected attributes are\n          in <i>NonKeyAttributes</i>.</p>\n      </li>\n      <li>\n        <p><code>ALL</code> - All of the table attributes are projected into the\n          index.</p>\n      </li>\n    </ul>\n  "
                        },
                        "NonKeyAttributes": {
                          "shape_name": "NonKeyAttributeNameList",
                          "type": "list",
                          "members": {
                            "shape_name": "NonKeyAttributeName",
                            "type": "string",
                            "min_length": 1,
                            "max_length": 255,
                            "documentation": null
                          },
                          "min_length": 1,
                          "max_length": 20,
                          "documentation": "\n    <p>Represents the non-key attribute names which will be projected into the index.</p>\n    <p>For local secondary indexes, the total count of <i>NonKeyAttributes</i> summed across all of the local secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.</p>\n  "
                        }
                      },
                      "documentation": "\n    <p>Represents attributes that are copied (projected) from the table into an index. These are in\n      addition to the primary key attributes and index key attributes, which are automatically\n      projected.</p>\n  "
                    },
                    "IndexStatus": {
                      "shape_name": "IndexStatus",
                      "type": "string",
                      "enum": [
                        "CREATING",
                        "UPDATING",
                        "DELETING",
                        "ACTIVE"
                      ],
                      "documentation": "\n    <p>The current state of the global secondary index:</p>\n    <ul>\n      <li>\n        <p><i>CREATING</i> - The index is being created, as the result of a <i>CreateTable</i> or \n          <i>UpdateTable</i> operation.</p>\n      </li>\n      <li>\n        <p><i>UPDATING</i> - The index is being updated, as the result of a <i>CreateTable</i> or \n          <i>UpdateTable</i> operation.</p>\n      </li>\n      <li>\n        <p><i>DELETING</i> - The index is being deleted, as the result of a <i>DeleteTable</i>\n          operation.</p>\n      </li>\n      <li>\n        <p><i>ACTIVE</i> - The index is ready for use.</p>\n      </li>\n    </ul>\n  "
                    },
                    "ProvisionedThroughput": {
                      "shape_name": "ProvisionedThroughputDescription",
                      "type": "structure",
                      "members": {
                        "LastIncreaseDateTime": {
                          "shape_name": "Date",
                          "type": "timestamp",
                          "documentation": "\n    <p>The date and time of the last provisioned throughput increase for this table.</p>\n  "
                        },
                        "LastDecreaseDateTime": {
                          "shape_name": "Date",
                          "type": "timestamp",
                          "documentation": "\n    <p>The date and time of the last provisioned throughput decrease for this table.</p>\n  "
                        },
                        "NumberOfDecreasesToday": {
                          "shape_name": "PositiveLongObject",
                          "type": "long",
                          "min_length": 1,
                          "documentation": "\n    <p>The number of provisioned throughput decreases for this table during this UTC calendar day.\n      For current maximums on provisioned throughput decreases, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\">Limits</a> in the Amazon DynamoDB Developer Guide.</p>\n  "
                        },
                        "ReadCapacityUnits": {
                          "shape_name": "PositiveLongObject",
                          "type": "long",
                          "min_length": 1,
                          "documentation": "\n    <p>The maximum number of strongly consistent reads consumed per second before Amazon DynamoDB returns a\n        <i>ThrottlingException</i>. Eventually consistent reads require less effort than strongly\n      consistent reads, so a setting of 50 <i>ReadCapacityUnits</i> per second provides 100\n      eventually consistent <i>ReadCapacityUnits</i> per second.</p>\n  "
                        },
                        "WriteCapacityUnits": {
                          "shape_name": "PositiveLongObject",
                          "type": "long",
                          "min_length": 1,
                          "documentation": "\n    <p>The maximum number of writes consumed per second before Amazon DynamoDB returns a\n        <i>ThrottlingException</i>.</p>\n  "
                        }
                      },
                      "documentation": "\n    <p>Represents the provisioned throughput settings for the table, consisting of read and write\n      capacity units, along with data about increases and decreases.</p>\n  "
                    },
                    "IndexSizeBytes": {
                      "shape_name": "Long",
                      "type": "long",
                      "documentation": "\n    <p>The total size of the specified index, in bytes. Amazon DynamoDB updates this value approximately every six\n      hours. Recent changes might not be reflected in this value.\n      </p>\n  "
                    },
                    "ItemCount": {
                      "shape_name": "Long",
                      "type": "long",
                      "documentation": "\n    <p>The number of items in the specified index. Amazon DynamoDB updates this value approximately every six\n      hours. Recent changes might not be reflected in this value.\n      </p>\n  "
                    }
                  },
                  "documentation": "\n    <p>Represents the properties of a global secondary index.</p>\n  "
                },
                "documentation": "\n    <p>The global secondary indexes, if any, on the table. Each index is scoped to a given\n      hash key value. Each element is composed of:</p>\n    <ul>\n      <li>\n        <p><i>IndexName</i> - The name of the global secondary index.</p>\n      </li>\n      <li>\n        <p><i>KeySchema</i> - Specifies the complete index key schema. The attribute names in the\n          key schema must be between 1 and 255 characters (inclusive). The key schema must begin with the same hash key attribute as the table.</p>\n      </li>\n      <li>         <p><i>Projection</i> - Specifies\n          attributes that are copied (projected) from the table into the index. These are in\n          addition to the primary key attributes and index key\n          attributes, which are automatically projected. Each\n          attribute specification is composed of:</p>\n        <ul>\n          <li>\n            <p><i>ProjectionType</i> - One\n              of the following:</p>\n            <ul>\n              <li>\n                <p><code>KEYS_ONLY</code> - Only the index and primary keys are projected into the\n                  index.</p>\n              </li>\n              <li>\n                <p><code>INCLUDE</code> - Only the specified table attributes are projected into the\n                  index. The list of projected attributes are\n                  in <i>NonKeyAttributes</i>.</p>\n              </li>\n              <li>\n                <p><code>ALL</code> - All of the table attributes are projected into the\n                  index.</p>\n              </li>\n            </ul>\n          </li>\n          <li>\n            <p><i>NonKeyAttributes</i> - A list of one or more non-key attribute names that are \n              projected into the secondary index. The total count of attributes specified in <i>NonKeyAttributes</i>, summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.</p>\n          </li>\n        </ul>\n </li>\n      <li>\n        <p><i>ProvisionedThroughput</i> - The provisioned throughput settings for the global secondary index,\n          consisting of read and write capacity units, along with data about increases and\n          decreases. </p>\n      </li>\n      <li>\n        <p><i>IndexSizeBytes</i> - The total size of the global secondary index, in bytes. Amazon DynamoDB updates this value approximately every six\n      hours. Recent changes might not be reflected in this value.\n      </p>\n</li>\n      <li>\n        <p><i>ItemCount</i> - The number of items in the global secondary index. Amazon DynamoDB updates this value approximately every six\n      hours. Recent changes might not be reflected in this value.\n      </p>\n      </li>\n    </ul>\n    <p>If the table is in the <code>DELETING</code> state, no information about indexes will be returned.</p>\n  "
              }
            },
            "documentation": "\n    <p>Represents the properties of a table.</p>\n  "
          }
        },
        "documentation": "\n    <p>Represents the output of a <i>CreateTable</i> operation.</p>\n  "
      },
      "errors": [
        {
          "shape_name": "ResourceInUseException",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>The resource which is being attempted to be changed is in use.</p>\n  "
            }
          },
          "documentation": "\n    <p>The operation conflicts with the resource's availability. For example, you attempted to\n      recreate an existing table, or tried to delete a table currently in the <code>CREATING</code>\n      state.</p>\n  "
        },
        {
          "shape_name": "LimitExceededException",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>Too many operations for a given subscriber.</p>\n  "
            }
          },
          "documentation": "\n    <p>The number of concurrent table requests (cumulative number of tables in the\n        <code>CREATING</code>, <code>DELETING</code> or <code>UPDATING</code> state) exceeds the\n      maximum allowed of 10.</p>\n    <p>Also, for tables with secondary indexes, only one of those tables can be in the <code>CREATING</code> state at any point in time. Do not attempt to create more than one such table simultaneously.</p> \n      <p>The total limit of tables in the <code>ACTIVE</code> state is 250.</p>\n  "
        },
        {
          "shape_name": "InternalServerError",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>The server encountered an internal error trying to fulfill the request.</p>\n  "
            }
          },
          "documentation": "\n    <p>An error occurred on the server side.</p>\n  "
        }
      ],
      "documentation": "\n    <p>The <i>CreateTable</i> operation adds a new table to your account. In an AWS account, table\n      names must be unique within each region. That is, you can have two tables with same name if you create the tables in different regions.</p>\n    <p><i>CreateTable</i> is an asynchronous operation.  Upon receiving a <i>CreateTable</i> request, Amazon DynamoDB immediately returns a response with a <i>TableStatus</i> of <code>CREATING</code>. After the table is created, Amazon DynamoDB sets the <i>TableStatus</i> to <code>ACTIVE</code>. You can perform read and write operations only on an <code>ACTIVE</code> table. </p>\n    <p>If you want to create multiple tables with secondary indexes on them, you must create them sequentially. Only one table with secondary indexes can be in the <code>CREATING</code> state at any given time.</p>\n    <p>You can use the <i>DescribeTable</i> API to check the table status.</p>\n    <examples>\n      <example>\n        <name>Create a Table</name>\n        <description>This example creates a table named Thread. The table primary key\n          consists of ForumName (hash) and Subject (range). A local secondary index is also created; its key consists of ForumName (hash) and LastPostDateTime (range).</description>\n        <request><![CDATA[\nPOST / HTTP/1.1\nHost: dynamodb.<region>.<domain>;\nX-Amz-Date: <Date>\nAuthorization: AWS4-HMAC-SHA256 Credential=<Credential>, SignedHeaders=content-length;content-type;host;user-agent;x-amz-content-sha256;x-amz-date;x-amz-target, Signature=<Signature>\nUser-Agent: <UserAgentString>\nx-amz-content-sha256: <PayloadHash>\nContent-Type: application/x-amz-json-1.0\nContent-Length: <PayloadSizeBytes>     \nConnection: Keep-Alive]]>\nX-Amz-Target: DynamoDB_20120810.CreateTable \n\n{\n    \"AttributeDefinitions\": [\n        {\n            \"AttributeName\": \"ForumName\",\n            \"AttributeType\": \"S\"\n        },\n        {\n            \"AttributeName\": \"Subject\",\n            \"AttributeType\": \"S\"\n        },\n        {\n            \"AttributeName\": \"LastPostDateTime\",\n            \"AttributeType\": \"S\"\n        }\n    ],\n    \"TableName\": \"Thread\",\n    \"KeySchema\": [\n        {\n            \"AttributeName\": \"ForumName\",\n            \"KeyType\": \"HASH\"\n        },\n        {\n            \"AttributeName\": \"Subject\",\n            \"KeyType\": \"RANGE\"\n        }\n    ],\n    \"LocalSecondaryIndexes\": [\n        {\n            \"IndexName\": \"LastPostIndex\",\n            \"KeySchema\": [\n                {\n                    \"AttributeName\": \"ForumName\",\n                    \"KeyType\": \"HASH\"\n                },\n                {\n                    \"AttributeName\": \"LastPostDateTime\",\n                    \"KeyType\": \"RANGE\"\n                }\n            ],\n            \"Projection\": {\n                \"ProjectionType\": \"KEYS_ONLY\"\n            }\n        }\n    ],\n    \"ProvisionedThroughput\": {\n        \"ReadCapacityUnits\": 5,\n        \"WriteCapacityUnits\": 5\n    }\n}\n        </request>\n        <response><![CDATA[\nHTTP/1.1 200 OK\nx-amzn-RequestId: <RequestId> \nx-amz-crc32: <Checksum>\nContent-Type: application/x-amz-json-1.0\nContent-Length: <PayloadSizeBytes>\nDate: <Date>\n]]>\n{\n    \"TableDescription\": {\n        \"AttributeDefinitions\": [\n            {\n                \"AttributeName\": \"ForumName\",\n                \"AttributeType\": \"S\"\n            },\n            {\n                \"AttributeName\": \"LastPostDateTime\",\n                \"AttributeType\": \"S\"\n            },\n            {\n                \"AttributeName\": \"Subject\",\n                \"AttributeType\": \"S\"\n            }\n        ],\n        \"CreationDateTime\": 1.36372808007E9,\n        \"ItemCount\": 0,\n        \"KeySchema\": [\n            {\n                \"AttributeName\": \"ForumName\",\n                \"KeyType\": \"HASH\"\n            },\n            {\n                \"AttributeName\": \"Subject\",\n                \"KeyType\": \"RANGE\"\n            }\n        ],\n        \"LocalSecondaryIndexes\": [\n            {\n                \"IndexName\": \"LastPostIndex\",\n                \"IndexSizeBytes\": 0,\n                \"ItemCount\": 0,\n                \"KeySchema\": [\n                    {\n                        \"AttributeName\": \"ForumName\",\n                        \"KeyType\": \"HASH\"\n                    },\n                    {\n                        \"AttributeName\": \"LastPostDateTime\",\n                        \"KeyType\": \"RANGE\"\n                    }\n                ],\n                \"Projection\": {\n                    \"ProjectionType\": \"KEYS_ONLY\"\n                }\n            }\n        ],\n        \"ProvisionedThroughput\": {\n            \"NumberOfDecreasesToday\": 0,\n            \"ReadCapacityUnits\": 5,\n            \"WriteCapacityUnits\": 5\n        },\n        \"TableName\": \"Thread\",\n        \"TableSizeBytes\": 0,\n        \"TableStatus\": \"CREATING\"\n    }\n}\n        </response>\n      </example>\n    </examples>\n  "
    },
    "DeleteItem": {
      "name": "DeleteItem",
      "input": {
        "shape_name": "DeleteItemInput",
        "type": "structure",
        "members": {
          "TableName": {
            "shape_name": "TableName",
            "type": "string",
            "min_length": 3,
            "max_length": 255,
            "pattern": "[a-zA-Z0-9_.-]+",
            "documentation": "\n    <p>The name of the table from which to delete the item.</p>\n  ",
            "required": true
          },
          "Key": {
            "shape_name": "Key",
            "type": "map",
            "keys": {
              "shape_name": "AttributeName",
              "type": "string",
              "documentation": null
            },
            "members": {
              "shape_name": "AttributeValue",
              "type": "structure",
              "members": {
                "S": {
                  "shape_name": "StringAttributeValue",
                  "type": "string",
                  "documentation": "\n    <p>A String data type</p>\n  "
                },
                "N": {
                  "shape_name": "NumberAttributeValue",
                  "type": "string",
                  "documentation": "\n    <p>A Number data type</p>\n  "
                },
                "B": {
                  "shape_name": "BinaryAttributeValue",
                  "type": "blob",
                  "documentation": "\n    <p>A Binary data type</p>\n  "
                },
                "SS": {
                  "shape_name": "StringSetAttributeValue",
                  "type": "list",
                  "members": {
                    "shape_name": "StringAttributeValue",
                    "type": "string",
                    "documentation": null
                  },
                  "documentation": "\n    <p>A String set data type</p>\n  "
                },
                "NS": {
                  "shape_name": "NumberSetAttributeValue",
                  "type": "list",
                  "members": {
                    "shape_name": "NumberAttributeValue",
                    "type": "string",
                    "documentation": null
                  },
                  "documentation": "\n    <p> Number set data type</p>\n  "
                },
                "BS": {
                  "shape_name": "BinarySetAttributeValue",
                  "type": "list",
                  "members": {
                    "shape_name": "BinaryAttributeValue",
                    "type": "blob",
                    "documentation": null
                  },
                  "documentation": "\n    <p>A Binary set data type</p>\n  "
                }
              },
              "documentation": "\n    <p>Represents the data for an attribute. You can set one, and only one, of the elements.</p>\n  "
            },
            "documentation": "\n    <p>A map of attribute names to <i>AttributeValue</i> objects, representing the primary key of the item to delete.</p>\n  ",
            "required": true
          },
          "Expected": {
            "shape_name": "ExpectedAttributeMap",
            "type": "map",
            "keys": {
              "shape_name": "AttributeName",
              "type": "string",
              "documentation": null
            },
            "members": {
              "shape_name": "ExpectedAttributeValue",
              "type": "structure",
              "members": {
                "Value": {
                  "shape_name": "AttributeValue",
                  "type": "structure",
                  "members": {
                    "S": {
                      "shape_name": "StringAttributeValue",
                      "type": "string",
                      "documentation": "\n    <p>A String data type</p>\n  "
                    },
                    "N": {
                      "shape_name": "NumberAttributeValue",
                      "type": "string",
                      "documentation": "\n    <p>A Number data type</p>\n  "
                    },
                    "B": {
                      "shape_name": "BinaryAttributeValue",
                      "type": "blob",
                      "documentation": "\n    <p>A Binary data type</p>\n  "
                    },
                    "SS": {
                      "shape_name": "StringSetAttributeValue",
                      "type": "list",
                      "members": {
                        "shape_name": "StringAttributeValue",
                        "type": "string",
                        "documentation": null
                      },
                      "documentation": "\n    <p>A String set data type</p>\n  "
                    },
                    "NS": {
                      "shape_name": "NumberSetAttributeValue",
                      "type": "list",
                      "members": {
                        "shape_name": "NumberAttributeValue",
                        "type": "string",
                        "documentation": null
                      },
                      "documentation": "\n    <p> Number set data type</p>\n  "
                    },
                    "BS": {
                      "shape_name": "BinarySetAttributeValue",
                      "type": "list",
                      "members": {
                        "shape_name": "BinaryAttributeValue",
                        "type": "blob",
                        "documentation": null
                      },
                      "documentation": "\n    <p>A Binary set data type</p>\n  "
                    }
                  },
                  "documentation": "\n    <p>Represents the data for an attribute. You can set one, and only one, of the elements.</p>\n  "
                },
                "Exists": {
                  "shape_name": "BooleanObject",
                  "type": "boolean",
                  "documentation": "\n    <p>Causes Amazon DynamoDB to evaluate the value before attempting a conditional operation:</p>\n    <ul>\n      <li>\n        <p>If <i>Exists</i> is <code>true</code>, Amazon DynamoDB will check to see if that attribute\n          value already exists in the table. If it is found, then the operation\n          succeeds. If it is not found, the operation fails with a\n          <i>ConditionalCheckFailedException</i>.</p>\n      </li>\n      <li>\n        <p>If <i>Exists</i> is <code>false</code>, Amazon DynamoDB assumes that the attribute value does\n          <i>not</i> exist in the table. If in fact the value does not exist, then the\n          assumption is valid and the operation succeeds. If the value is found,\n          despite the assumption that it does not exist, the operation fails with a\n          <i>ConditionalCheckFailedException</i>.</p>\n      </li>\n    </ul>\n    <p>The default setting for <i>Exists</i> is <code>true</code>. If you supply a <i>Value</i> all\n      by itself, Amazon DynamoDB assumes the attribute exists: You don't have to set <i>Exists</i> to\n        <code>true</code>, because it is implied.</p>\n    <p>Amazon DynamoDB returns a <i>ValidationException</i> if:</p>\n    <ul>\n      <li>\n        <p><i>Exists</i> is <code>true</code> but there is no <i>Value</i> to check. (You expect\n          a value to exist, but don't specify what that value is.)</p>\n      </li>\n      <li>\n        <p><i>Exists</i> is <code>false</code> but you also specify a <i>Value</i>. (You cannot\n          expect an attribute to have a value, while also expecting it not to exist.)</p>\n      </li>\n    </ul>\n    <p>If you specify more than one condition for <i>Exists</i>, then all of the conditions must\n      evaluate to true. (In other words, the conditions are ANDed together.) Otherwise, the\n      conditional operation will fail.</p>\n  "
                }
              },
              "documentation": "\n    <p>Represents an attribute value used with conditional <i>DeleteItem</i>, <i>PutItem</i> or <i>UpdateItem</i> operations.  Amazon DynamoDB will check to see if the attribute value already exists; or if the attribute exists and has a particular value before updating it.</p>\n  "
            },
            "documentation": "\n    <p>A map of attribute/condition pairs. This is the conditional block for the <i>DeleteItem</i>operation. All the conditions must be met for the operation to succeed.</p>     <p><i>Expected</i> allows you to\n      provide an attribute name, and whether or not Amazon DynamoDB should check to see if the attribute value\n      already exists; or if the attribute value exists and has a particular value before changing\n      it.</p>\n    <p>Each item in <i>Expected</i> represents an attribute name for Amazon DynamoDB to check, along with\n      the following: </p>\n    <ul>\n      <li>\n        <p><i>Value</i> - The attribute value for Amazon DynamoDB to check.</p>\n      </li>\n      <li>\n        <p><i>Exists</i> - Causes Amazon DynamoDB to evaluate the value before attempting a conditional\n          operation:</p>\n        <ul>\n          <li>\n            <p>If <i>Exists</i> is <code>true</code>, Amazon DynamoDB will check to see if that attribute\n              value already exists in the table. If it is found, then the operation\n              succeeds. If it is not found, the operation fails with a\n                <i>ConditionalCheckFailedException</i>.</p>\n          </li>\n          <li>\n            <p>If <i>Exists</i> is <code>false</code>, Amazon DynamoDB assumes that the attribute value does\n                <i>not</i> exist in the table. If in fact the value does not exist, then the\n              assumption is valid and the operation succeeds. If the value is found,\n              despite the assumption that it does not exist, the operation fails with a\n                <i>ConditionalCheckFailedException</i>.</p>\n          </li>\n        </ul>\n        <p>The default setting for <i>Exists</i> is <code>true</code>. If you supply a <i>Value</i>\n          all by itself, Amazon DynamoDB assumes the attribute exists:  You don't have to set <i>Exists</i> to <code>true</code>, because it is\n          implied.</p>\n        <p>Amazon DynamoDB returns a <i>ValidationException</i> if:</p>\n        <ul>\n          <li>\n            <p><i>Exists</i> is <code>true</code> but there is no <i>Value</i> to check. (You expect\n              a value to exist, but don't specify what that value is.)</p>\n          </li>\n          <li>\n            <p><i>Exists</i> is <code>false</code> but you also specify a <i>Value</i>. (You cannot\n              expect an attribute to have a value, while also expecting it not to exist.)</p>\n          </li>\n        </ul>\n      </li>\n    </ul>\n    <p>If you specify more than one condition for <i>Exists</i>, then all of the conditions must\n      evaluate to true. (In other words, the conditions are ANDed together.) Otherwise, the\n      conditional operation will fail.</p>\n\n  "
          },
          "ReturnValues": {
            "shape_name": "ReturnValue",
            "type": "string",
            "enum": [
              "NONE",
              "ALL_OLD",
              "UPDATED_OLD",
              "ALL_NEW",
              "UPDATED_NEW"
            ],
            "documentation": "\n    <p>Use <i>ReturnValues</i> if you want to get the item attributes as they appeared before they were\n      deleted. For <i>DeleteItem</i>, the valid values are:</p>\n    <ul>\n      <li>\n        <p><code>NONE</code> - If <i>ReturnValues</i> is not specified, or if its\n          value is <code>NONE</code>, then nothing is returned. (This is the default for <i>ReturnValues</i>.)</p>\n      </li>\n      <li>\n        <p><code>ALL_OLD</code> - The content of the old item is returned.</p>\n      </li>\n    </ul>\n  "
          },
          "ReturnConsumedCapacity": {
            "shape_name": "ReturnConsumedCapacity",
            "type": "string",
            "enum": [
              "INDEXES",
              "TOTAL",
              "NONE"
            ],
            "documentation": "\n    <p>If set to <code>TOTAL</code>, the response includes <i>ConsumedCapacity</i> data for tables and indexes. If set to <code>INDEXES</code>, the repsonse includes <i>ConsumedCapacity</i> for indexes. If set to <code>NONE</code> (the default), <i>ConsumedCapacity</i> is not included in the response.</p>\n  "
          },
          "ReturnItemCollectionMetrics": {
            "shape_name": "ReturnItemCollectionMetrics",
            "type": "string",
            "enum": [
              "SIZE",
              "NONE"
            ],
            "documentation": "     <p>If set to <code>SIZE</code>, statistics about item collections, if any, that were modified during\n      the operation are returned in the response. If set to <code>NONE</code> (the default), no statistics are returned.</p>\n "
          }
        },
        "documentation": "\n    <p>Represents the input of a <i>DeleteItem</i> operation.</p>\n  "
      },
      "output": {
        "shape_name": "DeleteItemOutput",
        "type": "structure",
        "members": {
          "Attributes": {
            "shape_name": "AttributeMap",
            "type": "map",
            "keys": {
              "shape_name": "AttributeName",
              "type": "string",
              "documentation": null
            },
            "members": {
              "shape_name": "AttributeValue",
              "type": "structure",
              "members": {
                "S": {
                  "shape_name": "StringAttributeValue",
                  "type": "string",
                  "documentation": "\n    <p>A String data type</p>\n  "
                },
                "N": {
                  "shape_name": "NumberAttributeValue",
                  "type": "string",
                  "documentation": "\n    <p>A Number data type</p>\n  "
                },
                "B": {
                  "shape_name": "BinaryAttributeValue",
                  "type": "blob",
                  "documentation": "\n    <p>A Binary data type</p>\n  "
                },
                "SS": {
                  "shape_name": "StringSetAttributeValue",
                  "type": "list",
                  "members": {
                    "shape_name": "StringAttributeValue",
                    "type": "string",
                    "documentation": null
                  },
                  "documentation": "\n    <p>A String set data type</p>\n  "
                },
                "NS": {
                  "shape_name": "NumberSetAttributeValue",
                  "type": "list",
                  "members": {
                    "shape_name": "NumberAttributeValue",
                    "type": "string",
                    "documentation": null
                  },
                  "documentation": "\n    <p> Number set data type</p>\n  "
                },
                "BS": {
                  "shape_name": "BinarySetAttributeValue",
                  "type": "list",
                  "members": {
                    "shape_name": "BinaryAttributeValue",
                    "type": "blob",
                    "documentation": null
                  },
                  "documentation": "\n    <p>A Binary set data type</p>\n  "
                }
              },
              "documentation": "\n    <p>Represents the data for an attribute. You can set one, and only one, of the elements.</p>\n  "
            },
            "documentation": "\n    <p>A map of attribute names to <i>AttributeValue</i> objects, representing the item as it appeared\n      before the <i>DeleteItem</i> operation. This map appears in the response only\n        if <i>ReturnValues</i> was specified as <code>ALL_OLD</code> in the request.</p>\n  "
          },
          "ConsumedCapacity": {
            "shape_name": "ConsumedCapacity",
            "type": "structure",
            "members": {
              "TableName": {
                "shape_name": "TableName",
                "type": "string",
                "min_length": 3,
                "max_length": 255,
                "pattern": "[a-zA-Z0-9_.-]+",
                "documentation": "\n    <p>The name of the table that was affected by the operation.</p>\n  "
              },
              "CapacityUnits": {
                "shape_name": "ConsumedCapacityUnits",
                "type": "double",
                "documentation": "\n    <p>The total number of capacity units consumed by the operation.</p>\n  "
              },
              "Table": {
                "shape_name": "Capacity",
                "type": "structure",
                "members": {
                  "CapacityUnits": {
                    "shape_name": "ConsumedCapacityUnits",
                    "type": "double",
                    "documentation": "\n    <p>The total number of capacity units consumed on a table or an index.</p>\n  "
                  }
                },
                "documentation": "\n    <p>The amount of throughput consumed on the table affected by the operation.</p>\n  "
              },
              "LocalSecondaryIndexes": {
                "shape_name": "SecondaryIndexesCapacityMap",
                "type": "map",
                "keys": {
                  "shape_name": "IndexName",
                  "type": "string",
                  "min_length": 3,
                  "max_length": 255,
                  "pattern": "[a-zA-Z0-9_.-]+",
                  "documentation": null
                },
                "members": {
                  "shape_name": "Capacity",
                  "type": "structure",
                  "members": {
                    "CapacityUnits": {
                      "shape_name": "ConsumedCapacityUnits",
                      "type": "double",
                      "documentation": "\n    <p>The total number of capacity units consumed on a table or an index.</p>\n  "
                    }
                  },
                  "documentation": "\n    <p>Represents the amount of provisioned throughput capacity consumed on a table or an index. </p>\n  "
                },
                "documentation": "\n    <p>The amount of throughput consumed on each local index affected by the operation.</p>\n  "
              },
              "GlobalSecondaryIndexes": {
                "shape_name": "SecondaryIndexesCapacityMap",
                "type": "map",
                "keys": {
                  "shape_name": "IndexName",
                  "type": "string",
                  "min_length": 3,
                  "max_length": 255,
                  "pattern": "[a-zA-Z0-9_.-]+",
                  "documentation": null
                },
                "members": {
                  "shape_name": "Capacity",
                  "type": "structure",
                  "members": {
                    "CapacityUnits": {
                      "shape_name": "ConsumedCapacityUnits",
                      "type": "double",
                      "documentation": "\n    <p>The total number of capacity units consumed on a table or an index.</p>\n  "
                    }
                  },
                  "documentation": "\n    <p>Represents the amount of provisioned throughput capacity consumed on a table or an index. </p>\n  "
                },
                "documentation": "\n    <p>The amount of throughput consumed on each global index affected by the operation.</p>\n  "
              }
            },
            "documentation": "\n    <p>Represents the capacity units consumed by an operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. <i>ConsumedCapacity</i> is only returned if it was asked for in the request. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html\">Provisioned Throughput</a> in the Amazon DynamoDB Developer Guide.</p>\n  "
          },
          "ItemCollectionMetrics": {
            "shape_name": "ItemCollectionMetrics",
            "type": "structure",
            "members": {
              "ItemCollectionKey": {
                "shape_name": "ItemCollectionKeyAttributeMap",
                "type": "map",
                "keys": {
                  "shape_name": "AttributeName",
                  "type": "string",
                  "documentation": null
                },
                "members": {
                  "shape_name": "AttributeValue",
                  "type": "structure",
                  "members": {
                    "S": {
                      "shape_name": "StringAttributeValue",
                      "type": "string",
                      "documentation": "\n    <p>A String data type</p>\n  "
                    },
                    "N": {
                      "shape_name": "NumberAttributeValue",
                      "type": "string",
                      "documentation": "\n    <p>A Number data type</p>\n  "
                    },
                    "B": {
                      "shape_name": "BinaryAttributeValue",
                      "type": "blob",
                      "documentation": "\n    <p>A Binary data type</p>\n  "
                    },
                    "SS": {
                      "shape_name": "StringSetAttributeValue",
                      "type": "list",
                      "members": {
                        "shape_name": "StringAttributeValue",
                        "type": "string",
                        "documentation": null
                      },
                      "documentation": "\n    <p>A String set data type</p>\n  "
                    },
                    "NS": {
                      "shape_name": "NumberSetAttributeValue",
                      "type": "list",
                      "members": {
                        "shape_name": "NumberAttributeValue",
                        "type": "string",
                        "documentation": null
                      },
                      "documentation": "\n    <p> Number set data type</p>\n  "
                    },
                    "BS": {
                      "shape_name": "BinarySetAttributeValue",
                      "type": "list",
                      "members": {
                        "shape_name": "BinaryAttributeValue",
                        "type": "blob",
                        "documentation": null
                      },
                      "documentation": "\n    <p>A Binary set data type</p>\n  "
                    }
                  },
                  "documentation": "\n    <p>Represents the data for an attribute. You can set one, and only one, of the elements.</p>\n  "
                },
                "documentation": "\n    <p>The hash key value of the item collection. This is the same as the hash key of the item.</p>  \n   "
              },
              "SizeEstimateRangeGB": {
                "shape_name": "ItemCollectionSizeEstimateRange",
                "type": "list",
                "members": {
                  "shape_name": "ItemCollectionSizeEstimateBound",
                  "type": "double",
                  "documentation": null
                },
                "documentation": "\n    <p>An estimate of item collection size, measured in gigabytes. This is a\n      two-element array containing a lower bound and an upper bound for the estimate. The estimate\n      includes the size of all the items in the table, plus the size of all attributes projected\n      into all of the local secondary indexes on that table. Use this estimate to measure whether a\n      local secondary index is approaching its size limit.</p>\n    <p>The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.</p>\n  "
              }
            },
            "documentation": "     <p>Information about item collections, if any, that were affected by the operation. <i>ItemCollectionMetrics</i> is only returned if it was asked for in the request. If the table\n      does not have any local secondary indexes, this information is not\n      returned in the response.</p>\n      <p>Each <i>ItemCollectionMetrics</i>\n        element consists of:</p>\n      <ul>\n        <li><p><i>ItemCollectionKey</i> - The hash key value of the item\n          collection. This is the same as the hash key of the item.</p></li>\n        <li><p><i>SizeEstimateRange</i> - An estimate of item collection size,\n          measured in gigabytes. This is a two-element array\n          containing a lower bound and an upper bound for the\n          estimate. The estimate includes the size of all the\n          items in the table, plus the size of all attributes\n          projected into all of the local secondary indexes on that\n          table. Use this estimate to measure whether a local secondary index is approaching its size limit.</p>\n          <p>The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.</p>\n</li>\n      </ul>\n "
          }
        },
        "documentation": "\n    <p>Represents the output of a <i>DeleteItem</i> operation.</p>\n  "
      },
      "errors": [
        {
          "shape_name": "ConditionalCheckFailedException",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>The conditional request failed.</p>\n  "
            }
          },
          "documentation": "\n    <p>A condition specified in the operation could not be evaluated.</p>\n  "
        },
        {
          "shape_name": "ProvisionedThroughputExceededException",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>You exceeded your maximum allowed provisioned throughput.</p>\n  "
            }
          },
          "documentation": "\n    <p>The request rate is too high, or the request is too large, for the available throughput to\n      accommodate. The AWS SDKs automatically retry requests that receive this exception;\n      therefore, your request will eventually succeed, unless the request is too large or your retry\n      queue is too large to finish. Reduce the frequency of requests by using the strategies listed in\n        <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#APIRetries\">Error Retries and Exponential Backoff</a> in the Amazon DynamoDB Developer Guide.</p>\n  "
        },
        {
          "shape_name": "ResourceNotFoundException",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>The resource which is being requested does not exist.</p>\n  "
            }
          },
          "documentation": "\n    <p>The operation tried to access a nonexistent table or index. The resource may not be specified correctly, or its status may not be <code>ACTIVE</code>.</p>\n  "
        },
        {
          "shape_name": "ItemCollectionSizeLimitExceededException",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>The total size of an item collection has exceeded the maximum limit of 10 gigabytes.</p>\n  "
            }
          },
          "documentation": "\n    <p>An item collection is too large. This exception is only returned for tables that have one or\n      more local secondary indexes.</p>\n  "
        },
        {
          "shape_name": "InternalServerError",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>The server encountered an internal error trying to fulfill the request.</p>\n  "
            }
          },
          "documentation": "\n    <p>An error occurred on the server side.</p>\n  "
        }
      ],
      "documentation": "\n    <p>Deletes a single item in a table by primary key. You can perform a conditional delete\n      operation that deletes the item if it exists, or if it has an expected attribute value.</p>\n    <p>In addition to deleting an item, you can also return the item's attribute values in the same operation, using the <i>ReturnValues</i> parameter.</p>\n      <p>Unless you specify conditions, the <i>DeleteItem</i> is an idempotent operation; running it\n        multiple times on the same item or attribute does <i>not</i> result in an error\n        response.</p>\n    <p>Conditional deletes are useful for only deleting items if specific conditions are met. If those\n      conditions are met, Amazon DynamoDB performs the delete. Otherwise, the item is not deleted. </p>\n    <examples>\n      <example>\n        <name>Delete an Item</name>\n        <description>This example deletes an item from the Thread table, but only if that item does\n          not have an attribute named Replies. Because ReturnValues is set to ALL_OLD, the response\n          contains the item as it appeared before the delete.</description>\n        <request><![CDATA[\nPOST / HTTP/1.1\nHost: dynamodb.<region>.<domain>;\nX-Amz-Date: <Date>\nAuthorization: AWS4-HMAC-SHA256 Credential=<Credential>, SignedHeaders=content-length;content-type;host;user-agent;x-amz-content-sha256;x-amz-date;x-amz-target, Signature=<Signature>\nUser-Agent: <UserAgentString>\nx-amz-content-sha256: <PayloadHash>\nContent-Type: application/x-amz-json-1.0\nContent-Length: <PayloadSizeBytes>     \nConnection: Keep-Alive]]>\nX-Amz-Target: DynamoDB_20120810.DeleteItem \n\n{\n    \"TableName\": \"Thread\",\n    \"Key\": {\n        \"ForumName\": {\n            \"S\": \"Amazon DynamoDB\"\n        },\n        \"Subject\": {\n            \"S\": \"How do I update multiple items?\"\n        }\n    },\n    \"Expected\": {\n        \"Replies\": {\n            \"Exists\": false\n        }\n    },\n    \"ReturnValues\": \"ALL_OLD\"\n}\n        </request>\n        <response><![CDATA[\nHTTP/1.1 200 OK\nx-amzn-RequestId: <RequestId> \nx-amz-crc32: <Checksum>\nContent-Type: application/x-amz-json-1.0\nContent-Length: <PayloadSizeBytes>\nDate: <Date>\n]]>\n{\n    \"Attributes\": {\n        \"LastPostedBy\": {\n            \"S\": \"fred@example.com\"\n        },\n        \"ForumName\": {\n            \"S\": \"Amazon DynamoDB\"\n        },\n        \"LastPostDateTime\": {\n            \"S\": \"201303201023\"\n        },\n        \"Tags\": {\n            \"SS\": [\"Update\",\"Multiple Items\",\"HelpMe\"]\n        },\n        \"Subject\": {\n            \"S\": \"How do I update multiple items?\"\n        },\n        \"Message\": {\n            \"S\": \"I want to update multiple items in a single API call. What's the best way to do that?\"\n        }\n    }\n}\n        </response>\n      </example>\n    </examples>\n  "
    },
    "DeleteTable": {
      "name": "DeleteTable",
      "input": {
        "shape_name": "DeleteTableInput",
        "type": "structure",
        "members": {
          "TableName": {
            "shape_name": "TableName",
            "type": "string",
            "min_length": 3,
            "max_length": 255,
            "pattern": "[a-zA-Z0-9_.-]+",
            "documentation": "\n    <p> The name of the table to delete.</p>\n  ",
            "required": true
          }
        },
        "documentation": "\n    <p>Represents the input of a <i>DeleteTable</i> operation.</p>\n  "
      },
      "output": {
        "shape_name": "DeleteTableOutput",
        "type": "structure",
        "members": {
          "TableDescription": {
            "shape_name": "TableDescription",
            "type": "structure",
            "members": {
              "AttributeDefinitions": {
                "shape_name": "AttributeDefinitions",
                "type": "list",
                "members": {
                  "shape_name": "AttributeDefinition",
                  "type": "structure",
                  "members": {
                    "AttributeName": {
                      "shape_name": "KeySchemaAttributeName",
                      "type": "string",
                      "min_length": 1,
                      "max_length": 255,
                      "documentation": "\n    <p>A name for the attribute.</p>\n  ",
                      "required": true
                    },
                    "AttributeType": {
                      "shape_name": "ScalarAttributeType",
                      "type": "string",
                      "enum": [
                        "S",
                        "N",
                        "B"
                      ],
                      "documentation": "\n    <p>The data type for the attribute.</p>\n  ",
                      "required": true
                    }
                  },
                  "documentation": "\n    <p>Represents an attribute for describing the key schema for the table and indexes.</p>\n  "
                },
                "documentation": "\n    <p>An array of <i>AttributeDefinition</i> objects.  Each of these objects describes one attribute in the table and index key schema.</p>\n      <p>Each <i>AttributeDefinition</i> object in this array is composed of:</p>\n    <ul>\n      <li>\n        <p><i>AttributeName</i> - The name of the attribute.</p>\n      </li>\n      <li>\n        <p><i>AttributeType</i> - The data type for the attribute.</p>\n      </li>\n    </ul>\n  "
              },
              "TableName": {
                "shape_name": "TableName",
                "type": "string",
                "min_length": 3,
                "max_length": 255,
                "pattern": "[a-zA-Z0-9_.-]+",
                "documentation": "\n    <p>The name of the table.</p>\n  "
              },
              "KeySchema": {
                "shape_name": "KeySchema",
                "type": "list",
                "members": {
                  "shape_name": "KeySchemaElement",
                  "type": "structure",
                  "members": {
                    "AttributeName": {
                      "shape_name": "KeySchemaAttributeName",
                      "type": "string",
                      "min_length": 1,
                      "max_length": 255,
                      "documentation": "\n    <p>The name of a key attribute.</p>\n  ",
                      "required": true
                    },
                    "KeyType": {
                      "shape_name": "KeyType",
                      "type": "string",
                      "enum": [
                        "HASH",
                        "RANGE"
                      ],
                      "documentation": "\n    <p>The attribute data, consisting of the data type and the attribute value\n      itself.</p>\n  ",
                      "required": true
                    }
                  },
                  "documentation": "\n    <p>Represents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or\n      the key attributes of an index.</p>\n  "
                },
                "min_length": 1,
                "max_length": 2,
                "documentation": "\n    <p>The primary key structure for the table. Each <i>KeySchemaElement</i> consists of:</p>\n    <ul>\n      <li>\n        <p><i>AttributeName</i> - The name of the attribute.</p>\n      </li>\n      <li>\n        <p><i>KeyType</i> - The key type for the attribute. Can be either <code>HASH</code> or\n            <code>RANGE</code>.</p>\n      </li>\n    </ul>\n    <p>For more information about primary keys, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey\">Primary Key</a> in the Amazon DynamoDB Developer Guide.</p>\n  "
              },
              "TableStatus": {
                "shape_name": "TableStatus",
                "type": "string",
                "enum": [
                  "CREATING",
                  "UPDATING",
                  "DELETING",
                  "ACTIVE"
                ],
                "documentation": "\n    <p>The current state of the table:</p>\n    <ul>\n      <li>\n        <p><i>CREATING</i> - The table is being created, as the result of a <i>CreateTable</i>\n          operation.</p>\n      </li>\n      <li>\n        <p><i>UPDATING</i> - The table is being updated, as the result of an <i>UpdateTable</i>\n          operation.</p>\n      </li>\n      <li>\n        <p><i>DELETING</i> - The table is being deleted, as the result of a <i>DeleteTable</i>\n          operation.</p>\n      </li>\n      <li>\n        <p><i>ACTIVE</i> - The table is ready for use.</p>\n      </li>\n    </ul>\n  "
              },
              "CreationDateTime": {
                "shape_name": "Date",
                "type": "timestamp",
                "documentation": "\n    <p>The date and time when the table was created, in <a href=\"http://www.epochconverter.com/\">UNIX epoch time</a> format.</p>\n  "
              },
              "ProvisionedThroughput": {
                "shape_name": "ProvisionedThroughputDescription",
                "type": "structure",
                "members": {
                  "LastIncreaseDateTime": {
                    "shape_name": "Date",
                    "type": "timestamp",
                    "documentation": "\n    <p>The date and time of the last provisioned throughput increase for this table.</p>\n  "
                  },
                  "LastDecreaseDateTime": {
                    "shape_name": "Date",
                    "type": "timestamp",
                    "documentation": "\n    <p>The date and time of the last provisioned throughput decrease for this table.</p>\n  "
                  },
                  "NumberOfDecreasesToday": {
                    "shape_name": "PositiveLongObject",
                    "type": "long",
                    "min_length": 1,
                    "documentation": "\n    <p>The number of provisioned throughput decreases for this table during this UTC calendar day.\n      For current maximums on provisioned throughput decreases, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\">Limits</a> in the Amazon DynamoDB Developer Guide.</p>\n  "
                  },
                  "ReadCapacityUnits": {
                    "shape_name": "PositiveLongObject",
                    "type": "long",
                    "min_length": 1,
                    "documentation": "\n    <p>The maximum number of strongly consistent reads consumed per second before Amazon DynamoDB returns a\n        <i>ThrottlingException</i>. Eventually consistent reads require less effort than strongly\n      consistent reads, so a setting of 50 <i>ReadCapacityUnits</i> per second provides 100\n      eventually consistent <i>ReadCapacityUnits</i> per second.</p>\n  "
                  },
                  "WriteCapacityUnits": {
                    "shape_name": "PositiveLongObject",
                    "type": "long",
                    "min_length": 1,
                    "documentation": "\n    <p>The maximum number of writes consumed per second before Amazon DynamoDB returns a\n        <i>ThrottlingException</i>.</p>\n  "
                  }
                },
                "documentation": "\n    <p>The provisioned throughput settings for the table, consisting of read and write\n      capacity units, along with data about increases and decreases.</p>\n  "
              },
              "TableSizeBytes": {
                "shape_name": "Long",
                "type": "long",
                "documentation": "\n    <p>The total size of the specified table, in bytes. Amazon DynamoDB updates this value approximately every six\n      hours. Recent changes might not be reflected in this value.\n      </p>\n  "
              },
              "ItemCount": {
                "shape_name": "Long",
                "type": "long",
                "documentation": "\n    <p>The number of items in the specified table. Amazon DynamoDB updates this value approximately every six\n      hours. Recent changes might not be reflected in this value.\n      </p>\n  "
              },
              "LocalSecondaryIndexes": {
                "shape_name": "LocalSecondaryIndexDescriptionList",
                "type": "list",
                "members": {
                  "shape_name": "LocalSecondaryIndexDescription",
                  "type": "structure",
                  "members": {
                    "IndexName": {
                      "shape_name": "IndexName",
                      "type": "string",
                      "min_length": 3,
                      "max_length": 255,
                      "pattern": "[a-zA-Z0-9_.-]+",
                      "documentation": "\n    <p>Represents the name of the local secondary index.</p>\n  "
                    },
                    "KeySchema": {
                      "shape_name": "KeySchema",
                      "type": "list",
                      "members": {
                        "shape_name": "KeySchemaElement",
                        "type": "structure",
                        "members": {
                          "AttributeName": {
                            "shape_name": "KeySchemaAttributeName",
                            "type": "string",
                            "min_length": 1,
                            "max_length": 255,
                            "documentation": "\n    <p>The name of a key attribute.</p>\n  ",
                            "required": true
                          },
                          "KeyType": {
                            "shape_name": "KeyType",
                            "type": "string",
                            "enum": [
                              "HASH",
                              "RANGE"
                            ],
                            "documentation": "\n    <p>The attribute data, consisting of the data type and the attribute value\n      itself.</p>\n  ",
                            "required": true
                          }
                        },
                        "documentation": "\n    <p>Represents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or\n      the key attributes of an index.</p>\n  "
                      },
                      "min_length": 1,
                      "max_length": 2,
                      "documentation": "The complete index\n    key schema, which consists of one or more pairs of attribute names and key types\n      (<code>HASH</code> or <code>RANGE</code>). "
                    },
                    "Projection": {
                      "shape_name": "Projection",
                      "type": "structure",
                      "members": {
                        "ProjectionType": {
                          "shape_name": "ProjectionType",
                          "type": "string",
                          "enum": [
                            "ALL",
                            "KEYS_ONLY",
                            "INCLUDE"
                          ],
                          "documentation": "\n    <p>The set of attributes that are projected into the index:</p>\n    <ul>\n      <li>\n        <p><code>KEYS_ONLY</code> - Only the index and primary keys are projected into the\n          index.</p>\n      </li>\n      <li>\n        <p><code>INCLUDE</code> - Only the specified table attributes are projected into the\n          index. The list of projected attributes are\n          in <i>NonKeyAttributes</i>.</p>\n      </li>\n      <li>\n        <p><code>ALL</code> - All of the table attributes are projected into the\n          index.</p>\n      </li>\n    </ul>\n  "
                        },
                        "NonKeyAttributes": {
                          "shape_name": "NonKeyAttributeNameList",
                          "type": "list",
                          "members": {
                            "shape_name": "NonKeyAttributeName",
                            "type": "string",
                            "min_length": 1,
                            "max_length": 255,
                            "documentation": null
                          },
                          "min_length": 1,
                          "max_length": 20,
                          "documentation": "\n    <p>Represents the non-key attribute names which will be projected into the index.</p>\n    <p>For local secondary indexes, the total count of <i>NonKeyAttributes</i> summed across all of the local secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.</p>\n  "
                        }
                      },
                      "documentation": "\n    <p>Represents attributes that are copied (projected) from the table into an index. These are in\n      addition to the primary key attributes and index key attributes, which are automatically\n      projected.</p>\n  "
                    },
                    "IndexSizeBytes": {
                      "shape_name": "Long",
                      "type": "long",
                      "documentation": "\n    <p>The total size of the specified index, in bytes. Amazon DynamoDB updates this value approximately every six\n      hours. Recent changes might not be reflected in this value.\n      </p>\n  "
                    },
                    "ItemCount": {
                      "shape_name": "Long",
                      "type": "long",
                      "documentation": "\n    <p>The number of items in the specified index. Amazon DynamoDB updates this value approximately every six\n      hours. Recent changes might not be reflected in this value.\n      </p>\n  "
                    }
                  },
                  "documentation": "\n    <p>Represents the properties of a local secondary index.</p>\n  "
                },
                "documentation": "\n    <p>Represents one or more local secondary indexes on the table. Each index is scoped to a given\n      hash key value. Tables with one or more local secondary indexes are subject to an item\n      collection size limit, where the amount of data within a given item collection cannot exceed\n      10 GB. Each element is composed of:</p>\n    <ul>\n      <li>\n        <p><i>IndexName</i> - The name of the local secondary index.</p>\n      </li>\n      <li>\n        <p><i>KeySchema</i> - Specifies the complete index key schema. The attribute names in the\n          key schema must be between 1 and 255 characters (inclusive). The key schema must begin with the same hash key attribute as the table.</p>\n      </li>\n      <li>         <p><i>Projection</i> - Specifies\n          attributes that are copied (projected) from the table into the index. These are in\n          addition to the primary key attributes and index key\n          attributes, which are automatically projected. Each\n          attribute specification is composed of:</p>\n        <ul>\n          <li>\n            <p><i>ProjectionType</i> - One\n              of the following:</p>\n            <ul>\n              <li>\n                <p><code>KEYS_ONLY</code> - Only the index and primary keys are projected into the\n                  index.</p>\n              </li>\n              <li>\n                <p><code>INCLUDE</code> - Only the specified table attributes are projected into the\n                  index. The list of projected attributes are\n                  in <i>NonKeyAttributes</i>.</p>\n              </li>\n              <li>\n                <p><code>ALL</code> - All of the table attributes are projected into the\n                  index.</p>\n              </li>\n            </ul>\n          </li>\n          <li>\n            <p><i>NonKeyAttributes</i> - A list of one or more non-key attribute names that are \n              projected into the secondary index. The total count of attributes specified in <i>NonKeyAttributes</i>, summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.</p>\n          </li>\n        </ul>\n </li>\n      <li>\n        <p><i>IndexSizeBytes</i> - Represents the total size of the index, in bytes. Amazon DynamoDB updates\n          this value approximately every six hours. Recent changes might not be reflected in this\n          value.</p>\n</li>\n      <li>\n        <p><i>ItemCount</i> - Represents the number of items in the index. Amazon DynamoDB updates this value\n          approximately every six hours. Recent changes might not be reflected in this value.</p>\n      </li>\n    </ul>\n    <p>If the table is in the <code>DELETING</code> state, no information about indexes will be returned.</p>\n  "
              },
              "GlobalSecondaryIndexes": {
                "shape_name": "GlobalSecondaryIndexDescriptionList",
                "type": "list",
                "members": {
                  "shape_name": "GlobalSecondaryIndexDescription",
                  "type": "structure",
                  "members": {
                    "IndexName": {
                      "shape_name": "IndexName",
                      "type": "string",
                      "min_length": 3,
                      "max_length": 255,
                      "pattern": "[a-zA-Z0-9_.-]+",
                      "documentation": "\n    <p>The name of the global secondary index.</p>\n  "
                    },
                    "KeySchema": {
                      "shape_name": "KeySchema",
                      "type": "list",
                      "members": {
                        "shape_name": "KeySchemaElement",
                        "type": "structure",
                        "members": {
                          "AttributeName": {
                            "shape_name": "KeySchemaAttributeName",
                            "type": "string",
                            "min_length": 1,
                            "max_length": 255,
                            "documentation": "\n    <p>The name of a key attribute.</p>\n  ",
                            "required": true
                          },
                          "KeyType": {
                            "shape_name": "KeyType",
                            "type": "string",
                            "enum": [
                              "HASH",
                              "RANGE"
                            ],
                            "documentation": "\n    <p>The attribute data, consisting of the data type and the attribute value\n      itself.</p>\n  ",
                            "required": true
                          }
                        },
                        "documentation": "\n    <p>Represents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or\n      the key attributes of an index.</p>\n  "
                      },
                      "min_length": 1,
                      "max_length": 2,
                      "documentation": "\n    <p>The complete key schema for the global secondary index, consisting of one or more pairs of attribute names and key types\n      (<code>HASH</code> or <code>RANGE</code>).</p> \n  "
                    },
                    "Projection": {
                      "shape_name": "Projection",
                      "type": "structure",
                      "members": {
                        "ProjectionType": {
                          "shape_name": "ProjectionType",
                          "type": "string",
                          "enum": [
                            "ALL",
                            "KEYS_ONLY",
                            "INCLUDE"
                          ],
                          "documentation": "\n    <p>The set of attributes that are projected into the index:</p>\n    <ul>\n      <li>\n        <p><code>KEYS_ONLY</code> - Only the index and primary keys are projected into the\n          index.</p>\n      </li>\n      <li>\n        <p><code>INCLUDE</code> - Only the specified table attributes are projected into the\n          index. The list of projected attributes are\n          in <i>NonKeyAttributes</i>.</p>\n      </li>\n      <li>\n        <p><code>ALL</code> - All of the table attributes are projected into the\n          index.</p>\n      </li>\n    </ul>\n  "
                        },
                        "NonKeyAttributes": {
                          "shape_name": "NonKeyAttributeNameList",
                          "type": "list",
                          "members": {
                            "shape_name": "NonKeyAttributeName",
                            "type": "string",
                            "min_length": 1,
                            "max_length": 255,
                            "documentation": null
                          },
                          "min_length": 1,
                          "max_length": 20,
                          "documentation": "\n    <p>Represents the non-key attribute names which will be projected into the index.</p>\n    <p>For local secondary indexes, the total count of <i>NonKeyAttributes</i> summed across all of the local secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.</p>\n  "
                        }
                      },
                      "documentation": "\n    <p>Represents attributes that are copied (projected) from the table into an index. These are in\n      addition to the primary key attributes and index key attributes, which are automatically\n      projected.</p>\n  "
                    },
                    "IndexStatus": {
                      "shape_name": "IndexStatus",
                      "type": "string",
                      "enum": [
                        "CREATING",
                        "UPDATING",
                        "DELETING",
                        "ACTIVE"
                      ],
                      "documentation": "\n    <p>The current state of the global secondary index:</p>\n    <ul>\n      <li>\n        <p><i>CREATING</i> - The index is being created, as the result of a <i>CreateTable</i> or \n          <i>UpdateTable</i> operation.</p>\n      </li>\n      <li>\n        <p><i>UPDATING</i> - The index is being updated, as the result of a <i>CreateTable</i> or \n          <i>UpdateTable</i> operation.</p>\n      </li>\n      <li>\n        <p><i>DELETING</i> - The index is being deleted, as the result of a <i>DeleteTable</i>\n          operation.</p>\n      </li>\n      <li>\n        <p><i>ACTIVE</i> - The index is ready for use.</p>\n      </li>\n    </ul>\n  "
                    },
                    "ProvisionedThroughput": {
                      "shape_name": "ProvisionedThroughputDescription",
                      "type": "structure",
                      "members": {
                        "LastIncreaseDateTime": {
                          "shape_name": "Date",
                          "type": "timestamp",
                          "documentation": "\n    <p>The date and time of the last provisioned throughput increase for this table.</p>\n  "
                        },
                        "LastDecreaseDateTime": {
                          "shape_name": "Date",
                          "type": "timestamp",
                          "documentation": "\n    <p>The date and time of the last provisioned throughput decrease for this table.</p>\n  "
                        },
                        "NumberOfDecreasesToday": {
                          "shape_name": "PositiveLongObject",
                          "type": "long",
                          "min_length": 1,
                          "documentation": "\n    <p>The number of provisioned throughput decreases for this table during this UTC calendar day.\n      For current maximums on provisioned throughput decreases, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\">Limits</a> in the Amazon DynamoDB Developer Guide.</p>\n  "
                        },
                        "ReadCapacityUnits": {
                          "shape_name": "PositiveLongObject",
                          "type": "long",
                          "min_length": 1,
                          "documentation": "\n    <p>The maximum number of strongly consistent reads consumed per second before Amazon DynamoDB returns a\n        <i>ThrottlingException</i>. Eventually consistent reads require less effort than strongly\n      consistent reads, so a setting of 50 <i>ReadCapacityUnits</i> per second provides 100\n      eventually consistent <i>ReadCapacityUnits</i> per second.</p>\n  "
                        },
                        "WriteCapacityUnits": {
                          "shape_name": "PositiveLongObject",
                          "type": "long",
                          "min_length": 1,
                          "documentation": "\n    <p>The maximum number of writes consumed per second before Amazon DynamoDB returns a\n        <i>ThrottlingException</i>.</p>\n  "
                        }
                      },
                      "documentation": "\n    <p>Represents the provisioned throughput settings for the table, consisting of read and write\n      capacity units, along with data about increases and decreases.</p>\n  "
                    },
                    "IndexSizeBytes": {
                      "shape_name": "Long",
                      "type": "long",
                      "documentation": "\n    <p>The total size of the specified index, in bytes. Amazon DynamoDB updates this value approximately every six\n      hours. Recent changes might not be reflected in this value.\n      </p>\n  "
                    },
                    "ItemCount": {
                      "shape_name": "Long",
                      "type": "long",
                      "documentation": "\n    <p>The number of items in the specified index. Amazon DynamoDB updates this value approximately every six\n      hours. Recent changes might not be reflected in this value.\n      </p>\n  "
                    }
                  },
                  "documentation": "\n    <p>Represents the properties of a global secondary index.</p>\n  "
                },
                "documentation": "\n    <p>The global secondary indexes, if any, on the table. Each index is scoped to a given\n      hash key value. Each element is composed of:</p>\n    <ul>\n      <li>\n        <p><i>IndexName</i> - The name of the global secondary index.</p>\n      </li>\n      <li>\n        <p><i>KeySchema</i> - Specifies the complete index key schema. The attribute names in the\n          key schema must be between 1 and 255 characters (inclusive). The key schema must begin with the same hash key attribute as the table.</p>\n      </li>\n      <li>         <p><i>Projection</i> - Specifies\n          attributes that are copied (projected) from the table into the index. These are in\n          addition to the primary key attributes and index key\n          attributes, which are automatically projected. Each\n          attribute specification is composed of:</p>\n        <ul>\n          <li>\n            <p><i>ProjectionType</i> - One\n              of the following:</p>\n            <ul>\n              <li>\n                <p><code>KEYS_ONLY</code> - Only the index and primary keys are projected into the\n                  index.</p>\n              </li>\n              <li>\n                <p><code>INCLUDE</code> - Only the specified table attributes are projected into the\n                  index. The list of projected attributes are\n                  in <i>NonKeyAttributes</i>.</p>\n              </li>\n              <li>\n                <p><code>ALL</code> - All of the table attributes are projected into the\n                  index.</p>\n              </li>\n            </ul>\n          </li>\n          <li>\n            <p><i>NonKeyAttributes</i> - A list of one or more non-key attribute names that are \n              projected into the secondary index. The total count of attributes specified in <i>NonKeyAttributes</i>, summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.</p>\n          </li>\n        </ul>\n </li>\n      <li>\n        <p><i>ProvisionedThroughput</i> - The provisioned throughput settings for the global secondary index,\n          consisting of read and write capacity units, along with data about increases and\n          decreases. </p>\n      </li>\n      <li>\n        <p><i>IndexSizeBytes</i> - The total size of the global secondary index, in bytes. Amazon DynamoDB updates this value approximately every six\n      hours. Recent changes might not be reflected in this value.\n      </p>\n</li>\n      <li>\n        <p><i>ItemCount</i> - The number of items in the global secondary index. Amazon DynamoDB updates this value approximately every six\n      hours. Recent changes might not be reflected in this value.\n      </p>\n      </li>\n    </ul>\n    <p>If the table is in the <code>DELETING</code> state, no information about indexes will be returned.</p>\n  "
              }
            },
            "documentation": "\n    <p>Represents the properties of a table.</p>\n  "
          }
        },
        "documentation": "\n    <p>Represents the output of a <i>DeleteTable</i> operation.</p>\n  "
      },
      "errors": [
        {
          "shape_name": "ResourceInUseException",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>The resource which is being attempted to be changed is in use.</p>\n  "
            }
          },
          "documentation": "\n    <p>The operation conflicts with the resource's availability. For example, you attempted to\n      recreate an existing table, or tried to delete a table currently in the <code>CREATING</code>\n      state.</p>\n  "
        },
        {
          "shape_name": "ResourceNotFoundException",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>The resource which is being requested does not exist.</p>\n  "
            }
          },
          "documentation": "\n    <p>The operation tried to access a nonexistent table or index. The resource may not be specified correctly, or its status may not be <code>ACTIVE</code>.</p>\n  "
        },
        {
          "shape_name": "LimitExceededException",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>Too many operations for a given subscriber.</p>\n  "
            }
          },
          "documentation": "\n    <p>The number of concurrent table requests (cumulative number of tables in the\n        <code>CREATING</code>, <code>DELETING</code> or <code>UPDATING</code> state) exceeds the\n      maximum allowed of 10.</p>\n    <p>Also, for tables with secondary indexes, only one of those tables can be in the <code>CREATING</code> state at any point in time. Do not attempt to create more than one such table simultaneously.</p> \n      <p>The total limit of tables in the <code>ACTIVE</code> state is 250.</p>\n  "
        },
        {
          "shape_name": "InternalServerError",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>The server encountered an internal error trying to fulfill the request.</p>\n  "
            }
          },
          "documentation": "\n    <p>An error occurred on the server side.</p>\n  "
        }
      ],
      "documentation": "\n    <p>The <i>DeleteTable</i> operation deletes a table and all of its items. After a\n        <i>DeleteTable</i> request, the specified table is in the <code>DELETING</code> state until\n      Amazon DynamoDB completes the deletion. If the table is in the <code>ACTIVE</code> state, you can delete\n      it. If a table is in <code>CREATING</code> or <code>UPDATING</code> states, then Amazon DynamoDB returns\n      a <i>ResourceInUseException</i>. If the specified table does not exist, Amazon DynamoDB returns a\n        <i>ResourceNotFoundException</i>. If table is already in the <code>DELETING</code> state, no\n      error is returned. </p>\n    <note>\n      <p>Amazon DynamoDB might continue to accept data read and write operations, such as <i>GetItem</i> and\n          <i>PutItem</i>, on a table in the <code>DELETING</code> state until the table deletion is\n        complete.</p>\n    </note>\n     <p>When you delete a table, any indexes on that table are also deleted.</p>\n    \n    <p>Use the <i>DescribeTable</i> API to check the status of the table. </p>\n\n    <examples>\n      <example>\n        <name>Delete a Table</name>\n        <description>This example deletes the Reply table.</description>\n        <request><![CDATA[\nPOST / HTTP/1.1\nHost: dynamodb.<region>.<domain>;\nX-Amz-Date: <Date>\nAuthorization: AWS4-HMAC-SHA256 Credential=<Credential>, SignedHeaders=content-length;content-type;host;user-agent;x-amz-content-sha256;x-amz-date;x-amz-target, Signature=<Signature>\nUser-Agent: <UserAgentString>\nx-amz-content-sha256: <PayloadHash>\nContent-Type: application/x-amz-json-1.0\nContent-Length: <PayloadSizeBytes>     \nConnection: Keep-Alive]]>\nX-Amz-Target: DynamoDB_20120810.DeleteTable \n\n{\n    \"TableName\": \"Reply\"\n}\n        </request>\n        <response><![CDATA[\nHTTP/1.1 200 OK\nx-amzn-RequestId: <RequestId> \nx-amz-crc32: <Checksum>\nContent-Type: application/x-amz-json-1.0\nContent-Length: <PayloadSizeBytes>\nDate: <Date>\n]]>\n{\n    \"TableDescription\": {\n        \"ItemCount\": 0,\n        \"ProvisionedThroughput\": {\n            \"NumberOfDecreasesToday\": 0,\n            \"ReadCapacityUnits\": 5,\n            \"WriteCapacityUnits\": 5\n        },\n        \"TableName\": \"Reply\",\n        \"TableSizeBytes\": 0,\n        \"TableStatus\": \"DELETING\"\n    }\n}\n        </response>\n      </example>\n    </examples>\n  "
    },
    "DescribeTable": {
      "name": "DescribeTable",
      "input": {
        "shape_name": "DescribeTableInput",
        "type": "structure",
        "members": {
          "TableName": {
            "shape_name": "TableName",
            "type": "string",
            "min_length": 3,
            "max_length": 255,
            "pattern": "[a-zA-Z0-9_.-]+",
            "documentation": "\n    <p> The name of the table to describe.</p>\n  ",
            "required": true
          }
        },
        "documentation": "\n    <p>Represents the input of a <i>DescribeTable</i> operation.</p>\n  "
      },
      "output": {
        "shape_name": "DescribeTableOutput",
        "type": "structure",
        "members": {
          "Table": {
            "shape_name": "TableDescription",
            "type": "structure",
            "members": {
              "AttributeDefinitions": {
                "shape_name": "AttributeDefinitions",
                "type": "list",
                "members": {
                  "shape_name": "AttributeDefinition",
                  "type": "structure",
                  "members": {
                    "AttributeName": {
                      "shape_name": "KeySchemaAttributeName",
                      "type": "string",
                      "min_length": 1,
                      "max_length": 255,
                      "documentation": "\n    <p>A name for the attribute.</p>\n  ",
                      "required": true
                    },
                    "AttributeType": {
                      "shape_name": "ScalarAttributeType",
                      "type": "string",
                      "enum": [
                        "S",
                        "N",
                        "B"
                      ],
                      "documentation": "\n    <p>The data type for the attribute.</p>\n  ",
                      "required": true
                    }
                  },
                  "documentation": "\n    <p>Represents an attribute for describing the key schema for the table and indexes.</p>\n  "
                },
                "documentation": "\n    <p>An array of <i>AttributeDefinition</i> objects.  Each of these objects describes one attribute in the table and index key schema.</p>\n      <p>Each <i>AttributeDefinition</i> object in this array is composed of:</p>\n    <ul>\n      <li>\n        <p><i>AttributeName</i> - The name of the attribute.</p>\n      </li>\n      <li>\n        <p><i>AttributeType</i> - The data type for the attribute.</p>\n      </li>\n    </ul>\n  "
              },
              "TableName": {
                "shape_name": "TableName",
                "type": "string",
                "min_length": 3,
                "max_length": 255,
                "pattern": "[a-zA-Z0-9_.-]+",
                "documentation": "\n    <p>The name of the table.</p>\n  "
              },
              "KeySchema": {
                "shape_name": "KeySchema",
                "type": "list",
                "members": {
                  "shape_name": "KeySchemaElement",
                  "type": "structure",
                  "members": {
                    "AttributeName": {
                      "shape_name": "KeySchemaAttributeName",
                      "type": "string",
                      "min_length": 1,
                      "max_length": 255,
                      "documentation": "\n    <p>The name of a key attribute.</p>\n  ",
                      "required": true
                    },
                    "KeyType": {
                      "shape_name": "KeyType",
                      "type": "string",
                      "enum": [
                        "HASH",
                        "RANGE"
                      ],
                      "documentation": "\n    <p>The attribute data, consisting of the data type and the attribute value\n      itself.</p>\n  ",
                      "required": true
                    }
                  },
                  "documentation": "\n    <p>Represents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or\n      the key attributes of an index.</p>\n  "
                },
                "min_length": 1,
                "max_length": 2,
                "documentation": "\n    <p>The primary key structure for the table. Each <i>KeySchemaElement</i> consists of:</p>\n    <ul>\n      <li>\n        <p><i>AttributeName</i> - The name of the attribute.</p>\n      </li>\n      <li>\n        <p><i>KeyType</i> - The key type for the attribute. Can be either <code>HASH</code> or\n            <code>RANGE</code>.</p>\n      </li>\n    </ul>\n    <p>For more information about primary keys, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey\">Primary Key</a> in the Amazon DynamoDB Developer Guide.</p>\n  "
              },
              "TableStatus": {
                "shape_name": "TableStatus",
                "type": "string",
                "enum": [
                  "CREATING",
                  "UPDATING",
                  "DELETING",
                  "ACTIVE"
                ],
                "documentation": "\n    <p>The current state of the table:</p>\n    <ul>\n      <li>\n        <p><i>CREATING</i> - The table is being created, as the result of a <i>CreateTable</i>\n          operation.</p>\n      </li>\n      <li>\n        <p><i>UPDATING</i> - The table is being updated, as the result of an <i>UpdateTable</i>\n          operation.</p>\n      </li>\n      <li>\n        <p><i>DELETING</i> - The table is being deleted, as the result of a <i>DeleteTable</i>\n          operation.</p>\n      </li>\n      <li>\n        <p><i>ACTIVE</i> - The table is ready for use.</p>\n      </li>\n    </ul>\n  "
              },
              "CreationDateTime": {
                "shape_name": "Date",
                "type": "timestamp",
                "documentation": "\n    <p>The date and time when the table was created, in <a href=\"http://www.epochconverter.com/\">UNIX epoch time</a> format.</p>\n  "
              },
              "ProvisionedThroughput": {
                "shape_name": "ProvisionedThroughputDescription",
                "type": "structure",
                "members": {
                  "LastIncreaseDateTime": {
                    "shape_name": "Date",
                    "type": "timestamp",
                    "documentation": "\n    <p>The date and time of the last provisioned throughput increase for this table.</p>\n  "
                  },
                  "LastDecreaseDateTime": {
                    "shape_name": "Date",
                    "type": "timestamp",
                    "documentation": "\n    <p>The date and time of the last provisioned throughput decrease for this table.</p>\n  "
                  },
                  "NumberOfDecreasesToday": {
                    "shape_name": "PositiveLongObject",
                    "type": "long",
                    "min_length": 1,
                    "documentation": "\n    <p>The number of provisioned throughput decreases for this table during this UTC calendar day.\n      For current maximums on provisioned throughput decreases, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\">Limits</a> in the Amazon DynamoDB Developer Guide.</p>\n  "
                  },
                  "ReadCapacityUnits": {
                    "shape_name": "PositiveLongObject",
                    "type": "long",
                    "min_length": 1,
                    "documentation": "\n    <p>The maximum number of strongly consistent reads consumed per second before Amazon DynamoDB returns a\n        <i>ThrottlingException</i>. Eventually consistent reads require less effort than strongly\n      consistent reads, so a setting of 50 <i>ReadCapacityUnits</i> per second provides 100\n      eventually consistent <i>ReadCapacityUnits</i> per second.</p>\n  "
                  },
                  "WriteCapacityUnits": {
                    "shape_name": "PositiveLongObject",
                    "type": "long",
                    "min_length": 1,
                    "documentation": "\n    <p>The maximum number of writes consumed per second before Amazon DynamoDB returns a\n        <i>ThrottlingException</i>.</p>\n  "
                  }
                },
                "documentation": "\n    <p>The provisioned throughput settings for the table, consisting of read and write\n      capacity units, along with data about increases and decreases.</p>\n  "
              },
              "TableSizeBytes": {
                "shape_name": "Long",
                "type": "long",
                "documentation": "\n    <p>The total size of the specified table, in bytes. Amazon DynamoDB updates this value approximately every six\n      hours. Recent changes might not be reflected in this value.\n      </p>\n  "
              },
              "ItemCount": {
                "shape_name": "Long",
                "type": "long",
                "documentation": "\n    <p>The number of items in the specified table. Amazon DynamoDB updates this value approximately every six\n      hours. Recent changes might not be reflected in this value.\n      </p>\n  "
              },
              "LocalSecondaryIndexes": {
                "shape_name": "LocalSecondaryIndexDescriptionList",
                "type": "list",
                "members": {
                  "shape_name": "LocalSecondaryIndexDescription",
                  "type": "structure",
                  "members": {
                    "IndexName": {
                      "shape_name": "IndexName",
                      "type": "string",
                      "min_length": 3,
                      "max_length": 255,
                      "pattern": "[a-zA-Z0-9_.-]+",
                      "documentation": "\n    <p>Represents the name of the local secondary index.</p>\n  "
                    },
                    "KeySchema": {
                      "shape_name": "KeySchema",
                      "type": "list",
                      "members": {
                        "shape_name": "KeySchemaElement",
                        "type": "structure",
                        "members": {
                          "AttributeName": {
                            "shape_name": "KeySchemaAttributeName",
                            "type": "string",
                            "min_length": 1,
                            "max_length": 255,
                            "documentation": "\n    <p>The name of a key attribute.</p>\n  ",
                            "required": true
                          },
                          "KeyType": {
                            "shape_name": "KeyType",
                            "type": "string",
                            "enum": [
                              "HASH",
                              "RANGE"
                            ],
                            "documentation": "\n    <p>The attribute data, consisting of the data type and the attribute value\n      itself.</p>\n  ",
                            "required": true
                          }
                        },
                        "documentation": "\n    <p>Represents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or\n      the key attributes of an index.</p>\n  "
                      },
                      "min_length": 1,
                      "max_length": 2,
                      "documentation": "The complete index\n    key schema, which consists of one or more pairs of attribute names and key types\n      (<code>HASH</code> or <code>RANGE</code>). "
                    },
                    "Projection": {
                      "shape_name": "Projection",
                      "type": "structure",
                      "members": {
                        "ProjectionType": {
                          "shape_name": "ProjectionType",
                          "type": "string",
                          "enum": [
                            "ALL",
                            "KEYS_ONLY",
                            "INCLUDE"
                          ],
                          "documentation": "\n    <p>The set of attributes that are projected into the index:</p>\n    <ul>\n      <li>\n        <p><code>KEYS_ONLY</code> - Only the index and primary keys are projected into the\n          index.</p>\n      </li>\n      <li>\n        <p><code>INCLUDE</code> - Only the specified table attributes are projected into the\n          index. The list of projected attributes are\n          in <i>NonKeyAttributes</i>.</p>\n      </li>\n      <li>\n        <p><code>ALL</code> - All of the table attributes are projected into the\n          index.</p>\n      </li>\n    </ul>\n  "
                        },
                        "NonKeyAttributes": {
                          "shape_name": "NonKeyAttributeNameList",
                          "type": "list",
                          "members": {
                            "shape_name": "NonKeyAttributeName",
                            "type": "string",
                            "min_length": 1,
                            "max_length": 255,
                            "documentation": null
                          },
                          "min_length": 1,
                          "max_length": 20,
                          "documentation": "\n    <p>Represents the non-key attribute names which will be projected into the index.</p>\n    <p>For local secondary indexes, the total count of <i>NonKeyAttributes</i> summed across all of the local secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.</p>\n  "
                        }
                      },
                      "documentation": "\n    <p>Represents attributes that are copied (projected) from the table into an index. These are in\n      addition to the primary key attributes and index key attributes, which are automatically\n      projected.</p>\n  "
                    },
                    "IndexSizeBytes": {
                      "shape_name": "Long",
                      "type": "long",
                      "documentation": "\n    <p>The total size of the specified index, in bytes. Amazon DynamoDB updates this value approximately every six\n      hours. Recent changes might not be reflected in this value.\n      </p>\n  "
                    },
                    "ItemCount": {
                      "shape_name": "Long",
                      "type": "long",
                      "documentation": "\n    <p>The number of items in the specified index. Amazon DynamoDB updates this value approximately every six\n      hours. Recent changes might not be reflected in this value.\n      </p>\n  "
                    }
                  },
                  "documentation": "\n    <p>Represents the properties of a local secondary index.</p>\n  "
                },
                "documentation": "\n    <p>Represents one or more local secondary indexes on the table. Each index is scoped to a given\n      hash key value. Tables with one or more local secondary indexes are subject to an item\n      collection size limit, where the amount of data within a given item collection cannot exceed\n      10 GB. Each element is composed of:</p>\n    <ul>\n      <li>\n        <p><i>IndexName</i> - The name of the local secondary index.</p>\n      </li>\n      <li>\n        <p><i>KeySchema</i> - Specifies the complete index key schema. The attribute names in the\n          key schema must be between 1 and 255 characters (inclusive). The key schema must begin with the same hash key attribute as the table.</p>\n      </li>\n      <li>         <p><i>Projection</i> - Specifies\n          attributes that are copied (projected) from the table into the index. These are in\n          addition to the primary key attributes and index key\n          attributes, which are automatically projected. Each\n          attribute specification is composed of:</p>\n        <ul>\n          <li>\n            <p><i>ProjectionType</i> - One\n              of the following:</p>\n            <ul>\n              <li>\n                <p><code>KEYS_ONLY</code> - Only the index and primary keys are projected into the\n                  index.</p>\n              </li>\n              <li>\n                <p><code>INCLUDE</code> - Only the specified table attributes are projected into the\n                  index. The list of projected attributes are\n                  in <i>NonKeyAttributes</i>.</p>\n              </li>\n              <li>\n                <p><code>ALL</code> - All of the table attributes are projected into the\n                  index.</p>\n              </li>\n            </ul>\n          </li>\n          <li>\n            <p><i>NonKeyAttributes</i> - A list of one or more non-key attribute names that are \n              projected into the secondary index. The total count of attributes specified in <i>NonKeyAttributes</i>, summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.</p>\n          </li>\n        </ul>\n </li>\n      <li>\n        <p><i>IndexSizeBytes</i> - Represents the total size of the index, in bytes. Amazon DynamoDB updates\n          this value approximately every six hours. Recent changes might not be reflected in this\n          value.</p>\n</li>\n      <li>\n        <p><i>ItemCount</i> - Represents the number of items in the index. Amazon DynamoDB updates this value\n          approximately every six hours. Recent changes might not be reflected in this value.</p>\n      </li>\n    </ul>\n    <p>If the table is in the <code>DELETING</code> state, no information about indexes will be returned.</p>\n  "
              },
              "GlobalSecondaryIndexes": {
                "shape_name": "GlobalSecondaryIndexDescriptionList",
                "type": "list",
                "members": {
                  "shape_name": "GlobalSecondaryIndexDescription",
                  "type": "structure",
                  "members": {
                    "IndexName": {
                      "shape_name": "IndexName",
                      "type": "string",
                      "min_length": 3,
                      "max_length": 255,
                      "pattern": "[a-zA-Z0-9_.-]+",
                      "documentation": "\n    <p>The name of the global secondary index.</p>\n  "
                    },
                    "KeySchema": {
                      "shape_name": "KeySchema",
                      "type": "list",
                      "members": {
                        "shape_name": "KeySchemaElement",
                        "type": "structure",
                        "members": {
                          "AttributeName": {
                            "shape_name": "KeySchemaAttributeName",
                            "type": "string",
                            "min_length": 1,
                            "max_length": 255,
                            "documentation": "\n    <p>The name of a key attribute.</p>\n  ",
                            "required": true
                          },
                          "KeyType": {
                            "shape_name": "KeyType",
                            "type": "string",
                            "enum": [
                              "HASH",
                              "RANGE"
                            ],
                            "documentation": "\n    <p>The attribute data, consisting of the data type and the attribute value\n      itself.</p>\n  ",
                            "required": true
                          }
                        },
                        "documentation": "\n    <p>Represents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or\n      the key attributes of an index.</p>\n  "
                      },
                      "min_length": 1,
                      "max_length": 2,
                      "documentation": "\n    <p>The complete key schema for the global secondary index, consisting of one or more pairs of attribute names and key types\n      (<code>HASH</code> or <code>RANGE</code>).</p> \n  "
                    },
                    "Projection": {
                      "shape_name": "Projection",
                      "type": "structure",
                      "members": {
                        "ProjectionType": {
                          "shape_name": "ProjectionType",
                          "type": "string",
                          "enum": [
                            "ALL",
                            "KEYS_ONLY",
                            "INCLUDE"
                          ],
                          "documentation": "\n    <p>The set of attributes that are projected into the index:</p>\n    <ul>\n      <li>\n        <p><code>KEYS_ONLY</code> - Only the index and primary keys are projected into the\n          index.</p>\n      </li>\n      <li>\n        <p><code>INCLUDE</code> - Only the specified table attributes are projected into the\n          index. The list of projected attributes are\n          in <i>NonKeyAttributes</i>.</p>\n      </li>\n      <li>\n        <p><code>ALL</code> - All of the table attributes are projected into the\n          index.</p>\n      </li>\n    </ul>\n  "
                        },
                        "NonKeyAttributes": {
                          "shape_name": "NonKeyAttributeNameList",
                          "type": "list",
                          "members": {
                            "shape_name": "NonKeyAttributeName",
                            "type": "string",
                            "min_length": 1,
                            "max_length": 255,
                            "documentation": null
                          },
                          "min_length": 1,
                          "max_length": 20,
                          "documentation": "\n    <p>Represents the non-key attribute names which will be projected into the index.</p>\n    <p>For local secondary indexes, the total count of <i>NonKeyAttributes</i> summed across all of the local secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.</p>\n  "
                        }
                      },
                      "documentation": "\n    <p>Represents attributes that are copied (projected) from the table into an index. These are in\n      addition to the primary key attributes and index key attributes, which are automatically\n      projected.</p>\n  "
                    },
                    "IndexStatus": {
                      "shape_name": "IndexStatus",
                      "type": "string",
                      "enum": [
                        "CREATING",
                        "UPDATING",
                        "DELETING",
                        "ACTIVE"
                      ],
                      "documentation": "\n    <p>The current state of the global secondary index:</p>\n    <ul>\n      <li>\n        <p><i>CREATING</i> - The index is being created, as the result of a <i>CreateTable</i> or \n          <i>UpdateTable</i> operation.</p>\n      </li>\n      <li>\n        <p><i>UPDATING</i> - The index is being updated, as the result of a <i>CreateTable</i> or \n          <i>UpdateTable</i> operation.</p>\n      </li>\n      <li>\n        <p><i>DELETING</i> - The index is being deleted, as the result of a <i>DeleteTable</i>\n          operation.</p>\n      </li>\n      <li>\n        <p><i>ACTIVE</i> - The index is ready for use.</p>\n      </li>\n    </ul>\n  "
                    },
                    "ProvisionedThroughput": {
                      "shape_name": "ProvisionedThroughputDescription",
                      "type": "structure",
                      "members": {
                        "LastIncreaseDateTime": {
                          "shape_name": "Date",
                          "type": "timestamp",
                          "documentation": "\n    <p>The date and time of the last provisioned throughput increase for this table.</p>\n  "
                        },
                        "LastDecreaseDateTime": {
                          "shape_name": "Date",
                          "type": "timestamp",
                          "documentation": "\n    <p>The date and time of the last provisioned throughput decrease for this table.</p>\n  "
                        },
                        "NumberOfDecreasesToday": {
                          "shape_name": "PositiveLongObject",
                          "type": "long",
                          "min_length": 1,
                          "documentation": "\n    <p>The number of provisioned throughput decreases for this table during this UTC calendar day.\n      For current maximums on provisioned throughput decreases, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\">Limits</a> in the Amazon DynamoDB Developer Guide.</p>\n  "
                        },
                        "ReadCapacityUnits": {
                          "shape_name": "PositiveLongObject",
                          "type": "long",
                          "min_length": 1,
                          "documentation": "\n    <p>The maximum number of strongly consistent reads consumed per second before Amazon DynamoDB returns a\n        <i>ThrottlingException</i>. Eventually consistent reads require less effort than strongly\n      consistent reads, so a setting of 50 <i>ReadCapacityUnits</i> per second provides 100\n      eventually consistent <i>ReadCapacityUnits</i> per second.</p>\n  "
                        },
                        "WriteCapacityUnits": {
                          "shape_name": "PositiveLongObject",
                          "type": "long",
                          "min_length": 1,
                          "documentation": "\n    <p>The maximum number of writes consumed per second before Amazon DynamoDB returns a\n        <i>ThrottlingException</i>.</p>\n  "
                        }
                      },
                      "documentation": "\n    <p>Represents the provisioned throughput settings for the table, consisting of read and write\n      capacity units, along with data about increases and decreases.</p>\n  "
                    },
                    "IndexSizeBytes": {
                      "shape_name": "Long",
                      "type": "long",
                      "documentation": "\n    <p>The total size of the specified index, in bytes. Amazon DynamoDB updates this value approximately every six\n      hours. Recent changes might not be reflected in this value.\n      </p>\n  "
                    },
                    "ItemCount": {
                      "shape_name": "Long",
                      "type": "long",
                      "documentation": "\n    <p>The number of items in the specified index. Amazon DynamoDB updates this value approximately every six\n      hours. Recent changes might not be reflected in this value.\n      </p>\n  "
                    }
                  },
                  "documentation": "\n    <p>Represents the properties of a global secondary index.</p>\n  "
                },
                "documentation": "\n    <p>The global secondary indexes, if any, on the table. Each index is scoped to a given\n      hash key value. Each element is composed of:</p>\n    <ul>\n      <li>\n        <p><i>IndexName</i> - The name of the global secondary index.</p>\n      </li>\n      <li>\n        <p><i>KeySchema</i> - Specifies the complete index key schema. The attribute names in the\n          key schema must be between 1 and 255 characters (inclusive). The key schema must begin with the same hash key attribute as the table.</p>\n      </li>\n      <li>         <p><i>Projection</i> - Specifies\n          attributes that are copied (projected) from the table into the index. These are in\n          addition to the primary key attributes and index key\n          attributes, which are automatically projected. Each\n          attribute specification is composed of:</p>\n        <ul>\n          <li>\n            <p><i>ProjectionType</i> - One\n              of the following:</p>\n            <ul>\n              <li>\n                <p><code>KEYS_ONLY</code> - Only the index and primary keys are projected into the\n                  index.</p>\n              </li>\n              <li>\n                <p><code>INCLUDE</code> - Only the specified table attributes are projected into the\n                  index. The list of projected attributes are\n                  in <i>NonKeyAttributes</i>.</p>\n              </li>\n              <li>\n                <p><code>ALL</code> - All of the table attributes are projected into the\n                  index.</p>\n              </li>\n            </ul>\n          </li>\n          <li>\n            <p><i>NonKeyAttributes</i> - A list of one or more non-key attribute names that are \n              projected into the secondary index. The total count of attributes specified in <i>NonKeyAttributes</i>, summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.</p>\n          </li>\n        </ul>\n </li>\n      <li>\n        <p><i>ProvisionedThroughput</i> - The provisioned throughput settings for the global secondary index,\n          consisting of read and write capacity units, along with data about increases and\n          decreases. </p>\n      </li>\n      <li>\n        <p><i>IndexSizeBytes</i> - The total size of the global secondary index, in bytes. Amazon DynamoDB updates this value approximately every six\n      hours. Recent changes might not be reflected in this value.\n      </p>\n</li>\n      <li>\n        <p><i>ItemCount</i> - The number of items in the global secondary index. Amazon DynamoDB updates this value approximately every six\n      hours. Recent changes might not be reflected in this value.\n      </p>\n      </li>\n    </ul>\n    <p>If the table is in the <code>DELETING</code> state, no information about indexes will be returned.</p>\n  "
              }
            },
            "documentation": "\n    <p>Represents the properties of a table.</p>\n  "
          }
        },
        "documentation": "\n    <p>Represents the output of a <i>DescribeTable</i> operation.</p>\n  "
      },
      "errors": [
        {
          "shape_name": "ResourceNotFoundException",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>The resource which is being requested does not exist.</p>\n  "
            }
          },
          "documentation": "\n    <p>The operation tried to access a nonexistent table or index. The resource may not be specified correctly, or its status may not be <code>ACTIVE</code>.</p>\n  "
        },
        {
          "shape_name": "InternalServerError",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>The server encountered an internal error trying to fulfill the request.</p>\n  "
            }
          },
          "documentation": "\n    <p>An error occurred on the server side.</p>\n  "
        }
      ],
      "documentation": "\n    <p>Returns information about the table, including the current status of the table, when it was\n      created, the primary key schema, and any indexes on the table.</p>\n    <examples>\n      <example>\n        <name>Describe a Table</name>\n        <description>\n          <p>This example describes the Thread table.</p>\n        </description>\n        <request><![CDATA[\nPOST / HTTP/1.1\nHost: dynamodb.<region>.<domain>;\nX-Amz-Date: <Date>\nAuthorization: AWS4-HMAC-SHA256 Credential=<Credential>, SignedHeaders=content-length;content-type;host;user-agent;x-amz-content-sha256;x-amz-date;x-amz-target, Signature=<Signature>\nUser-Agent: <UserAgentString>\nx-amz-content-sha256: <PayloadHash>\nContent-Type: application/x-amz-json-1.0\nContent-Length: <PayloadSizeBytes>     \nConnection: Keep-Alive]]>\nX-Amz-Target: DynamoDB_20120810.DescribeTable \n\n{\n    \"TableName\":\"Thread\"\n}\n        </request>\n        <response><![CDATA[\nHTTP/1.1 200 OK\nx-amzn-RequestId: <RequestId> \nx-amz-crc32: <Checksum>\nContent-Type: application/x-amz-json-1.0\nContent-Length: <PayloadSizeBytes>\nDate: <Date>\n]]>\n{\n    \"Table\": {\n        \"AttributeDefinitions\": [\n            {\n                \"AttributeName\": \"ForumName\",\n                \"AttributeType\": \"S\"\n            },\n            {\n                \"AttributeName\": \"LastPostDateTime\",\n                \"AttributeType\": \"S\"\n            },\n            {\n                \"AttributeName\": \"Subject\",\n                \"AttributeType\": \"S\"\n            }\n        ],\n        \"CreationDateTime\": 1.363729002358E9,\n        \"ItemCount\": 0,\n        \"KeySchema\": [\n            {\n                \"AttributeName\": \"ForumName\",\n                \"KeyType\": \"HASH\"\n            },\n            {\n                \"AttributeName\": \"Subject\",\n                \"KeyType\": \"RANGE\"\n            }\n        ],\n        \"LocalSecondaryIndexes\": [\n            {\n                \"IndexName\": \"LastPostIndex\",\n                \"IndexSizeBytes\": 0,\n                \"ItemCount\": 0,\n                \"KeySchema\": [\n                    {\n                        \"AttributeName\": \"ForumName\",\n                        \"KeyType\": \"HASH\"\n                    },\n                    {\n                        \"AttributeName\": \"LastPostDateTime\",\n                        \"KeyType\": \"RANGE\"\n                    }\n                ],\n                \"Projection\": {\n                    \"ProjectionType\": \"KEYS_ONLY\"\n                }\n            }\n        ],\n        \"ProvisionedThroughput\": {\n            \"NumberOfDecreasesToday\": 0,\n            \"ReadCapacityUnits\": 5,\n            \"WriteCapacityUnits\": 5\n        },\n        \"TableName\": \"Thread\",\n        \"TableSizeBytes\": 0,\n        \"TableStatus\": \"ACTIVE\"\n    }\n}\n        </response>\n      </example>\n    </examples>\n  "
    },
    "GetItem": {
      "name": "GetItem",
      "input": {
        "shape_name": "GetItemInput",
        "type": "structure",
        "members": {
          "TableName": {
            "shape_name": "TableName",
            "type": "string",
            "min_length": 3,
            "max_length": 255,
            "pattern": "[a-zA-Z0-9_.-]+",
            "documentation": "\n    <p>The name of the table containing the requested item.</p>\n  ",
            "required": true
          },
          "Key": {
            "shape_name": "Key",
            "type": "map",
            "keys": {
              "shape_name": "AttributeName",
              "type": "string",
              "documentation": null
            },
            "members": {
              "shape_name": "AttributeValue",
              "type": "structure",
              "members": {
                "S": {
                  "shape_name": "StringAttributeValue",
                  "type": "string",
                  "documentation": "\n    <p>A String data type</p>\n  "
                },
                "N": {
                  "shape_name": "NumberAttributeValue",
                  "type": "string",
                  "documentation": "\n    <p>A Number data type</p>\n  "
                },
                "B": {
                  "shape_name": "BinaryAttributeValue",
                  "type": "blob",
                  "documentation": "\n    <p>A Binary data type</p>\n  "
                },
                "SS": {
                  "shape_name": "StringSetAttributeValue",
                  "type": "list",
                  "members": {
                    "shape_name": "StringAttributeValue",
                    "type": "string",
                    "documentation": null
                  },
                  "documentation": "\n    <p>A String set data type</p>\n  "
                },
                "NS": {
                  "shape_name": "NumberSetAttributeValue",
                  "type": "list",
                  "members": {
                    "shape_name": "NumberAttributeValue",
                    "type": "string",
                    "documentation": null
                  },
                  "documentation": "\n    <p> Number set data type</p>\n  "
                },
                "BS": {
                  "shape_name": "BinarySetAttributeValue",
                  "type": "list",
                  "members": {
                    "shape_name": "BinaryAttributeValue",
                    "type": "blob",
                    "documentation": null
                  },
                  "documentation": "\n    <p>A Binary set data type</p>\n  "
                }
              },
              "documentation": "\n    <p>Represents the data for an attribute. You can set one, and only one, of the elements.</p>\n  "
            },
            "documentation": "\n    <p>A map of attribute names to <i>AttributeValue</i> objects, representing the primary key of the item to retrieve.</p>\n   ",
            "required": true
          },
          "AttributesToGet": {
            "shape_name": "AttributeNameList",
            "type": "list",
            "members": {
              "shape_name": "AttributeName",
              "type": "string",
              "documentation": null
            },
            "min_length": 1,
            "documentation": "     <p>The names of one or more attributes to retrieve.  If no attribute\n      names are specified, then all attributes will be returned. If\n      any of the requested attributes are not found, they will not\n      appear in the result.</p>\n "
          },
          "ConsistentRead": {
            "shape_name": "ConsistentRead",
            "type": "boolean",
            "documentation": "     <p>If set to <code>true</code>, then the operation uses strongly consistent reads; otherwise, eventually\n      consistent reads are used.</p>\n "
          },
          "ReturnConsumedCapacity": {
            "shape_name": "ReturnConsumedCapacity",
            "type": "string",
            "enum": [
              "INDEXES",
              "TOTAL",
              "NONE"
            ],
            "documentation": "\n    <p>If set to <code>TOTAL</code>, the response includes <i>ConsumedCapacity</i> data for tables and indexes. If set to <code>INDEXES</code>, the repsonse includes <i>ConsumedCapacity</i> for indexes. If set to <code>NONE</code> (the default), <i>ConsumedCapacity</i> is not included in the response.</p>\n  "
          }
        },
        "documentation": "\n    <p>Represents the input of a <i>GetItem</i> operation.</p>\n  "
      },
      "output": {
        "shape_name": "GetItemOutput",
        "type": "structure",
        "members": {
          "Item": {
            "shape_name": "AttributeMap",
            "type": "map",
            "keys": {
              "shape_name": "AttributeName",
              "type": "string",
              "documentation": null
            },
            "members": {
              "shape_name": "AttributeValue",
              "type": "structure",
              "members": {
                "S": {
                  "shape_name": "StringAttributeValue",
                  "type": "string",
                  "documentation": "\n    <p>A String data type</p>\n  "
                },
                "N": {
                  "shape_name": "NumberAttributeValue",
                  "type": "string",
                  "documentation": "\n    <p>A Number data type</p>\n  "
                },
                "B": {
                  "shape_name": "BinaryAttributeValue",
                  "type": "blob",
                  "documentation": "\n    <p>A Binary data type</p>\n  "
                },
                "SS": {
                  "shape_name": "StringSetAttributeValue",
                  "type": "list",
                  "members": {
                    "shape_name": "StringAttributeValue",
                    "type": "string",
                    "documentation": null
                  },
                  "documentation": "\n    <p>A String set data type</p>\n  "
                },
                "NS": {
                  "shape_name": "NumberSetAttributeValue",
                  "type": "list",
                  "members": {
                    "shape_name": "NumberAttributeValue",
                    "type": "string",
                    "documentation": null
                  },
                  "documentation": "\n    <p> Number set data type</p>\n  "
                },
                "BS": {
                  "shape_name": "BinarySetAttributeValue",
                  "type": "list",
                  "members": {
                    "shape_name": "BinaryAttributeValue",
                    "type": "blob",
                    "documentation": null
                  },
                  "documentation": "\n    <p>A Binary set data type</p>\n  "
                }
              },
              "documentation": "\n    <p>Represents the data for an attribute. You can set one, and only one, of the elements.</p>\n  "
            },
            "documentation": "\n    <p>A map of attribute names to <i>AttributeValue</i> objects, as specified by <i>AttributesToGet</i>.</p>\n  "
          },
          "ConsumedCapacity": {
            "shape_name": "ConsumedCapacity",
            "type": "structure",
            "members": {
              "TableName": {
                "shape_name": "TableName",
                "type": "string",
                "min_length": 3,
                "max_length": 255,
                "pattern": "[a-zA-Z0-9_.-]+",
                "documentation": "\n    <p>The name of the table that was affected by the operation.</p>\n  "
              },
              "CapacityUnits": {
                "shape_name": "ConsumedCapacityUnits",
                "type": "double",
                "documentation": "\n    <p>The total number of capacity units consumed by the operation.</p>\n  "
              },
              "Table": {
                "shape_name": "Capacity",
                "type": "structure",
                "members": {
                  "CapacityUnits": {
                    "shape_name": "ConsumedCapacityUnits",
                    "type": "double",
                    "documentation": "\n    <p>The total number of capacity units consumed on a table or an index.</p>\n  "
                  }
                },
                "documentation": "\n    <p>The amount of throughput consumed on the table affected by the operation.</p>\n  "
              },
              "LocalSecondaryIndexes": {
                "shape_name": "SecondaryIndexesCapacityMap",
                "type": "map",
                "keys": {
                  "shape_name": "IndexName",
                  "type": "string",
                  "min_length": 3,
                  "max_length": 255,
                  "pattern": "[a-zA-Z0-9_.-]+",
                  "documentation": null
                },
                "members": {
                  "shape_name": "Capacity",
                  "type": "structure",
                  "members": {
                    "CapacityUnits": {
                      "shape_name": "ConsumedCapacityUnits",
                      "type": "double",
                      "documentation": "\n    <p>The total number of capacity units consumed on a table or an index.</p>\n  "
                    }
                  },
                  "documentation": "\n    <p>Represents the amount of provisioned throughput capacity consumed on a table or an index. </p>\n  "
                },
                "documentation": "\n    <p>The amount of throughput consumed on each local index affected by the operation.</p>\n  "
              },
              "GlobalSecondaryIndexes": {
                "shape_name": "SecondaryIndexesCapacityMap",
                "type": "map",
                "keys": {
                  "shape_name": "IndexName",
                  "type": "string",
                  "min_length": 3,
                  "max_length": 255,
                  "pattern": "[a-zA-Z0-9_.-]+",
                  "documentation": null
                },
                "members": {
                  "shape_name": "Capacity",
                  "type": "structure",
                  "members": {
                    "CapacityUnits": {
                      "shape_name": "ConsumedCapacityUnits",
                      "type": "double",
                      "documentation": "\n    <p>The total number of capacity units consumed on a table or an index.</p>\n  "
                    }
                  },
                  "documentation": "\n    <p>Represents the amount of provisioned throughput capacity consumed on a table or an index. </p>\n  "
                },
                "documentation": "\n    <p>The amount of throughput consumed on each global index affected by the operation.</p>\n  "
              }
            },
            "documentation": "\n    <p>Represents the capacity units consumed by an operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. <i>ConsumedCapacity</i> is only returned if it was asked for in the request. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html\">Provisioned Throughput</a> in the Amazon DynamoDB Developer Guide.</p>\n  "
          }
        },
        "documentation": "\n    <p>Represents the output of a <i>GetItem</i> operation.</p>\n  "
      },
      "errors": [
        {
          "shape_name": "ProvisionedThroughputExceededException",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>You exceeded your maximum allowed provisioned throughput.</p>\n  "
            }
          },
          "documentation": "\n    <p>The request rate is too high, or the request is too large, for the available throughput to\n      accommodate. The AWS SDKs automatically retry requests that receive this exception;\n      therefore, your request will eventually succeed, unless the request is too large or your retry\n      queue is too large to finish. Reduce the frequency of requests by using the strategies listed in\n        <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#APIRetries\">Error Retries and Exponential Backoff</a> in the Amazon DynamoDB Developer Guide.</p>\n  "
        },
        {
          "shape_name": "ResourceNotFoundException",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>The resource which is being requested does not exist.</p>\n  "
            }
          },
          "documentation": "\n    <p>The operation tried to access a nonexistent table or index. The resource may not be specified correctly, or its status may not be <code>ACTIVE</code>.</p>\n  "
        },
        {
          "shape_name": "InternalServerError",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>The server encountered an internal error trying to fulfill the request.</p>\n  "
            }
          },
          "documentation": "\n    <p>An error occurred on the server side.</p>\n  "
        }
      ],
      "documentation": "\n    <p>The <i>GetItem</i> operation returns a set of attributes for the item with the given primary\n      key. If there is no matching item, <i>GetItem</i> does not return any data.</p>\n    <p><i>GetItem</i> provides an eventually consistent read by default. If your application\n      requires a strongly consistent read, set <i>ConsistentRead</i> to <code>true</code>. Although\n      a strongly consistent read might take more time than an eventually consistent read, it always\n      returns the last updated value.</p>\n    <examples>\n      <example>\n        <name>Retrieve Item Attributes</name>\n        <description>This example retrieves three attributes from the Thread table. In the response,\n          the ConsumedCapacityUnits value is 1, because ConsistentRead is set to true. If\n          ConsistentRead had been set to false (or not specified) for the same request, an\n          eventually consistent read would have been used and ConsumedCapacityUnits would have been\n          0.5.</description>\n        <request><![CDATA[\nPOST / HTTP/1.1\nHost: dynamodb.<region>.<domain>;\nX-Amz-Date: <Date>\nAuthorization: AWS4-HMAC-SHA256 Credential=<Credential>, SignedHeaders=content-length;content-type;host;user-agent;x-amz-content-sha256;x-amz-date;x-amz-target, Signature=<Signature>\nUser-Agent: <UserAgentString>\nx-amz-content-sha256: <PayloadHash>\nContent-Type: application/x-amz-json-1.0\nContent-Length: <PayloadSizeBytes>     \nConnection: Keep-Alive]]>\nX-Amz-Target: DynamoDB_20120810.GetItem \n\n{\n    \"TableName\": \"Thread\",\n    \"Key\": {\n        \"ForumName\": {\n            \"S\": \"Amazon DynamoDB\"\n        },\n        \"Subject\": {\n            \"S\": \"How do I update multiple items?\"\n        }\n    },\n    \"AttributesToGet\": [\"LastPostDateTime\",\"Message\",\"Tags\"],\n    \"ConsistentRead\": true,\n    \"ReturnConsumedCapacity\": \"TOTAL\"\n}\n        </request>\n        <response><![CDATA[\nHTTP/1.1 200 OK\nx-amzn-RequestId: <RequestId> \nx-amz-crc32: <Checksum>\nContent-Type: application/x-amz-json-1.0\nContent-Length: <PayloadSizeBytes>\nDate: <Date>\n]]>\n{\n    \"ConsumedCapacity\": {\n        \"CapacityUnits\": 1,\n        \"TableName\": \"Thread\"\n    },\n    \"Item\": {\n        \"Tags\": {\n            \"SS\": [\"Update\",\"Multiple Items\",\"HelpMe\"]\n        },\n        \"LastPostDateTime\": {\n            \"S\": \"201303190436\"\n        },\n        \"Message\": {\n            \"S\": \"I want to update multiple items in a single API call. What's the best way to do that?\"\n        }\n    }\n}\n        </response>\n      </example>\n    </examples>\n  "
    },
    "ListTables": {
      "name": "ListTables",
      "input": {
        "shape_name": "ListTablesInput",
        "type": "structure",
        "members": {
          "ExclusiveStartTableName": {
            "shape_name": "TableName",
            "type": "string",
            "min_length": 3,
            "max_length": 255,
            "pattern": "[a-zA-Z0-9_.-]+",
            "documentation": "\n    <p>The name of the table that starts the list. If you already ran a <i>ListTables</i> operation\n      and received a <i>LastEvaluatedTableName</i> value in the response, use that value here to\n      continue the list.</p>\n  "
          },
          "Limit": {
            "shape_name": "ListTablesInputLimit",
            "type": "integer",
            "min_length": 1,
            "max_length": 100,
            "documentation": "\n    <p> A maximum number of table names to return.</p>\n  "
          }
        },
        "documentation": "\n    <p>Represents the input of a <i>ListTables</i> operation.</p>\n  "
      },
      "output": {
        "shape_name": "ListTablesOutput",
        "type": "structure",
        "members": {
          "TableNames": {
            "shape_name": "TableNameList",
            "type": "list",
            "members": {
              "shape_name": "TableName",
              "type": "string",
              "min_length": 3,
              "max_length": 255,
              "pattern": "[a-zA-Z0-9_.-]+",
              "documentation": null
            },
            "documentation": "\n    <p>The names of the tables associated with the current account at the current endpoint.</p>\n  "
          },
          "LastEvaluatedTableName": {
            "shape_name": "TableName",
            "type": "string",
            "min_length": 3,
            "max_length": 255,
            "pattern": "[a-zA-Z0-9_.-]+",
            "documentation": "\n    <p>The name of the last table in the current list, only if some tables for the account and\n      endpoint have not been returned. This value does not exist in a response if all table names\n      are already returned. Use this value as the <i>ExclusiveStartTableName</i> in a new request to\n      continue the list until all the table names are returned.</p>\n  "
          }
        },
        "documentation": "\n    <p>Represents the output of a <i>ListTables</i> operation.</p>\n  "
      },
      "errors": [
        {
          "shape_name": "InternalServerError",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>The server encountered an internal error trying to fulfill the request.</p>\n  "
            }
          },
          "documentation": "\n    <p>An error occurred on the server side.</p>\n  "
        }
      ],
      "documentation": "\n    <p>Returns an array of all the tables associated with the current account and endpoint. </p>\n    <examples>\n      <example>\n        <name>List Tables</name>\n        <description>\n          <p>This example requests a list of tables, starting with a table named comp2 and ending\n            after three table names have been returned.</p>\n        </description>\n        <request><![CDATA[\nPOST / HTTP/1.1\nHost: dynamodb.<region>.<domain>;\nX-Amz-Date: <Date>\nAuthorization: AWS4-HMAC-SHA256 Credential=<Credential>, SignedHeaders=content-length;content-type;host;user-agent;x-amz-content-sha256;x-amz-date;x-amz-target, Signature=<Signature>\nUser-Agent: <UserAgentString>\nx-amz-content-sha256: <PayloadHash>\nContent-Type: application/x-amz-json-1.0\nContent-Length: <PayloadSizeBytes>     \nConnection: Keep-Alive]]>\nX-Amz-Target: DynamoDB_20120810.ListTables \n\n{\n    \"ExclusiveStartTableName\": \"Forum\",\n    \"Limit\": 3\n}\n        </request>\n        <response><![CDATA[\nHTTP/1.1 200 OK\nx-amzn-RequestId: <RequestId> \nx-amz-crc32: <Checksum>\nContent-Type: application/x-amz-json-1.0\nContent-Length: <PayloadSizeBytes>\nDate: <Date>\n]]>\n{\n    \"LastEvaluatedTableName\": \"Thread\",\n    \"TableNames\": [\"Forum\",\"Reply\",\"Thread\"]\n}\n        </response>\n      </example>\n    </examples>\n  "
    },
    "PutItem": {
      "name": "PutItem",
      "input": {
        "shape_name": "PutItemInput",
        "type": "structure",
        "members": {
          "TableName": {
            "shape_name": "TableName",
            "type": "string",
            "min_length": 3,
            "max_length": 255,
            "pattern": "[a-zA-Z0-9_.-]+",
            "documentation": "\n    <p>The name of the table to contain the item.</p>\n  ",
            "required": true
          },
          "Item": {
            "shape_name": "PutItemInputAttributeMap",
            "type": "map",
            "keys": {
              "shape_name": "AttributeName",
              "type": "string",
              "documentation": null
            },
            "members": {
              "shape_name": "AttributeValue",
              "type": "structure",
              "members": {
                "S": {
                  "shape_name": "StringAttributeValue",
                  "type": "string",
                  "documentation": "\n    <p>A String data type</p>\n  "
                },
                "N": {
                  "shape_name": "NumberAttributeValue",
                  "type": "string",
                  "documentation": "\n    <p>A Number data type</p>\n  "
                },
                "B": {
                  "shape_name": "BinaryAttributeValue",
                  "type": "blob",
                  "documentation": "\n    <p>A Binary data type</p>\n  "
                },
                "SS": {
                  "shape_name": "StringSetAttributeValue",
                  "type": "list",
                  "members": {
                    "shape_name": "StringAttributeValue",
                    "type": "string",
                    "documentation": null
                  },
                  "documentation": "\n    <p>A String set data type</p>\n  "
                },
                "NS": {
                  "shape_name": "NumberSetAttributeValue",
                  "type": "list",
                  "members": {
                    "shape_name": "NumberAttributeValue",
                    "type": "string",
                    "documentation": null
                  },
                  "documentation": "\n    <p> Number set data type</p>\n  "
                },
                "BS": {
                  "shape_name": "BinarySetAttributeValue",
                  "type": "list",
                  "members": {
                    "shape_name": "BinaryAttributeValue",
                    "type": "blob",
                    "documentation": null
                  },
                  "documentation": "\n    <p>A Binary set data type</p>\n  "
                }
              },
              "documentation": "\n    <p>Represents the data for an attribute. You can set one, and only one, of the elements.</p>\n  "
            },
            "documentation": "\n    <p>A map of attribute name/value pairs, one for each attribute. Only the primary key\n      attributes are required; you can optionally provide other attribute name-value pairs for the\n      item.</p>\n    <p>If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.</p>\n    <p>For more information about primary keys, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey\">Primary Key</a> in the Amazon DynamoDB Developer Guide.</p>\n    <p>Each element in the <i>Item</i> map is an <i>AttributeValue</i> object.</p>\n  ",
            "required": true
          },
          "Expected": {
            "shape_name": "ExpectedAttributeMap",
            "type": "map",
            "keys": {
              "shape_name": "AttributeName",
              "type": "string",
              "documentation": null
            },
            "members": {
              "shape_name": "ExpectedAttributeValue",
              "type": "structure",
              "members": {
                "Value": {
                  "shape_name": "AttributeValue",
                  "type": "structure",
                  "members": {
                    "S": {
                      "shape_name": "StringAttributeValue",
                      "type": "string",
                      "documentation": "\n    <p>A String data type</p>\n  "
                    },
                    "N": {
                      "shape_name": "NumberAttributeValue",
                      "type": "string",
                      "documentation": "\n    <p>A Number data type</p>\n  "
                    },
                    "B": {
                      "shape_name": "BinaryAttributeValue",
                      "type": "blob",
                      "documentation": "\n    <p>A Binary data type</p>\n  "
                    },
                    "SS": {
                      "shape_name": "StringSetAttributeValue",
                      "type": "list",
                      "members": {
                        "shape_name": "StringAttributeValue",
                        "type": "string",
                        "documentation": null
                      },
                      "documentation": "\n    <p>A String set data type</p>\n  "
                    },
                    "NS": {
                      "shape_name": "NumberSetAttributeValue",
                      "type": "list",
                      "members": {
                        "shape_name": "NumberAttributeValue",
                        "type": "string",
                        "documentation": null
                      },
                      "documentation": "\n    <p> Number set data type</p>\n  "
                    },
                    "BS": {
                      "shape_name": "BinarySetAttributeValue",
                      "type": "list",
                      "members": {
                        "shape_name": "BinaryAttributeValue",
                        "type": "blob",
                        "documentation": null
                      },
                      "documentation": "\n    <p>A Binary set data type</p>\n  "
                    }
                  },
                  "documentation": "\n    <p>Represents the data for an attribute. You can set one, and only one, of the elements.</p>\n  "
                },
                "Exists": {
                  "shape_name": "BooleanObject",
                  "type": "boolean",
                  "documentation": "\n    <p>Causes Amazon DynamoDB to evaluate the value before attempting a conditional operation:</p>\n    <ul>\n      <li>\n        <p>If <i>Exists</i> is <code>true</code>, Amazon DynamoDB will check to see if that attribute\n          value already exists in the table. If it is found, then the operation\n          succeeds. If it is not found, the operation fails with a\n          <i>ConditionalCheckFailedException</i>.</p>\n      </li>\n      <li>\n        <p>If <i>Exists</i> is <code>false</code>, Amazon DynamoDB assumes that the attribute value does\n          <i>not</i> exist in the table. If in fact the value does not exist, then the\n          assumption is valid and the operation succeeds. If the value is found,\n          despite the assumption that it does not exist, the operation fails with a\n          <i>ConditionalCheckFailedException</i>.</p>\n      </li>\n    </ul>\n    <p>The default setting for <i>Exists</i> is <code>true</code>. If you supply a <i>Value</i> all\n      by itself, Amazon DynamoDB assumes the attribute exists: You don't have to set <i>Exists</i> to\n        <code>true</code>, because it is implied.</p>\n    <p>Amazon DynamoDB returns a <i>ValidationException</i> if:</p>\n    <ul>\n      <li>\n        <p><i>Exists</i> is <code>true</code> but there is no <i>Value</i> to check. (You expect\n          a value to exist, but don't specify what that value is.)</p>\n      </li>\n      <li>\n        <p><i>Exists</i> is <code>false</code> but you also specify a <i>Value</i>. (You cannot\n          expect an attribute to have a value, while also expecting it not to exist.)</p>\n      </li>\n    </ul>\n    <p>If you specify more than one condition for <i>Exists</i>, then all of the conditions must\n      evaluate to true. (In other words, the conditions are ANDed together.) Otherwise, the\n      conditional operation will fail.</p>\n  "
                }
              },
              "documentation": "\n    <p>Represents an attribute value used with conditional <i>DeleteItem</i>, <i>PutItem</i> or <i>UpdateItem</i> operations.  Amazon DynamoDB will check to see if the attribute value already exists; or if the attribute exists and has a particular value before updating it.</p>\n  "
            },
            "documentation": "\n    <p>A map of attribute/condition pairs. This is the conditional block for the <i>PutItem</i> operation. All the conditions must be met for the operation to succeed.</p>     <p><i>Expected</i> allows you to\n      provide an attribute name, and whether or not Amazon DynamoDB should check to see if the attribute value\n      already exists; or if the attribute value exists and has a particular value before changing\n      it.</p>\n    <p>Each item in <i>Expected</i> represents an attribute name for Amazon DynamoDB to check, along with\n      the following: </p>\n    <ul>\n      <li>\n        <p><i>Value</i> - The attribute value for Amazon DynamoDB to check.</p>\n      </li>\n      <li>\n        <p><i>Exists</i> - Causes Amazon DynamoDB to evaluate the value before attempting a conditional\n          operation:</p>\n        <ul>\n          <li>\n            <p>If <i>Exists</i> is <code>true</code>, Amazon DynamoDB will check to see if that attribute\n              value already exists in the table. If it is found, then the operation\n              succeeds. If it is not found, the operation fails with a\n                <i>ConditionalCheckFailedException</i>.</p>\n          </li>\n          <li>\n            <p>If <i>Exists</i> is <code>false</code>, Amazon DynamoDB assumes that the attribute value does\n                <i>not</i> exist in the table. If in fact the value does not exist, then the\n              assumption is valid and the operation succeeds. If the value is found,\n              despite the assumption that it does not exist, the operation fails with a\n                <i>ConditionalCheckFailedException</i>.</p>\n          </li>\n        </ul>\n        <p>The default setting for <i>Exists</i> is <code>true</code>. If you supply a <i>Value</i>\n          all by itself, Amazon DynamoDB assumes the attribute exists:  You don't have to set <i>Exists</i> to <code>true</code>, because it is\n          implied.</p>\n        <p>Amazon DynamoDB returns a <i>ValidationException</i> if:</p>\n        <ul>\n          <li>\n            <p><i>Exists</i> is <code>true</code> but there is no <i>Value</i> to check. (You expect\n              a value to exist, but don't specify what that value is.)</p>\n          </li>\n          <li>\n            <p><i>Exists</i> is <code>false</code> but you also specify a <i>Value</i>. (You cannot\n              expect an attribute to have a value, while also expecting it not to exist.)</p>\n          </li>\n        </ul>\n      </li>\n    </ul>\n    <p>If you specify more than one condition for <i>Exists</i>, then all of the conditions must\n      evaluate to true. (In other words, the conditions are ANDed together.) Otherwise, the\n      conditional operation will fail.</p>\n \n  "
          },
          "ReturnValues": {
            "shape_name": "ReturnValue",
            "type": "string",
            "enum": [
              "NONE",
              "ALL_OLD",
              "UPDATED_OLD",
              "ALL_NEW",
              "UPDATED_NEW"
            ],
            "documentation": "\n    <p>Use <i>ReturnValues</i> if you want to get the item attributes as they appeared before they were updated\n      with the <i>PutItem</i> request. For <i>PutItem</i>, the valid values are:</p>      \n    <ul>\n      <li>\n        <p><code>NONE</code> - If <i>ReturnValues</i> is not specified, or if its\n          value is <code>NONE</code>, then nothing is returned. (This is the default for <i>ReturnValues</i>.)</p>\n      </li>\n      <li>\n        <p><code>ALL_OLD</code> - If <i>PutItem</i> overwrote an attribute name-value pair, then\n          the content of the old item is returned.</p>\n      </li>\n    </ul>\n\n  "
          },
          "ReturnConsumedCapacity": {
            "shape_name": "ReturnConsumedCapacity",
            "type": "string",
            "enum": [
              "INDEXES",
              "TOTAL",
              "NONE"
            ],
            "documentation": "\n    <p>If set to <code>TOTAL</code>, the response includes <i>ConsumedCapacity</i> data for tables and indexes. If set to <code>INDEXES</code>, the repsonse includes <i>ConsumedCapacity</i> for indexes. If set to <code>NONE</code> (the default), <i>ConsumedCapacity</i> is not included in the response.</p>\n  "
          },
          "ReturnItemCollectionMetrics": {
            "shape_name": "ReturnItemCollectionMetrics",
            "type": "string",
            "enum": [
              "SIZE",
              "NONE"
            ],
            "documentation": "     <p>If set to <code>SIZE</code>, statistics about item collections, if any, that were modified during\n      the operation are returned in the response. If set to <code>NONE</code> (the default), no statistics are returned.</p>\n "
          }
        },
        "documentation": "\n    <p>Represents the input of a <i>PutItem</i> operation.</p>\n  "
      },
      "output": {
        "shape_name": "PutItemOutput",
        "type": "structure",
        "members": {
          "Attributes": {
            "shape_name": "AttributeMap",
            "type": "map",
            "keys": {
              "shape_name": "AttributeName",
              "type": "string",
              "documentation": null
            },
            "members": {
              "shape_name": "AttributeValue",
              "type": "structure",
              "members": {
                "S": {
                  "shape_name": "StringAttributeValue",
                  "type": "string",
                  "documentation": "\n    <p>A String data type</p>\n  "
                },
                "N": {
                  "shape_name": "NumberAttributeValue",
                  "type": "string",
                  "documentation": "\n    <p>A Number data type</p>\n  "
                },
                "B": {
                  "shape_name": "BinaryAttributeValue",
                  "type": "blob",
                  "documentation": "\n    <p>A Binary data type</p>\n  "
                },
                "SS": {
                  "shape_name": "StringSetAttributeValue",
                  "type": "list",
                  "members": {
                    "shape_name": "StringAttributeValue",
                    "type": "string",
                    "documentation": null
                  },
                  "documentation": "\n    <p>A String set data type</p>\n  "
                },
                "NS": {
                  "shape_name": "NumberSetAttributeValue",
                  "type": "list",
                  "members": {
                    "shape_name": "NumberAttributeValue",
                    "type": "string",
                    "documentation": null
                  },
                  "documentation": "\n    <p> Number set data type</p>\n  "
                },
                "BS": {
                  "shape_name": "BinarySetAttributeValue",
                  "type": "list",
                  "members": {
                    "shape_name": "BinaryAttributeValue",
                    "type": "blob",
                    "documentation": null
                  },
                  "documentation": "\n    <p>A Binary set data type</p>\n  "
                }
              },
              "documentation": "\n    <p>Represents the data for an attribute. You can set one, and only one, of the elements.</p>\n  "
            },
            "documentation": "\n    <p>The attribute values as they appeared before the <i>PutItem</i> operation, but only if \n        <i>ReturnValues</i> is specified as <code>ALL_OLD</code> in the request. Each\n      element consists of an attribute name and an attribute value.</p>\n  "
          },
          "ConsumedCapacity": {
            "shape_name": "ConsumedCapacity",
            "type": "structure",
            "members": {
              "TableName": {
                "shape_name": "TableName",
                "type": "string",
                "min_length": 3,
                "max_length": 255,
                "pattern": "[a-zA-Z0-9_.-]+",
                "documentation": "\n    <p>The name of the table that was affected by the operation.</p>\n  "
              },
              "CapacityUnits": {
                "shape_name": "ConsumedCapacityUnits",
                "type": "double",
                "documentation": "\n    <p>The total number of capacity units consumed by the operation.</p>\n  "
              },
              "Table": {
                "shape_name": "Capacity",
                "type": "structure",
                "members": {
                  "CapacityUnits": {
                    "shape_name": "ConsumedCapacityUnits",
                    "type": "double",
                    "documentation": "\n    <p>The total number of capacity units consumed on a table or an index.</p>\n  "
                  }
                },
                "documentation": "\n    <p>The amount of throughput consumed on the table affected by the operation.</p>\n  "
              },
              "LocalSecondaryIndexes": {
                "shape_name": "SecondaryIndexesCapacityMap",
                "type": "map",
                "keys": {
                  "shape_name": "IndexName",
                  "type": "string",
                  "min_length": 3,
                  "max_length": 255,
                  "pattern": "[a-zA-Z0-9_.-]+",
                  "documentation": null
                },
                "members": {
                  "shape_name": "Capacity",
                  "type": "structure",
                  "members": {
                    "CapacityUnits": {
                      "shape_name": "ConsumedCapacityUnits",
                      "type": "double",
                      "documentation": "\n    <p>The total number of capacity units consumed on a table or an index.</p>\n  "
                    }
                  },
                  "documentation": "\n    <p>Represents the amount of provisioned throughput capacity consumed on a table or an index. </p>\n  "
                },
                "documentation": "\n    <p>The amount of throughput consumed on each local index affected by the operation.</p>\n  "
              },
              "GlobalSecondaryIndexes": {
                "shape_name": "SecondaryIndexesCapacityMap",
                "type": "map",
                "keys": {
                  "shape_name": "IndexName",
                  "type": "string",
                  "min_length": 3,
                  "max_length": 255,
                  "pattern": "[a-zA-Z0-9_.-]+",
                  "documentation": null
                },
                "members": {
                  "shape_name": "Capacity",
                  "type": "structure",
                  "members": {
                    "CapacityUnits": {
                      "shape_name": "ConsumedCapacityUnits",
                      "type": "double",
                      "documentation": "\n    <p>The total number of capacity units consumed on a table or an index.</p>\n  "
                    }
                  },
                  "documentation": "\n    <p>Represents the amount of provisioned throughput capacity consumed on a table or an index. </p>\n  "
                },
                "documentation": "\n    <p>The amount of throughput consumed on each global index affected by the operation.</p>\n  "
              }
            },
            "documentation": "\n    <p>Represents the capacity units consumed by an operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. <i>ConsumedCapacity</i> is only returned if it was asked for in the request. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html\">Provisioned Throughput</a> in the Amazon DynamoDB Developer Guide.</p>\n  "
          },
          "ItemCollectionMetrics": {
            "shape_name": "ItemCollectionMetrics",
            "type": "structure",
            "members": {
              "ItemCollectionKey": {
                "shape_name": "ItemCollectionKeyAttributeMap",
                "type": "map",
                "keys": {
                  "shape_name": "AttributeName",
                  "type": "string",
                  "documentation": null
                },
                "members": {
                  "shape_name": "AttributeValue",
                  "type": "structure",
                  "members": {
                    "S": {
                      "shape_name": "StringAttributeValue",
                      "type": "string",
                      "documentation": "\n    <p>A String data type</p>\n  "
                    },
                    "N": {
                      "shape_name": "NumberAttributeValue",
                      "type": "string",
                      "documentation": "\n    <p>A Number data type</p>\n  "
                    },
                    "B": {
                      "shape_name": "BinaryAttributeValue",
                      "type": "blob",
                      "documentation": "\n    <p>A Binary data type</p>\n  "
                    },
                    "SS": {
                      "shape_name": "StringSetAttributeValue",
                      "type": "list",
                      "members": {
                        "shape_name": "StringAttributeValue",
                        "type": "string",
                        "documentation": null
                      },
                      "documentation": "\n    <p>A String set data type</p>\n  "
                    },
                    "NS": {
                      "shape_name": "NumberSetAttributeValue",
                      "type": "list",
                      "members": {
                        "shape_name": "NumberAttributeValue",
                        "type": "string",
                        "documentation": null
                      },
                      "documentation": "\n    <p> Number set data type</p>\n  "
                    },
                    "BS": {
                      "shape_name": "BinarySetAttributeValue",
                      "type": "list",
                      "members": {
                        "shape_name": "BinaryAttributeValue",
                        "type": "blob",
                        "documentation": null
                      },
                      "documentation": "\n    <p>A Binary set data type</p>\n  "
                    }
                  },
                  "documentation": "\n    <p>Represents the data for an attribute. You can set one, and only one, of the elements.</p>\n  "
                },
                "documentation": "\n    <p>The hash key value of the item collection. This is the same as the hash key of the item.</p>  \n   "
              },
              "SizeEstimateRangeGB": {
                "shape_name": "ItemCollectionSizeEstimateRange",
                "type": "list",
                "members": {
                  "shape_name": "ItemCollectionSizeEstimateBound",
                  "type": "double",
                  "documentation": null
                },
                "documentation": "\n    <p>An estimate of item collection size, measured in gigabytes. This is a\n      two-element array containing a lower bound and an upper bound for the estimate. The estimate\n      includes the size of all the items in the table, plus the size of all attributes projected\n      into all of the local secondary indexes on that table. Use this estimate to measure whether a\n      local secondary index is approaching its size limit.</p>\n    <p>The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.</p>\n  "
              }
            },
            "documentation": "     <p>Information about item collections, if any, that were affected by the operation. <i>ItemCollectionMetrics</i> is only returned if it was asked for in the request. If the table\n      does not have any local secondary indexes, this information is not\n      returned in the response.</p>\n      <p>Each <i>ItemCollectionMetrics</i>\n        element consists of:</p>\n      <ul>\n        <li><p><i>ItemCollectionKey</i> - The hash key value of the item\n          collection. This is the same as the hash key of the item.</p></li>\n        <li><p><i>SizeEstimateRange</i> - An estimate of item collection size,\n          measured in gigabytes. This is a two-element array\n          containing a lower bound and an upper bound for the\n          estimate. The estimate includes the size of all the\n          items in the table, plus the size of all attributes\n          projected into all of the local secondary indexes on that\n          table. Use this estimate to measure whether a local secondary index is approaching its size limit.</p>\n          <p>The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.</p>\n</li>\n      </ul>\n "
          }
        },
        "documentation": "\n    <p>Represents the output of a <i>PutItem</i> operation.</p>\n  "
      },
      "errors": [
        {
          "shape_name": "ConditionalCheckFailedException",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>The conditional request failed.</p>\n  "
            }
          },
          "documentation": "\n    <p>A condition specified in the operation could not be evaluated.</p>\n  "
        },
        {
          "shape_name": "ProvisionedThroughputExceededException",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>You exceeded your maximum allowed provisioned throughput.</p>\n  "
            }
          },
          "documentation": "\n    <p>The request rate is too high, or the request is too large, for the available throughput to\n      accommodate. The AWS SDKs automatically retry requests that receive this exception;\n      therefore, your request will eventually succeed, unless the request is too large or your retry\n      queue is too large to finish. Reduce the frequency of requests by using the strategies listed in\n        <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#APIRetries\">Error Retries and Exponential Backoff</a> in the Amazon DynamoDB Developer Guide.</p>\n  "
        },
        {
          "shape_name": "ResourceNotFoundException",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>The resource which is being requested does not exist.</p>\n  "
            }
          },
          "documentation": "\n    <p>The operation tried to access a nonexistent table or index. The resource may not be specified correctly, or its status may not be <code>ACTIVE</code>.</p>\n  "
        },
        {
          "shape_name": "ItemCollectionSizeLimitExceededException",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>The total size of an item collection has exceeded the maximum limit of 10 gigabytes.</p>\n  "
            }
          },
          "documentation": "\n    <p>An item collection is too large. This exception is only returned for tables that have one or\n      more local secondary indexes.</p>\n  "
        },
        {
          "shape_name": "InternalServerError",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>The server encountered an internal error trying to fulfill the request.</p>\n  "
            }
          },
          "documentation": "\n    <p>An error occurred on the server side.</p>\n  "
        }
      ],
      "documentation": "\n    <p>Creates a new item, or replaces an old item with a new item. If an item already exists in the\n      specified table with the same primary key, the new item completely replaces the existing item.\n      You can perform a conditional put (insert a new item if one with the specified primary key\n      doesn't exist), or replace an existing item if it has certain attribute values. </p>\n    <p>In addition to putting an item, you can also return the item's attribute values in the same operation, using the <i>ReturnValues</i> parameter.</p>\n    <p>When you add an item, the primary key attribute(s) are the only required attributes.\n      Attribute values cannot be null. String and binary type attributes must have lengths greater\n      than zero. Set type attributes cannot be empty. Requests with empty values will be\n      rejected with a <i>ValidationException</i>.</p>\n    <p>You can request that <i>PutItem</i> return either a copy of the old item (before the update)\n      or a copy of the new item (after the update). For more information, see the\n        <i>ReturnValues</i> description.</p>\n    <note>\n      <p>To prevent a new item from replacing an existing item, use a conditional put\n        operation with <i>Exists</i> set to <code>false</code> for the primary key attribute, or\n        attributes.</p>\n    </note>\n    <p>For more information about using this API, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithDDItems.html\">Working with Items</a> in the Amazon DynamoDB Developer Guide.</p>\n    <examples>\n      <example>\n        <name>Put an Item</name>\n        <description>\n          <p>This example puts a new item into the Thread table. To prevent this new item from overwriting an existing item, \"Exists\" is set to false for the primary key attributes.</p>\n</description>\n        <request><![CDATA[\nPOST / HTTP/1.1\nHost: dynamodb.<region>.<domain>;\nX-Amz-Date: <Date>\nAuthorization: AWS4-HMAC-SHA256 Credential=<Credential>, SignedHeaders=content-length;content-type;host;user-agent;x-amz-content-sha256;x-amz-date;x-amz-target, Signature=<Signature>\nUser-Agent: <UserAgentString>\nx-amz-content-sha256: <PayloadHash>\nContent-Type: application/x-amz-json-1.0\nContent-Length: <PayloadSizeBytes>     \nConnection: Keep-Alive]]>\nX-Amz-Target: DynamoDB_20120810.PutItem \n\n{\n    \"TableName\": \"Thread\",\n    \"Item\": {\n        \"LastPostDateTime\": {\n            \"S\": \"201303190422\"\n        },\n        \"Tags\": {\n            \"SS\": [\"Update\",\"Multiple Items\",\"HelpMe\"]\n        },\n        \"ForumName\": {\n            \"S\": \"Amazon DynamoDB\"\n        },\n        \"Message\": {\n            \"S\": \"I want to update multiple items in a single API call. What's the best way to do that?\"\n        },\n        \"Subject\": {\n            \"S\": \"How do I update multiple items?\"\n        },\n        \"LastPostedBy\": {\n            \"S\": \"fred@example.com\"\n        }\n    },\n    \"Expected\": {\n        \"ForumName\": {\n            \"Exists\": false\n        },\n        \"Subject\": {\n            \"Exists\": false\n        }\n    }\n}\n        </request>\n        <response><![CDATA[\nHTTP/1.1 200 OK\nx-amzn-RequestId: <RequestId> \nx-amz-crc32: <Checksum>\nContent-Type: application/x-amz-json-1.0\nContent-Length: <PayloadSizeBytes>\nDate: <Date>\n]]>\n{\n}\n        </response>\n      </example>\n    </examples>\n  "
    },
    "Query": {
      "name": "Query",
      "input": {
        "shape_name": "QueryInput",
        "type": "structure",
        "members": {
          "TableName": {
            "shape_name": "TableName",
            "type": "string",
            "min_length": 3,
            "max_length": 255,
            "pattern": "[a-zA-Z0-9_.-]+",
            "documentation": "\n    <p>The name of the table containing the requested items. </p>\n  ",
            "required": true
          },
          "IndexName": {
            "shape_name": "IndexName",
            "type": "string",
            "min_length": 3,
            "max_length": 255,
            "pattern": "[a-zA-Z0-9_.-]+",
            "documentation": "\n    <p>The name of an index to query. This can be any local secondary index or global secondary index on the table.</p>\n  "
          },
          "Select": {
            "shape_name": "Select",
            "type": "string",
            "enum": [
              "ALL_ATTRIBUTES",
              "ALL_PROJECTED_ATTRIBUTES",
              "SPECIFIC_ATTRIBUTES",
              "COUNT"
            ],
            "documentation": "\n    <p>The attributes to be returned in the result. You can\n      retrieve all item attributes, specific item attributes, the count \n      of matching items, or in the case of an index, some or all of the \n      attributes projected into the index.</p>\n    <ul>\n      <li>\n        <p><code>ALL_ATTRIBUTES</code>: Returns all of the item attributes. For a table,\n          this is the default. For an index, this mode causes Amazon DynamoDB to fetch the full\n          item from the table for each matching item in the index. If the index is configured to\n          project all item attributes, the matching items will not be fetched from the table.\n          Fetching items from the table incurs additional throughput cost and latency.</p>\n      </li>\n      <li>\n        <p><code>ALL_PROJECTED_ATTRIBUTES</code>: Allowed only when querying an index. Retrieves all\n          attributes which have been projected into the index. If the index is configured\n          to project all attributes, this is equivalent to specifying <i>ALL_ATTRIBUTES</i>.</p>\n      </li>\n      <li>\n        <p><code>COUNT</code>: Returns the number of matching items, rather than the matching items\n          themselves.</p>\n      </li>\n      <li>\n        <p>\n          <code>SPECIFIC_ATTRIBUTES</code> : Returns only the attributes listed in <i>AttributesToGet</i>. This is equivalent to\n          specifying <i>AttributesToGet</i> without specifying any value\n          for <i>Select</i>.</p>\n                  <p>If you are querying an index and request only attributes that are projected into that\n          index, the operation will read only the index and not the table. If any of the requested\n          attributes are not projected into the index, Amazon DynamoDB will need to fetch each\n          matching item from the table. This extra fetching incurs additional throughput cost and\n          latency. </p>\n\n      </li>\n    </ul>\n    <p>If neither <i>Select</i> nor <i>AttributesToGet</i>  are specified, Amazon DynamoDB\n      defaults to <code>ALL_ATTRIBUTES</code> when accessing a table, and \n      <code>ALL_PROJECTED_ATTRIBUTES</code> when accessing an index. You cannot use both <i>Select</i> and <i>AttributesToGet</i> together in a single\n      request, <i>unless</i> the value for <i>Select</i>\n      is <code>SPECIFIC_ATTRIBUTES</code>. (This usage is equivalent to \n      specifying <i>AttributesToGet</i> without any value for <i>Select</i>.)</p>\n  "
          },
          "AttributesToGet": {
            "shape_name": "AttributeNameList",
            "type": "list",
            "members": {
              "shape_name": "AttributeName",
              "type": "string",
              "documentation": null
            },
            "min_length": 1,
            "documentation": "     <p>The names of one or more attributes to retrieve.  If no attribute\n      names are specified, then all attributes will be returned. If\n      any of the requested attributes are not found, they will not\n      appear in the result.</p>\n \n              <p>If you are querying an index and request only attributes that are projected into that\n          index, the operation will read only the index and not the table. If any of the requested\n          attributes are not projected into the index, Amazon DynamoDB will need to fetch each\n          matching item from the table. This extra fetching incurs additional throughput cost and\n          latency. </p>\n\n      <p>You cannot use both <i>AttributesToGet</i> and <i>Select</i> together in a <i>Query</i>\n        request, <i>unless</i> the value for <i>Select</i> is <code>SPECIFIC_ATTRIBUTES</code>.\n        (This usage is equivalent to specifying <i>AttributesToGet</i> without any value for\n          <i>Select</i>.)</p>\n  "
          },
          "Limit": {
            "shape_name": "PositiveIntegerObject",
            "type": "integer",
            "min_length": 1,
            "documentation": "      <p>The maximum number of items to evaluate (not necessarily the number of matching items). If\n      Amazon DynamoDB processes the number of items up to the limit while processing the results, it stops the\n      operation and returns the matching values up to that point, and a <i>LastEvaluatedKey</i> to \n      apply in\n      a subsequent operation, so that you can pick up where you left off. Also, if the processed data set size\n      exceeds 1 MB before Amazon DynamoDB reaches this limit, it stops the operation and returns the matching values\n      up to the limit, and a <i>LastEvaluatedKey</i> to apply in a subsequent operation to\n      continue the operation. For more information see <a\n        href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html\"\n        >Query and Scan</a> in the Amazon DynamoDB Developer Guide.</p>\n "
          },
          "ConsistentRead": {
            "shape_name": "ConsistentRead",
            "type": "boolean",
            "documentation": "     <p>If set to <code>true</code>, then the operation uses strongly consistent reads; otherwise, eventually\n      consistent reads are used.</p>\n \n      <p>Strongly consistent reads are not supported on global secondary indexes. If you query a global secondary index with\n        <i>ConsistentRead</i> set to <code>true</code>, you will receive an error message.</p>\n  "
          },
          "KeyConditions": {
            "shape_name": "KeyConditions",
            "type": "map",
            "keys": {
              "shape_name": "AttributeName",
              "type": "string",
              "documentation": null
            },
            "members": {
              "shape_name": "Condition",
              "type": "structure",
              "members": {
                "AttributeValueList": {
                  "shape_name": "AttributeValueList",
                  "type": "list",
                  "members": {
                    "shape_name": "AttributeValue",
                    "type": "structure",
                    "members": {
                      "S": {
                        "shape_name": "StringAttributeValue",
                        "type": "string",
                        "documentation": "\n    <p>A String data type</p>\n  "
                      },
                      "N": {
                        "shape_name": "NumberAttributeValue",
                        "type": "string",
                        "documentation": "\n    <p>A Number data type</p>\n  "
                      },
                      "B": {
                        "shape_name": "BinaryAttributeValue",
                        "type": "blob",
                        "documentation": "\n    <p>A Binary data type</p>\n  "
                      },
                      "SS": {
                        "shape_name": "StringSetAttributeValue",
                        "type": "list",
                        "members": {
                          "shape_name": "StringAttributeValue",
                          "type": "string",
                          "documentation": null
                        },
                        "documentation": "\n    <p>A String set data type</p>\n  "
                      },
                      "NS": {
                        "shape_name": "NumberSetAttributeValue",
                        "type": "list",
                        "members": {
                          "shape_name": "NumberAttributeValue",
                          "type": "string",
                          "documentation": null
                        },
                        "documentation": "\n    <p> Number set data type</p>\n  "
                      },
                      "BS": {
                        "shape_name": "BinarySetAttributeValue",
                        "type": "list",
                        "members": {
                          "shape_name": "BinaryAttributeValue",
                          "type": "blob",
                          "documentation": null
                        },
                        "documentation": "\n    <p>A Binary set data type</p>\n  "
                      }
                    },
                    "documentation": "\n    <p>Represents the data for an attribute. You can set one, and only one, of the elements.</p>\n  "
                  },
                  "documentation": "\n    <p>One or more values to evaluate against the supplied attribute. This list contains\n      exactly one value, except for a <code>BETWEEN</code> or <code>IN</code> comparison, in which\n      case the list contains two values.</p>\n    <note>\n      <p>For type Number, value comparisons are numeric.</p>\n      <p>String value comparisons for greater than, equals, or less than are based on ASCII\n        character code values. For example, <code>a</code> is greater than <code>A</code>, and\n          <code>aa</code> is greater than <code>B</code>. For a list of code values, see <a href=\"http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\">http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters</a>.</p>\n      <p>For Binary, Amazon DynamoDB treats each byte of the binary data as unsigned when it compares binary\n        values, for example when evaluating query expressions.</p>\n    </note>\n  "
                },
                "ComparisonOperator": {
                  "shape_name": "ComparisonOperator",
                  "type": "string",
                  "enum": [
                    "EQ",
                    "NE",
                    "IN",
                    "LE",
                    "LT",
                    "GE",
                    "GT",
                    "BETWEEN",
                    "NOT_NULL",
                    "NULL",
                    "CONTAINS",
                    "NOT_CONTAINS",
                    "BEGINS_WITH"
                  ],
                  "documentation": "\n    <p>A comparator for evaluating attributes. For example, equals, greater than, less\n      than, etc.</p> <p>Valid comparison operators for Query:</p>\n      <p><code>EQ | LE | LT | GE | GT | BEGINS_WITH | BETWEEN</code></p>\n <p>Valid comparison operators for Scan:</p>\n      <p><code>EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN</code></p>\n <p>For\n      information on specifying data types in JSON, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataFormat.html\">JSON\n        Data Format</a> in the Amazon DynamoDB Developer Guide.</p>\n    <p>The following are descriptions of each comparison operator.</p>\n    <ul>\n      <li>\n        <p><code>EQ</code> : Equal. </p>\n        <p><i>AttributeValueList</i> can contain only one <i>AttributeValue</i> of type String,\n          Number, or Binary (not a set). If an item contains an <i>AttributeValue</i> of a different\n          type than the one specified in the request, the value does not match. For example,\n            <code>{\"S\":\"6\"}</code> does not equal <code>{\"N\":\"6\"}</code>. Also,\n            <code>{\"N\":\"6\"}</code> does not equal <code>{\"NS\":[\"6\", \"2\", \"1\"]}</code>.</p>\n        <p></p>\n      </li>\n      <li>\n        <p><code>NE</code> : Not equal. </p>\n        <p><i>AttributeValueList</i> can contain only one <i>AttributeValue</i> of type String,\n          Number, or Binary (not a set). If an item contains an <i>AttributeValue</i> of a different\n          type than the one specified in the request, the value does not match. For example,\n            <code>{\"S\":\"6\"}</code> does not equal <code>{\"N\":\"6\"}</code>. Also,\n            <code>{\"N\":\"6\"}</code> does not equal <code>{\"NS\":[\"6\", \"2\", \"1\"]}</code>.</p>\n        <p></p>\n      </li>\n      <li>\n        <p><code>LE</code> : Less than or equal. </p>\n        <p><i>AttributeValueList</i> can contain only one <i>AttributeValue</i> of type String,\n          Number, or Binary (not a set). If an item contains an <i>AttributeValue</i> of a different\n          type than the one specified in the request, the value does not match. For example,\n            <code>{\"S\":\"6\"}</code> does not equal <code>{\"N\":\"6\"}</code>. Also,\n            <code>{\"N\":\"6\"}</code> does not compare to <code>{\"NS\":[\"6\", \"2\", \"1\"]}</code>.</p>\n        <p></p>\n      </li>\n      <li>\n        <p><code>LT</code> : Less than. </p>\n        <p><i>AttributeValueList</i> can contain only one <i>AttributeValue</i> of type String,\n          Number, or Binary (not a set). If an item contains an <i>AttributeValue</i> of a different\n          type than the one specified in the request, the value does not match. For example,\n            <code>{\"S\":\"6\"}</code> does not equal <code>{\"N\":\"6\"}</code>. Also,\n            <code>{\"N\":\"6\"}</code> does not compare to <code>{\"NS\":[\"6\", \"2\", \"1\"]}</code>.</p>\n        <p></p>\n      </li>\n      <li>\n        <p><code>GE</code> : Greater than or equal. </p>\n        <p><i>AttributeValueList</i> can contain only one <i>AttributeValue</i> of type String,\n          Number, or Binary (not a set). If an item contains an <i>AttributeValue</i> of a different\n          type than the one specified in the request, the value does not match. For example,\n            <code>{\"S\":\"6\"}</code> does not equal <code>{\"N\":\"6\"}</code>. Also,\n            <code>{\"N\":\"6\"}</code> does not compare to <code>{\"NS\":[\"6\", \"2\", \"1\"]}</code>.</p>\n        <p></p>\n      </li>\n      <li>\n        <p><code>GT</code> : Greater than. </p>\n        <p><i>AttributeValueList</i> can contain only one <i>AttributeValue</i> of type String,\n          Number, or Binary (not a set). If an item contains an <i>AttributeValue</i> of a different\n          type than the one specified in the request, the value does not match. For example,\n            <code>{\"S\":\"6\"}</code> does not equal <code>{\"N\":\"6\"}</code>. Also,\n            <code>{\"N\":\"6\"}</code> does not compare to <code>{\"NS\":[\"6\", \"2\", \"1\"]}</code>.</p>\n        <p></p>\n      </li>\n      <li>\n        <p><code>NOT_NULL</code> : The attribute exists. </p>\n      </li>\n      <li>\n        <p><code>NULL</code> : The attribute does not exist. </p>\n      </li>\n      <li>\n        <p><code>CONTAINS</code> : checks for a subsequence, or value in a set.</p>\n        <p><i>AttributeValueList</i> can contain only one <i>AttributeValue</i> of type String,\n          Number, or Binary (not a set). If the target attribute of the comparison is a String, then\n          the operation checks for a substring match. If the target attribute of the comparison is\n          Binary, then the operation looks for a subsequence of the target that matches the input.\n          If the target attribute of the comparison is a set (\"SS\", \"NS\", or \"BS\"), then the\n          operation checks for a member of the set (not as a substring).</p>\n      </li>\n      <li>\n        <p><code>NOT_CONTAINS</code> : checks for absence of a subsequence, or absence of a value in\n          a set.</p>\n        <p><i>AttributeValueList</i> can contain only one <i>AttributeValue</i> of type String,\n          Number, or Binary (not a set). If the target attribute of the comparison is a String, then\n          the operation checks for the absence of a substring match. If the target attribute of the\n          comparison is Binary, then the operation checks for the absence of a subsequence of the\n          target that matches the input. If the target attribute of the comparison is a set (\"SS\",\n          \"NS\", or \"BS\"), then the operation checks for the absence of a member of the set (not as a\n          substring).</p>\n      </li>\n      <li>\n        <p><code>BEGINS_WITH</code> : checks for a prefix. </p>\n        <p><i>AttributeValueList</i> can contain only one <i>AttributeValue</i> of type String or\n          Binary (not a Number or a set). The target attribute of the comparison must be a String or\n          Binary (not a Number or a set).</p>\n        <p></p>\n      </li>\n      <li>\n        <p><code>IN</code> : checks for exact matches.</p>\n        <p><i>AttributeValueList</i> can contain more than one <i>AttributeValue</i> of type String,\n          Number, or Binary (not a set). The target attribute of the comparison must be of the same\n          type and exact value to match. A String never matches a String set.</p>\n      </li>\n      <li>\n        <p><code>BETWEEN</code> : Greater than or equal to the first value, and less than or equal\n          to the second value. </p>\n        <p><i>AttributeValueList</i> must contain two <i>AttributeValue</i> elements of the same\n          type, either String, Number, or Binary (not a set). A target attribute matches if the\n          target value is greater than, or equal to, the first element and less than, or equal to,\n          the second element. If an item contains an <i>AttributeValue</i> of a different type than\n          the one specified in the request, the value does not match. For example,\n            <code>{\"S\":\"6\"}</code> does not compare to <code>{\"N\":\"6\"}</code>. Also,\n            <code>{\"N\":\"6\"}</code> does not compare to <code>{\"NS\":[\"6\", \"2\", \"1\"]}</code></p>\n      </li>\n    </ul>\n  ",
                  "required": true
                }
              },
              "documentation": "\n    <p>Represents a selection criteria for a <i>Query</i> or <i>Scan</i> operation.</p>\n    <ul>\n      <li>\n        <p>For a <i>Query</i> operation, the condition specifies the key attributes to use when\n          querying a table or an index.</p>\n      </li>\n      <li>\n        <p>For a <i>Scan</i> operation, the condition is used to evaluate the scan results and\n          return only the desired values.</p>\n      </li>\n    </ul>\n    <p>Multiple conditions are \"ANDed\" together. In other words, all of the conditions must be met\n      to be included in the output.</p>\n  "
            },
            "documentation": "\n    <p>The selection criteria for the query.</p>\n    <p>For a query on a table, you can only have conditions on the table primary key attributes. You\n      must specify the hash key attribute name and value as an <code>EQ</code> condition. You can\n      optionally specify a second condition, referring to the range key attribute.</p>\n    <p>For a query on an index, you can only have conditions on the index key attributes.\n      You must specify the index hash attribute name and value as an EQ condition. You can\n      optionally specify a second condition, referring to the index key range attribute.</p>\n    <p>Multiple conditions are evaluated using \"AND\"; in other words, all of the conditions must be met in order for an item to appear in the results results. </p>\n  <p>Each <i>KeyConditions</i> element consists of an attribute name to compare, along with the following:</p>\n    <ul>\n      <li>\n<p><i>AttributeValueList</i> - One or more values to evaluate against the supplied attribute. This list contains\n      exactly one value, except for a <code>BETWEEN</code> comparison, in which\n      case the list contains two values.</p>\n    <note>\n      <p>For type Number, value comparisons are numeric.</p>\n      <p>String value comparisons for greater than, equals, or less than are based on ASCII\n        character code values. For example, <code>a</code> is greater than <code>A</code>, and\n        <code>aa</code> is greater than <code>B</code>. For a list of code values, see <a href=\"http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\">http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters</a>.</p>\n      <p>For Binary, Amazon DynamoDB treats each byte of the binary data as unsigned when it compares binary\n        values, for example when evaluating query expressions.</p>\n    </note>\n      </li>\n      <li>\n<p><i>ComparisonOperator</i> - A comparator for evaluating attributes. For example, equals, greater than, less\n        than, etc.</p>\n        <p>Valid comparison operators for Query:</p>\n      <p><code>EQ | LE | LT | GE | GT | BEGINS_WITH | BETWEEN</code></p>\n \n        <p>For\n          information on specifying data types in JSON, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataFormat.html\">JSON\n            Data Format</a> in the Amazon DynamoDB Developer Guide.</p>\n      <p>The following are descriptions of each comparison operator.</p>\n      <ul>\n        <li>\n          <p><code>EQ</code> : Equal. </p>\n          <p><i>AttributeValueList</i> can contain only one <i>AttributeValue</i> of type String,\n            Number, or Binary (not a set). If an item contains an <i>AttributeValue</i> of a different\n            type than the one specified in the request, the value does not match. For example,\n            <code>{\"S\":\"6\"}</code> does not equal <code>{\"N\":\"6\"}</code>. Also,\n            <code>{\"N\":\"6\"}</code> does not equal <code>{\"NS\":[\"6\", \"2\", \"1\"]}</code>.</p>\n          <p></p>\n        </li>\n        <li>\n          <p><code>LE</code> : Less than or equal. </p>\n          <p><i>AttributeValueList</i> can contain only one <i>AttributeValue</i> of type String,\n            Number, or Binary (not a set). If an item contains an <i>AttributeValue</i> of a different\n            type than the one specified in the request, the value does not match. For example,\n            <code>{\"S\":\"6\"}</code> does not equal <code>{\"N\":\"6\"}</code>. Also,\n            <code>{\"N\":\"6\"}</code> does not compare to <code>{\"NS\":[\"6\", \"2\", \"1\"]}</code>.</p>\n          <p></p>\n        </li>\n        <li>\n          <p><code>LT</code> : Less than. </p>\n          <p><i>AttributeValueList</i> can contain only one <i>AttributeValue</i> of type String,\n            Number, or Binary (not a set). If an item contains an <i>AttributeValue</i> of a different\n            type than the one specified in the request, the value does not match. For example,\n            <code>{\"S\":\"6\"}</code> does not equal <code>{\"N\":\"6\"}</code>. Also,\n            <code>{\"N\":\"6\"}</code> does not compare to <code>{\"NS\":[\"6\", \"2\", \"1\"]}</code>.</p>\n          <p></p>\n        </li>\n        <li>\n          <p><code>GE</code> : Greater than or equal. </p>\n          <p><i>AttributeValueList</i> can contain only one <i>AttributeValue</i> of type String,\n            Number, or Binary (not a set). If an item contains an <i>AttributeValue</i> of a different\n            type than the one specified in the request, the value does not match. For example,\n            <code>{\"S\":\"6\"}</code> does not equal <code>{\"N\":\"6\"}</code>. Also,\n            <code>{\"N\":\"6\"}</code> does not compare to <code>{\"NS\":[\"6\", \"2\", \"1\"]}</code>.</p>\n          <p></p>\n        </li>\n        <li>\n          <p><code>GT</code> : Greater than. </p>\n          <p><i>AttributeValueList</i> can contain only one <i>AttributeValue</i> of type String,\n            Number, or Binary (not a set). If an item contains an <i>AttributeValue</i> of a different\n            type than the one specified in the request, the value does not match. For example,\n            <code>{\"S\":\"6\"}</code> does not equal <code>{\"N\":\"6\"}</code>. Also,\n            <code>{\"N\":\"6\"}</code> does not compare to <code>{\"NS\":[\"6\", \"2\", \"1\"]}</code>.</p>\n          <p></p>\n        </li>\n        <li>\n          <p><code>BEGINS_WITH</code> : checks for a prefix. </p>\n          <p><i>AttributeValueList</i> can contain only one <i>AttributeValue</i> of type String or\n            Binary (not a Number or a set). The target attribute of the comparison must be a String or\n            Binary (not a Number or a set).</p>\n          <p></p>\n        </li>\n        <li>\n          <p><code>BETWEEN</code> : Greater than or equal to the first value, and less than or equal\n            to the second value. </p>\n          <p><i>AttributeValueList</i> must contain two <i>AttributeValue</i> elements of the same\n            type, either String, Number, or Binary (not a set). A target attribute matches if the\n            target value is greater than, or equal to, the first element and less than, or equal to,\n            the second element. If an item contains an <i>AttributeValue</i> of a different type than\n            the one specified in the request, the value does not match. For example,\n            <code>{\"S\":\"6\"}</code> does not compare to <code>{\"N\":\"6\"}</code>. Also,\n            <code>{\"N\":\"6\"}</code> does not compare to <code>{\"NS\":[\"6\", \"2\", \"1\"]}</code></p>\n        </li>\n      </ul>\n</li>\n</ul>\n  "
          },
          "ScanIndexForward": {
            "shape_name": "BooleanObject",
            "type": "boolean",
            "documentation": "\n    <p>Specifies ascending (true) or descending (false) traversal of the index. Amazon DynamoDB returns results reflecting\n      the requested order determined by the range key. If the data type is Number, the results are returned in numeric order. For String, the results are returned in order of ASCII character code values. For Binary, Amazon DynamoDB treats each byte of the binary data as unsigned when it compares binary values.</p>\n    <p>If <i>ScanIndexForward</i> is not specified, the results are returned in ascending order.</p>\n  "
          },
          "ExclusiveStartKey": {
            "shape_name": "Key",
            "type": "map",
            "keys": {
              "shape_name": "AttributeName",
              "type": "string",
              "documentation": null
            },
            "members": {
              "shape_name": "AttributeValue",
              "type": "structure",
              "members": {
                "S": {
                  "shape_name": "StringAttributeValue",
                  "type": "string",
                  "documentation": "\n    <p>A String data type</p>\n  "
                },
                "N": {
                  "shape_name": "NumberAttributeValue",
                  "type": "string",
                  "documentation": "\n    <p>A Number data type</p>\n  "
                },
                "B": {
                  "shape_name": "BinaryAttributeValue",
                  "type": "blob",
                  "documentation": "\n    <p>A Binary data type</p>\n  "
                },
                "SS": {
                  "shape_name": "StringSetAttributeValue",
                  "type": "list",
                  "members": {
                    "shape_name": "StringAttributeValue",
                    "type": "string",
                    "documentation": null
                  },
                  "documentation": "\n    <p>A String set data type</p>\n  "
                },
                "NS": {
                  "shape_name": "NumberSetAttributeValue",
                  "type": "list",
                  "members": {
                    "shape_name": "NumberAttributeValue",
                    "type": "string",
                    "documentation": null
                  },
                  "documentation": "\n    <p> Number set data type</p>\n  "
                },
                "BS": {
                  "shape_name": "BinarySetAttributeValue",
                  "type": "list",
                  "members": {
                    "shape_name": "BinaryAttributeValue",
                    "type": "blob",
                    "documentation": null
                  },
                  "documentation": "\n    <p>A Binary set data type</p>\n  "
                }
              },
              "documentation": "\n    <p>Represents the data for an attribute. You can set one, and only one, of the elements.</p>\n  "
            },
            "documentation": "     <p>The primary key of the first item that this operation will evalute. Use the value that was returned for <i>LastEvaluatedKey</i> in the previous operation.</p>\n       <p>The data type for <i>ExclusiveStartKey</i> must be String, Number or Binary. No set data types are allowed.</p> \n "
          },
          "ReturnConsumedCapacity": {
            "shape_name": "ReturnConsumedCapacity",
            "type": "string",
            "enum": [
              "INDEXES",
              "TOTAL",
              "NONE"
            ],
            "documentation": "\n    <p>If set to <code>TOTAL</code>, the response includes <i>ConsumedCapacity</i> data for tables and indexes. If set to <code>INDEXES</code>, the repsonse includes <i>ConsumedCapacity</i> for indexes. If set to <code>NONE</code> (the default), <i>ConsumedCapacity</i> is not included in the response.</p>\n  "
          }
        },
        "documentation": "\n    <p>Represents the input of a <i>Query</i> operation.</p>\n  "
      },
      "output": {
        "shape_name": "QueryOutput",
        "type": "structure",
        "members": {
          "Items": {
            "shape_name": "ItemList",
            "type": "list",
            "members": {
              "shape_name": "AttributeMap",
              "type": "map",
              "keys": {
                "shape_name": "AttributeName",
                "type": "string",
                "documentation": null
              },
              "members": {
                "shape_name": "AttributeValue",
                "type": "structure",
                "members": {
                  "S": {
                    "shape_name": "StringAttributeValue",
                    "type": "string",
                    "documentation": "\n    <p>A String data type</p>\n  "
                  },
                  "N": {
                    "shape_name": "NumberAttributeValue",
                    "type": "string",
                    "documentation": "\n    <p>A Number data type</p>\n  "
                  },
                  "B": {
                    "shape_name": "BinaryAttributeValue",
                    "type": "blob",
                    "documentation": "\n    <p>A Binary data type</p>\n  "
                  },
                  "SS": {
                    "shape_name": "StringSetAttributeValue",
                    "type": "list",
                    "members": {
                      "shape_name": "StringAttributeValue",
                      "type": "string",
                      "documentation": null
                    },
                    "documentation": "\n    <p>A String set data type</p>\n  "
                  },
                  "NS": {
                    "shape_name": "NumberSetAttributeValue",
                    "type": "list",
                    "members": {
                      "shape_name": "NumberAttributeValue",
                      "type": "string",
                      "documentation": null
                    },
                    "documentation": "\n    <p> Number set data type</p>\n  "
                  },
                  "BS": {
                    "shape_name": "BinarySetAttributeValue",
                    "type": "list",
                    "members": {
                      "shape_name": "BinaryAttributeValue",
                      "type": "blob",
                      "documentation": null
                    },
                    "documentation": "\n    <p>A Binary set data type</p>\n  "
                  }
                },
                "documentation": "\n    <p>Represents the data for an attribute. You can set one, and only one, of the elements.</p>\n  "
              },
              "documentation": null
            },
            "documentation": "\n    <p>An array of item attributes that match the query criteria. Each element in this array consists of an attribute name and the value for that attribute.</p>\n  "
          },
          "Count": {
            "shape_name": "Integer",
            "type": "integer",
            "documentation": "\n    <p>The number of items in the response.</p>\n  "
          },
          "LastEvaluatedKey": {
            "shape_name": "Key",
            "type": "map",
            "keys": {
              "shape_name": "AttributeName",
              "type": "string",
              "documentation": null
            },
            "members": {
              "shape_name": "AttributeValue",
              "type": "structure",
              "members": {
                "S": {
                  "shape_name": "StringAttributeValue",
                  "type": "string",
                  "documentation": "\n    <p>A String data type</p>\n  "
                },
                "N": {
                  "shape_name": "NumberAttributeValue",
                  "type": "string",
                  "documentation": "\n    <p>A Number data type</p>\n  "
                },
                "B": {
                  "shape_name": "BinaryAttributeValue",
                  "type": "blob",
                  "documentation": "\n    <p>A Binary data type</p>\n  "
                },
                "SS": {
                  "shape_name": "StringSetAttributeValue",
                  "type": "list",
                  "members": {
                    "shape_name": "StringAttributeValue",
                    "type": "string",
                    "documentation": null
                  },
                  "documentation": "\n    <p>A String set data type</p>\n  "
                },
                "NS": {
                  "shape_name": "NumberSetAttributeValue",
                  "type": "list",
                  "members": {
                    "shape_name": "NumberAttributeValue",
                    "type": "string",
                    "documentation": null
                  },
                  "documentation": "\n    <p> Number set data type</p>\n  "
                },
                "BS": {
                  "shape_name": "BinarySetAttributeValue",
                  "type": "list",
                  "members": {
                    "shape_name": "BinaryAttributeValue",
                    "type": "blob",
                    "documentation": null
                  },
                  "documentation": "\n    <p>A Binary set data type</p>\n  "
                }
              },
              "documentation": "\n    <p>Represents the data for an attribute. You can set one, and only one, of the elements.</p>\n  "
            },
            "documentation": "     <p>The primary key of the item where the operation\n      stopped, inclusive of the previous result set. Use this value to\n      start a new operation, excluding this value in the new\n      request.</p>\n    <p>If <i>LastEvaluatedKey</i> is null, then the \"last page\" of results has been processed and there is no more data to be retrieved.</p>\n    <p>If <i>LastEvaluatedKey</i> is anything other than null, this does not necessarily mean that there is more data in the result set. The only way to know when you have reached the end of the result set is when <i>LastEvaluatedKey</i> is null.</p>\n "
          },
          "ConsumedCapacity": {
            "shape_name": "ConsumedCapacity",
            "type": "structure",
            "members": {
              "TableName": {
                "shape_name": "TableName",
                "type": "string",
                "min_length": 3,
                "max_length": 255,
                "pattern": "[a-zA-Z0-9_.-]+",
                "documentation": "\n    <p>The name of the table that was affected by the operation.</p>\n  "
              },
              "CapacityUnits": {
                "shape_name": "ConsumedCapacityUnits",
                "type": "double",
                "documentation": "\n    <p>The total number of capacity units consumed by the operation.</p>\n  "
              },
              "Table": {
                "shape_name": "Capacity",
                "type": "structure",
                "members": {
                  "CapacityUnits": {
                    "shape_name": "ConsumedCapacityUnits",
                    "type": "double",
                    "documentation": "\n    <p>The total number of capacity units consumed on a table or an index.</p>\n  "
                  }
                },
                "documentation": "\n    <p>The amount of throughput consumed on the table affected by the operation.</p>\n  "
              },
              "LocalSecondaryIndexes": {
                "shape_name": "SecondaryIndexesCapacityMap",
                "type": "map",
                "keys": {
                  "shape_name": "IndexName",
                  "type": "string",
                  "min_length": 3,
                  "max_length": 255,
                  "pattern": "[a-zA-Z0-9_.-]+",
                  "documentation": null
                },
                "members": {
                  "shape_name": "Capacity",
                  "type": "structure",
                  "members": {
                    "CapacityUnits": {
                      "shape_name": "ConsumedCapacityUnits",
                      "type": "double",
                      "documentation": "\n    <p>The total number of capacity units consumed on a table or an index.</p>\n  "
                    }
                  },
                  "documentation": "\n    <p>Represents the amount of provisioned throughput capacity consumed on a table or an index. </p>\n  "
                },
                "documentation": "\n    <p>The amount of throughput consumed on each local index affected by the operation.</p>\n  "
              },
              "GlobalSecondaryIndexes": {
                "shape_name": "SecondaryIndexesCapacityMap",
                "type": "map",
                "keys": {
                  "shape_name": "IndexName",
                  "type": "string",
                  "min_length": 3,
                  "max_length": 255,
                  "pattern": "[a-zA-Z0-9_.-]+",
                  "documentation": null
                },
                "members": {
                  "shape_name": "Capacity",
                  "type": "structure",
                  "members": {
                    "CapacityUnits": {
                      "shape_name": "ConsumedCapacityUnits",
                      "type": "double",
                      "documentation": "\n    <p>The total number of capacity units consumed on a table or an index.</p>\n  "
                    }
                  },
                  "documentation": "\n    <p>Represents the amount of provisioned throughput capacity consumed on a table or an index. </p>\n  "
                },
                "documentation": "\n    <p>The amount of throughput consumed on each global index affected by the operation.</p>\n  "
              }
            },
            "documentation": "\n    <p>Represents the capacity units consumed by an operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. <i>ConsumedCapacity</i> is only returned if it was asked for in the request. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html\">Provisioned Throughput</a> in the Amazon DynamoDB Developer Guide.</p>\n  "
          }
        },
        "documentation": "\n    <p>Represents the output of a <i>Query</i> operation.</p>\n  "
      },
      "errors": [
        {
          "shape_name": "ProvisionedThroughputExceededException",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>You exceeded your maximum allowed provisioned throughput.</p>\n  "
            }
          },
          "documentation": "\n    <p>The request rate is too high, or the request is too large, for the available throughput to\n      accommodate. The AWS SDKs automatically retry requests that receive this exception;\n      therefore, your request will eventually succeed, unless the request is too large or your retry\n      queue is too large to finish. Reduce the frequency of requests by using the strategies listed in\n        <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#APIRetries\">Error Retries and Exponential Backoff</a> in the Amazon DynamoDB Developer Guide.</p>\n  "
        },
        {
          "shape_name": "ResourceNotFoundException",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>The resource which is being requested does not exist.</p>\n  "
            }
          },
          "documentation": "\n    <p>The operation tried to access a nonexistent table or index. The resource may not be specified correctly, or its status may not be <code>ACTIVE</code>.</p>\n  "
        },
        {
          "shape_name": "InternalServerError",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>The server encountered an internal error trying to fulfill the request.</p>\n  "
            }
          },
          "documentation": "\n    <p>An error occurred on the server side.</p>\n  "
        }
      ],
      "documentation": "\n    <p>A <i>Query</i> operation directly accesses items from a table using the table primary key, or\n      from an index using the index key. You must provide a specific hash key value. You can narrow\n      the scope of the query by using comparison operators on the range key value, or on the index\n      key. You can use the <i>ScanIndexForward</i> parameter to get results in forward or reverse\n      order, by range key or by index key. </p>\n    <p>Queries that do not return results consume the minimum read capacity units according to the\n      type of read.</p>\n      <p>If the total number of items meeting the query criteria exceeds the result set size limit of 1 MB, the query\n        stops and results are returned to the user with a <i>LastEvaluatedKey</i> to continue the\n        query in a subsequent operation. Unlike a <i>Scan</i> operation, a <i>Query</i> operation\n        never returns an empty result set <i>and</i> a <i>LastEvaluatedKey</i>. The\n          <i>LastEvaluatedKey</i> is only provided if the results exceed 1 MB, or if you have used\n          <i>Limit</i>. </p>\n    <p>You can query a table, a local secondary index (LSI), or a global secondary index (GSI). For a query on a table or on an LSI, you can set <i>ConsistentRead</i> to true and obtain a strongly consistent result. GSIs support eventually consistent reads only, so do not specify <i>ConsistentRead</i> when querying a GSI.</p>\n    <examples>\n      <example>\n        <name>Retrieving a Range of Items</name>\n        <description>\n          <p>This example queries the <i>Thread</i> table for postings between two dates. There is an index on\n            <i>LastPostDateTime</i> to facilitate fast lookups on this attribute.</p>\n          <p>All of the attributes will be returned. Any attributes that are not projected into the\n            index will cause Amazon DynamoDB to fetch those attributes from the <i>Thread</i> table;\n            this fetching occurs automatically.</p>\n        </description>\n        <request><![CDATA[\nPOST / HTTP/1.1\nHost: dynamodb.<region>.<domain>;\nX-Amz-Date: <Date>\nAuthorization: AWS4-HMAC-SHA256 Credential=<Credential>, SignedHeaders=content-length;content-type;host;user-agent;x-amz-content-sha256;x-amz-date;x-amz-target, Signature=<Signature>\nUser-Agent: <UserAgentString>\nx-amz-content-sha256: <PayloadHash>\nContent-Type: application/x-amz-json-1.0\nContent-Length: <PayloadSizeBytes>     \nConnection: Keep-Alive]]>\nX-Amz-Target: DynamoDB_20120810.Query \n\n{\n    \"TableName\": \"Thread\",\n    \"IndexName\": \"LastPostIndex\",\n    \"Select\": \"ALL_ATTRIBUTES\",\n    \"Limit\":3,\n    \"ConsistentRead\": true,\n    \"KeyConditions\": {\n        \"LastPostDateTime\": {\n            \"AttributeValueList\": [\n                {\n                    \"S\": \"20130101\"\n                },\n                {\n                    \"S\": \"20130115\"\n                }\n            ],\n            \"ComparisonOperator\": \"BETWEEN\"\n        },\n        \"ForumName\": {\n            \"AttributeValueList\": [\n                {\n                    \"S\": \"Amazon DynamoDB\"\n                }\n            ],\n            \"ComparisonOperator\": \"EQ\"\n        }\n    },\n    \"ReturnConsumedCapacity\": \"TOTAL\"\n}\n        </request>\n        <response><![CDATA[\nHTTP/1.1 200 OK\nx-amzn-RequestId: <RequestId> \nx-amz-crc32: <Checksum>\nContent-Type: application/x-amz-json-1.0\nContent-Length: <PayloadSizeBytes>\nDate: <Date>\n]]>\n{\n    \"Count\": 3,\n    \"Items\": [\n        {\n            \"LastPostedBy\": {\n                \"S\": \"fred@example.com\"\n            },\n            \"ForumName\": {\n                \"S\": \"Amazon DynamoDB\"\n            },\n            \"LastPostDateTime\": {\n                \"S\": \"20130102054211\"\n            },\n            \"Tags\": {\n                \"SS\": [\"Problem\",\"Question\"]\n            }\n        },\n        {\n            \"LastPostedBy\": {\n                \"S\": \"alice@example.com\"\n            },\n            \"ForumName\": {\n                \"S\": \"Amazon DynamoDB\"\n            },\n            \"LastPostDateTime\": {\n                    \"S\": \"20130105111307\"\n            },\n            \"Tags\": {\n                \"SS\": [\"Idea\"]\n            }\n        },\n        {\n            \"LastPostedBy\": {\n                \"S\": \"bob@example.com\"\n            },\n            \"ForumName\": {\n                \"S\": \"Amazon DynamoDB\"\n            },\n            \"LastPostDateTime\": {\n                \"S\": \"20130108094417\"\n            },\n            \"Tags\": {\n                \"SS\": [\"AppDesign\", \"HelpMe\"]\n            }\n        }\n    ],\n    \"ConsumedCapacity\": {\n        \"TableName\": \"Thread\",\n        \"CapacityUnits\": 1\n    }\n}\n        </response>\n      </example>\n      <example>\n        <name>Counting Items</name>\n        <description>\n          <p>This example returns the number of items in the Thread table for a particular forum.</p>\n        </description>\n        <request><![CDATA[\nPOST / HTTP/1.1\nHost: dynamodb.<region>.<domain>;\nX-Amz-Date: <Date>\nAuthorization: AWS4-HMAC-SHA256 Credential=<Credential>, SignedHeaders=content-length;content-type;host;user-agent;x-amz-content-sha256;x-amz-date;x-amz-target, Signature=<Signature>\nUser-Agent: <UserAgentString>\nx-amz-content-sha256: <PayloadHash>\nContent-Type: application/x-amz-json-1.0\nContent-Length: <PayloadSizeBytes>     \nConnection: Keep-Alive]]>\nX-Amz-Target: DynamoDB_20120810.Query \n\n{\n    \"TableName\": \"Thread\",\n    \"Select\": \"COUNT\",\n    \"ConsistentRead\": true,\n    \"KeyConditions\": {\n        \"ForumName\": {\n            \"AttributeValueList\": [\n                {\n                    \"S\": \"Amazon DynamoDB\"\n                }\n            ],\n            \"ComparisonOperator\": \"EQ\"\n        }\n    }\n}\n        </request>\n        <response><![CDATA[\nHTTP/1.1 200 OK\nx-amzn-RequestId: <RequestId> \nx-amz-crc32: <Checksum>\nContent-Type: application/x-amz-json-1.0\nContent-Length: <PayloadSizeBytes>\nDate: <Date>\n]]>\n{\n    \"Count\":`17\n}\n        </response>\n      </example>\n    </examples>\n  "
    },
    "Scan": {
      "name": "Scan",
      "input": {
        "shape_name": "ScanInput",
        "type": "structure",
        "members": {
          "TableName": {
            "shape_name": "TableName",
            "type": "string",
            "min_length": 3,
            "max_length": 255,
            "pattern": "[a-zA-Z0-9_.-]+",
            "documentation": "\n    <p>The name of the table containing the requested items.</p>\n  ",
            "required": true
          },
          "AttributesToGet": {
            "shape_name": "AttributeNameList",
            "type": "list",
            "members": {
              "shape_name": "AttributeName",
              "type": "string",
              "documentation": null
            },
            "min_length": 1,
            "documentation": "     <p>The names of one or more attributes to retrieve.  If no attribute\n      names are specified, then all attributes will be returned. If\n      any of the requested attributes are not found, they will not\n      appear in the result.</p>\n "
          },
          "Limit": {
            "shape_name": "PositiveIntegerObject",
            "type": "integer",
            "min_length": 1,
            "documentation": "      <p>The maximum number of items to evaluate (not necessarily the number of matching items). If\n      Amazon DynamoDB processes the number of items up to the limit while processing the results, it stops the\n      operation and returns the matching values up to that point, and a <i>LastEvaluatedKey</i> to \n      apply in\n      a subsequent operation, so that you can pick up where you left off. Also, if the processed data set size\n      exceeds 1 MB before Amazon DynamoDB reaches this limit, it stops the operation and returns the matching values\n      up to the limit, and a <i>LastEvaluatedKey</i> to apply in a subsequent operation to\n      continue the operation. For more information see <a\n        href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html\"\n        >Query and Scan</a> in the Amazon DynamoDB Developer Guide.</p>\n "
          },
          "Select": {
            "shape_name": "Select",
            "type": "string",
            "enum": [
              "ALL_ATTRIBUTES",
              "ALL_PROJECTED_ATTRIBUTES",
              "SPECIFIC_ATTRIBUTES",
              "COUNT"
            ],
            "documentation": "\n    <p>The attributes to be returned in the result. You can\n      retrieve all item attributes, specific item attributes, or the count \n      of matching items.</p>\n    <ul>\n      <li>\n        <p><code>ALL_ATTRIBUTES</code>: Returns all of the item attributes.</p>\n      </li>\n      <li>\n        <p><code>COUNT</code>: Returns the number of matching items, rather than the matching items\n          themselves.</p>\n      </li>\n      <li>\n        <p>\n          <code>SPECIFIC_ATTRIBUTES</code> : Returns only the attributes listed in <i>AttributesToGet</i>. This is equivalent to\n          specifying <i>AttributesToGet</i> without specifying any value\n          for <i>Select</i>.</p>\n      </li>\n    </ul>\n    <p>If neither <i>Select</i> nor <i>AttributesToGet</i> are specified, Amazon DynamoDB\n      defaults to <code>ALL_ATTRIBUTES</code>. You cannot use both <i>Select</i> and <i>AttributesToGet</i> together in a single\n      request, <i>unless</i> the value for <i>Select</i>\n      is <code>SPECIFIC_ATTRIBUTES</code>. (This usage is equivalent to \n      specifying <i>AttributesToGet</i> without any value for <i>Select</i>.)</p>\n  "
          },
          "ScanFilter": {
            "shape_name": "FilterConditionMap",
            "type": "map",
            "keys": {
              "shape_name": "AttributeName",
              "type": "string",
              "documentation": null
            },
            "members": {
              "shape_name": "Condition",
              "type": "structure",
              "members": {
                "AttributeValueList": {
                  "shape_name": "AttributeValueList",
                  "type": "list",
                  "members": {
                    "shape_name": "AttributeValue",
                    "type": "structure",
                    "members": {
                      "S": {
                        "shape_name": "StringAttributeValue",
                        "type": "string",
                        "documentation": "\n    <p>A String data type</p>\n  "
                      },
                      "N": {
                        "shape_name": "NumberAttributeValue",
                        "type": "string",
                        "documentation": "\n    <p>A Number data type</p>\n  "
                      },
                      "B": {
                        "shape_name": "BinaryAttributeValue",
                        "type": "blob",
                        "documentation": "\n    <p>A Binary data type</p>\n  "
                      },
                      "SS": {
                        "shape_name": "StringSetAttributeValue",
                        "type": "list",
                        "members": {
                          "shape_name": "StringAttributeValue",
                          "type": "string",
                          "documentation": null
                        },
                        "documentation": "\n    <p>A String set data type</p>\n  "
                      },
                      "NS": {
                        "shape_name": "NumberSetAttributeValue",
                        "type": "list",
                        "members": {
                          "shape_name": "NumberAttributeValue",
                          "type": "string",
                          "documentation": null
                        },
                        "documentation": "\n    <p> Number set data type</p>\n  "
                      },
                      "BS": {
                        "shape_name": "BinarySetAttributeValue",
                        "type": "list",
                        "members": {
                          "shape_name": "BinaryAttributeValue",
                          "type": "blob",
                          "documentation": null
                        },
                        "documentation": "\n    <p>A Binary set data type</p>\n  "
                      }
                    },
                    "documentation": "\n    <p>Represents the data for an attribute. You can set one, and only one, of the elements.</p>\n  "
                  },
                  "documentation": "\n    <p>One or more values to evaluate against the supplied attribute. This list contains\n      exactly one value, except for a <code>BETWEEN</code> or <code>IN</code> comparison, in which\n      case the list contains two values.</p>\n    <note>\n      <p>For type Number, value comparisons are numeric.</p>\n      <p>String value comparisons for greater than, equals, or less than are based on ASCII\n        character code values. For example, <code>a</code> is greater than <code>A</code>, and\n          <code>aa</code> is greater than <code>B</code>. For a list of code values, see <a href=\"http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\">http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters</a>.</p>\n      <p>For Binary, Amazon DynamoDB treats each byte of the binary data as unsigned when it compares binary\n        values, for example when evaluating query expressions.</p>\n    </note>\n  "
                },
                "ComparisonOperator": {
                  "shape_name": "ComparisonOperator",
                  "type": "string",
                  "enum": [
                    "EQ",
                    "NE",
                    "IN",
                    "LE",
                    "LT",
                    "GE",
                    "GT",
                    "BETWEEN",
                    "NOT_NULL",
                    "NULL",
                    "CONTAINS",
                    "NOT_CONTAINS",
                    "BEGINS_WITH"
                  ],
                  "documentation": "\n    <p>A comparator for evaluating attributes. For example, equals, greater than, less\n      than, etc.</p> <p>Valid comparison operators for Query:</p>\n      <p><code>EQ | LE | LT | GE | GT | BEGINS_WITH | BETWEEN</code></p>\n <p>Valid comparison operators for Scan:</p>\n      <p><code>EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN</code></p>\n <p>For\n      information on specifying data types in JSON, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataFormat.html\">JSON\n        Data Format</a> in the Amazon DynamoDB Developer Guide.</p>\n    <p>The following are descriptions of each comparison operator.</p>\n    <ul>\n      <li>\n        <p><code>EQ</code> : Equal. </p>\n        <p><i>AttributeValueList</i> can contain only one <i>AttributeValue</i> of type String,\n          Number, or Binary (not a set). If an item contains an <i>AttributeValue</i> of a different\n          type than the one specified in the request, the value does not match. For example,\n            <code>{\"S\":\"6\"}</code> does not equal <code>{\"N\":\"6\"}</code>. Also,\n            <code>{\"N\":\"6\"}</code> does not equal <code>{\"NS\":[\"6\", \"2\", \"1\"]}</code>.</p>\n        <p></p>\n      </li>\n      <li>\n        <p><code>NE</code> : Not equal. </p>\n        <p><i>AttributeValueList</i> can contain only one <i>AttributeValue</i> of type String,\n          Number, or Binary (not a set). If an item contains an <i>AttributeValue</i> of a different\n          type than the one specified in the request, the value does not match. For example,\n            <code>{\"S\":\"6\"}</code> does not equal <code>{\"N\":\"6\"}</code>. Also,\n            <code>{\"N\":\"6\"}</code> does not equal <code>{\"NS\":[\"6\", \"2\", \"1\"]}</code>.</p>\n        <p></p>\n      </li>\n      <li>\n        <p><code>LE</code> : Less than or equal. </p>\n        <p><i>AttributeValueList</i> can contain only one <i>AttributeValue</i> of type String,\n          Number, or Binary (not a set). If an item contains an <i>AttributeValue</i> of a different\n          type than the one specified in the request, the value does not match. For example,\n            <code>{\"S\":\"6\"}</code> does not equal <code>{\"N\":\"6\"}</code>. Also,\n            <code>{\"N\":\"6\"}</code> does not compare to <code>{\"NS\":[\"6\", \"2\", \"1\"]}</code>.</p>\n        <p></p>\n      </li>\n      <li>\n        <p><code>LT</code> : Less than. </p>\n        <p><i>AttributeValueList</i> can contain only one <i>AttributeValue</i> of type String,\n          Number, or Binary (not a set). If an item contains an <i>AttributeValue</i> of a different\n          type than the one specified in the request, the value does not match. For example,\n            <code>{\"S\":\"6\"}</code> does not equal <code>{\"N\":\"6\"}</code>. Also,\n            <code>{\"N\":\"6\"}</code> does not compare to <code>{\"NS\":[\"6\", \"2\", \"1\"]}</code>.</p>\n        <p></p>\n      </li>\n      <li>\n        <p><code>GE</code> : Greater than or equal. </p>\n        <p><i>AttributeValueList</i> can contain only one <i>AttributeValue</i> of type String,\n          Number, or Binary (not a set). If an item contains an <i>AttributeValue</i> of a different\n          type than the one specified in the request, the value does not match. For example,\n            <code>{\"S\":\"6\"}</code> does not equal <code>{\"N\":\"6\"}</code>. Also,\n            <code>{\"N\":\"6\"}</code> does not compare to <code>{\"NS\":[\"6\", \"2\", \"1\"]}</code>.</p>\n        <p></p>\n      </li>\n      <li>\n        <p><code>GT</code> : Greater than. </p>\n        <p><i>AttributeValueList</i> can contain only one <i>AttributeValue</i> of type String,\n          Number, or Binary (not a set). If an item contains an <i>AttributeValue</i> of a different\n          type than the one specified in the request, the value does not match. For example,\n            <code>{\"S\":\"6\"}</code> does not equal <code>{\"N\":\"6\"}</code>. Also,\n            <code>{\"N\":\"6\"}</code> does not compare to <code>{\"NS\":[\"6\", \"2\", \"1\"]}</code>.</p>\n        <p></p>\n      </li>\n      <li>\n        <p><code>NOT_NULL</code> : The attribute exists. </p>\n      </li>\n      <li>\n        <p><code>NULL</code> : The attribute does not exist. </p>\n      </li>\n      <li>\n        <p><code>CONTAINS</code> : checks for a subsequence, or value in a set.</p>\n        <p><i>AttributeValueList</i> can contain only one <i>AttributeValue</i> of type String,\n          Number, or Binary (not a set). If the target attribute of the comparison is a String, then\n          the operation checks for a substring match. If the target attribute of the comparison is\n          Binary, then the operation looks for a subsequence of the target that matches the input.\n          If the target attribute of the comparison is a set (\"SS\", \"NS\", or \"BS\"), then the\n          operation checks for a member of the set (not as a substring).</p>\n      </li>\n      <li>\n        <p><code>NOT_CONTAINS</code> : checks for absence of a subsequence, or absence of a value in\n          a set.</p>\n        <p><i>AttributeValueList</i> can contain only one <i>AttributeValue</i> of type String,\n          Number, or Binary (not a set). If the target attribute of the comparison is a String, then\n          the operation checks for the absence of a substring match. If the target attribute of the\n          comparison is Binary, then the operation checks for the absence of a subsequence of the\n          target that matches the input. If the target attribute of the comparison is a set (\"SS\",\n          \"NS\", or \"BS\"), then the operation checks for the absence of a member of the set (not as a\n          substring).</p>\n      </li>\n      <li>\n        <p><code>BEGINS_WITH</code> : checks for a prefix. </p>\n        <p><i>AttributeValueList</i> can contain only one <i>AttributeValue</i> of type String or\n          Binary (not a Number or a set). The target attribute of the comparison must be a String or\n          Binary (not a Number or a set).</p>\n        <p></p>\n      </li>\n      <li>\n        <p><code>IN</code> : checks for exact matches.</p>\n        <p><i>AttributeValueList</i> can contain more than one <i>AttributeValue</i> of type String,\n          Number, or Binary (not a set). The target attribute of the comparison must be of the same\n          type and exact value to match. A String never matches a String set.</p>\n      </li>\n      <li>\n        <p><code>BETWEEN</code> : Greater than or equal to the first value, and less than or equal\n          to the second value. </p>\n        <p><i>AttributeValueList</i> must contain two <i>AttributeValue</i> elements of the same\n          type, either String, Number, or Binary (not a set). A target attribute matches if the\n          target value is greater than, or equal to, the first element and less than, or equal to,\n          the second element. If an item contains an <i>AttributeValue</i> of a different type than\n          the one specified in the request, the value does not match. For example,\n            <code>{\"S\":\"6\"}</code> does not compare to <code>{\"N\":\"6\"}</code>. Also,\n            <code>{\"N\":\"6\"}</code> does not compare to <code>{\"NS\":[\"6\", \"2\", \"1\"]}</code></p>\n      </li>\n    </ul>\n  ",
                  "required": true
                }
              },
              "documentation": "\n    <p>Represents a selection criteria for a <i>Query</i> or <i>Scan</i> operation.</p>\n    <ul>\n      <li>\n        <p>For a <i>Query</i> operation, the condition specifies the key attributes to use when\n          querying a table or an index.</p>\n      </li>\n      <li>\n        <p>For a <i>Scan</i> operation, the condition is used to evaluate the scan results and\n          return only the desired values.</p>\n      </li>\n    </ul>\n    <p>Multiple conditions are \"ANDed\" together. In other words, all of the conditions must be met\n      to be included in the output.</p>\n  "
            },
            "documentation": "\n    <p>Evaluates the scan results and returns only the desired values. Multiple conditions are\n      treated as \"AND\" operations: all conditions must be met to be included in the results.</p>\n    <p>Each <i>ScanConditions</i> element consists of an attribute name to compare, along with the following:</p>\n    <ul>\n      <li>\n<p><i>AttributeValueList</i> - One or more values to evaluate against the supplied attribute. This list contains\n        exactly one value, except for a <code>BETWEEN</code> or <code>IN</code> comparison, in which\n        case the list contains two values.</p>\n        <note>\n          <p>For type Number, value comparisons are numeric.</p>\n          <p>String value comparisons for greater than, equals, or less than are based on ASCII\n            character code values. For example, <code>a</code> is greater than <code>A</code>, and\n            <code>aa</code> is greater than <code>B</code>. For a list of code values, see <a href=\"http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\">http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters</a>.</p>\n          <p>For Binary, Amazon DynamoDB treats each byte of the binary data as unsigned when it compares binary\n            values, for example when evaluating query expressions.</p>\n        </note>\n      </li>\n      <li>\n<p><i>ComparisonOperator</i> - A comparator for evaluating attributes. For example, equals, greater than, less\n        than, etc.</p>\n        <p>Valid comparison operators for Scan:</p>\n      <p><code>EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN</code></p>\n \n        <p>For\n          information on specifying data types in JSON, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataFormat.html\">JSON\n            Data Format</a> in the Amazon DynamoDB Developer Guide.</p>\n        <p>The following are descriptions of each comparison operator.</p>\n        <ul>\n          <li>\n            <p><code>EQ</code> : Equal. </p>\n            <p><i>AttributeValueList</i> can contain only one <i>AttributeValue</i> of type String,\n              Number, or Binary (not a set). If an item contains an <i>AttributeValue</i> of a different\n              type than the one specified in the request, the value does not match. For example,\n              <code>{\"S\":\"6\"}</code> does not equal <code>{\"N\":\"6\"}</code>. Also,\n              <code>{\"N\":\"6\"}</code> does not equal <code>{\"NS\":[\"6\", \"2\", \"1\"]}</code>.</p>\n            <p></p>\n          </li>\n          <li>\n            <p><code>NE</code> : Not equal. </p>\n            <p><i>AttributeValueList</i> can contain only one <i>AttributeValue</i> of type String,\n              Number, or Binary (not a set). If an item contains an <i>AttributeValue</i> of a different\n              type than the one specified in the request, the value does not match. For example,\n              <code>{\"S\":\"6\"}</code> does not equal <code>{\"N\":\"6\"}</code>. Also,\n              <code>{\"N\":\"6\"}</code> does not equal <code>{\"NS\":[\"6\", \"2\", \"1\"]}</code>.</p>\n            <p></p>\n          </li>\n          <li>\n            <p><code>LE</code> : Less than or equal. </p>\n            <p><i>AttributeValueList</i> can contain only one <i>AttributeValue</i> of type String,\n              Number, or Binary (not a set). If an item contains an <i>AttributeValue</i> of a different\n              type than the one specified in the request, the value does not match. For example,\n              <code>{\"S\":\"6\"}</code> does not equal <code>{\"N\":\"6\"}</code>. Also,\n              <code>{\"N\":\"6\"}</code> does not compare to <code>{\"NS\":[\"6\", \"2\", \"1\"]}</code>.</p>\n            <p></p>\n          </li>\n          <li>\n            <p><code>LT</code> : Less than. </p>\n            <p><i>AttributeValueList</i> can contain only one <i>AttributeValue</i> of type String,\n              Number, or Binary (not a set). If an item contains an <i>AttributeValue</i> of a different\n              type than the one specified in the request, the value does not match. For example,\n              <code>{\"S\":\"6\"}</code> does not equal <code>{\"N\":\"6\"}</code>. Also,\n              <code>{\"N\":\"6\"}</code> does not compare to <code>{\"NS\":[\"6\", \"2\", \"1\"]}</code>.</p>\n            <p></p>\n          </li>\n          <li>\n            <p><code>GE</code> : Greater than or equal. </p>\n            <p><i>AttributeValueList</i> can contain only one <i>AttributeValue</i> of type String,\n              Number, or Binary (not a set). If an item contains an <i>AttributeValue</i> of a different\n              type than the one specified in the request, the value does not match. For example,\n              <code>{\"S\":\"6\"}</code> does not equal <code>{\"N\":\"6\"}</code>. Also,\n              <code>{\"N\":\"6\"}</code> does not compare to <code>{\"NS\":[\"6\", \"2\", \"1\"]}</code>.</p>\n            <p></p>\n          </li>\n          <li>\n            <p><code>GT</code> : Greater than. </p>\n            <p><i>AttributeValueList</i> can contain only one <i>AttributeValue</i> of type String,\n              Number, or Binary (not a set). If an item contains an <i>AttributeValue</i> of a different\n              type than the one specified in the request, the value does not match. For example,\n              <code>{\"S\":\"6\"}</code> does not equal <code>{\"N\":\"6\"}</code>. Also,\n              <code>{\"N\":\"6\"}</code> does not compare to <code>{\"NS\":[\"6\", \"2\", \"1\"]}</code>.</p>\n            <p></p>\n          </li>\n          <li>\n            <p><code>NOT_NULL</code> : The attribute exists. </p>\n          </li>\n          <li>\n            <p><code>NULL</code> : The attribute does not exist. </p>\n          </li>\n          <li>\n            <p><code>CONTAINS</code> : checks for a subsequence, or value in a set.</p>\n            <p><i>AttributeValueList</i> can contain only one <i>AttributeValue</i> of type String,\n              Number, or Binary (not a set). If the target attribute of the comparison is a String, then\n              the operation checks for a substring match. If the target attribute of the comparison is\n              Binary, then the operation looks for a subsequence of the target that matches the input.\n              If the target attribute of the comparison is a set (\"SS\", \"NS\", or \"BS\"), then the\n              operation checks for a member of the set (not as a substring).</p>\n          </li>\n          <li>\n            <p><code>NOT_CONTAINS</code> : checks for absence of a subsequence, or absence of a value in\n              a set.</p>\n            <p><i>AttributeValueList</i> can contain only one <i>AttributeValue</i> of type String,\n              Number, or Binary (not a set). If the target attribute of the comparison is a String, then\n              the operation checks for the absence of a substring match. If the target attribute of the\n              comparison is Binary, then the operation checks for the absence of a subsequence of the\n              target that matches the input. If the target attribute of the comparison is a set (\"SS\",\n              \"NS\", or \"BS\"), then the operation checks for the absence of a member of the set (not as a\n              substring).</p>\n          </li>\n          <li>\n            <p><code>BEGINS_WITH</code> : checks for a prefix. </p>\n            <p><i>AttributeValueList</i> can contain only one <i>AttributeValue</i> of type String or\n              Binary (not a Number or a set). The target attribute of the comparison must be a String or\n              Binary (not a Number or a set).</p>\n            <p></p>\n          </li>\n          <li>\n            <p><code>IN</code> : checks for exact matches.</p>\n            <p><i>AttributeValueList</i> can contain more than one <i>AttributeValue</i> of type String,\n              Number, or Binary (not a set). The target attribute of the comparison must be of the same\n              type and exact value to match. A String never matches a String set.</p>\n          </li>\n          <li>\n            <p><code>BETWEEN</code> : Greater than or equal to the first value, and less than or equal\n              to the second value. </p>\n            <p><i>AttributeValueList</i> must contain two <i>AttributeValue</i> elements of the same\n              type, either String, Number, or Binary (not a set). A target attribute matches if the\n              target value is greater than, or equal to, the first element and less than, or equal to,\n              the second element. If an item contains an <i>AttributeValue</i> of a different type than\n              the one specified in the request, the value does not match. For example,\n              <code>{\"S\":\"6\"}</code> does not compare to <code>{\"N\":\"6\"}</code>. Also,\n              <code>{\"N\":\"6\"}</code> does not compare to <code>{\"NS\":[\"6\", \"2\", \"1\"]}</code></p>\n          </li>\n        </ul>\n      </li>\n    </ul>\n  "
          },
          "ExclusiveStartKey": {
            "shape_name": "Key",
            "type": "map",
            "keys": {
              "shape_name": "AttributeName",
              "type": "string",
              "documentation": null
            },
            "members": {
              "shape_name": "AttributeValue",
              "type": "structure",
              "members": {
                "S": {
                  "shape_name": "StringAttributeValue",
                  "type": "string",
                  "documentation": "\n    <p>A String data type</p>\n  "
                },
                "N": {
                  "shape_name": "NumberAttributeValue",
                  "type": "string",
                  "documentation": "\n    <p>A Number data type</p>\n  "
                },
                "B": {
                  "shape_name": "BinaryAttributeValue",
                  "type": "blob",
                  "documentation": "\n    <p>A Binary data type</p>\n  "
                },
                "SS": {
                  "shape_name": "StringSetAttributeValue",
                  "type": "list",
                  "members": {
                    "shape_name": "StringAttributeValue",
                    "type": "string",
                    "documentation": null
                  },
                  "documentation": "\n    <p>A String set data type</p>\n  "
                },
                "NS": {
                  "shape_name": "NumberSetAttributeValue",
                  "type": "list",
                  "members": {
                    "shape_name": "NumberAttributeValue",
                    "type": "string",
                    "documentation": null
                  },
                  "documentation": "\n    <p> Number set data type</p>\n  "
                },
                "BS": {
                  "shape_name": "BinarySetAttributeValue",
                  "type": "list",
                  "members": {
                    "shape_name": "BinaryAttributeValue",
                    "type": "blob",
                    "documentation": null
                  },
                  "documentation": "\n    <p>A Binary set data type</p>\n  "
                }
              },
              "documentation": "\n    <p>Represents the data for an attribute. You can set one, and only one, of the elements.</p>\n  "
            },
            "documentation": "     <p>The primary key of the first item that this operation will evalute. Use the value that was returned for <i>LastEvaluatedKey</i> in the previous operation.</p>\n       <p>The data type for <i>ExclusiveStartKey</i> must be String, Number or Binary. No set data types are allowed.</p> \n \n    <p>In a parallel scan, a <i>Scan</i> request that includes <i>ExclusiveStartKey</i> must specify the same segment whose previous <i>Scan</i> returned the corresponding value of <i>LastEvaluatedKey</i>.</p>\n  "
          },
          "ReturnConsumedCapacity": {
            "shape_name": "ReturnConsumedCapacity",
            "type": "string",
            "enum": [
              "INDEXES",
              "TOTAL",
              "NONE"
            ],
            "documentation": "\n    <p>If set to <code>TOTAL</code>, the response includes <i>ConsumedCapacity</i> data for tables and indexes. If set to <code>INDEXES</code>, the repsonse includes <i>ConsumedCapacity</i> for indexes. If set to <code>NONE</code> (the default), <i>ConsumedCapacity</i> is not included in the response.</p>\n  "
          },
          "TotalSegments": {
            "shape_name": "ScanTotalSegments",
            "type": "integer",
            "min_length": 1,
            "max_length": 4096,
            "documentation": "\n    <p>For a parallel <i>Scan</i> request, <i>TotalSegments</i> represents the total number of segments into which the <i>Scan</i> operation will be divided. The value of <i>TotalSegments</i>\n      corresponds to the number of application workers that will\n      perform the parallel scan. For example, if you want to scan a table using four\n      application threads, you would specify a <i>TotalSegments</i> value of 4.</p>\n    <p>The value for <i>TotalSegments</i> must be greater than or equal to 1, and less than or equal\n      to 4096. If you specify a <i>TotalSegments</i> value of 1, the <i>Scan</i> will be sequential\n      rather than parallel.</p>\n    <p>If you specify <i>TotalSegments</i>, you must also specify <i>Segment</i>.</p>\n"
          },
          "Segment": {
            "shape_name": "ScanSegment",
            "type": "integer",
            "min_length": 0,
            "max_length": 4095,
            "documentation": "\n    <p>For a parallel <i>Scan</i> request, <i>Segment</i> identifies an individual segment to be scanned by an application worker.</p>\n    <p>Segment IDs are zero-based, so the first segment is always 0. For example, if you want to\n      scan a table using four application threads, the first thread would specify a <i>Segment</i>\n      value of 0, the second thread would specify 1, and so on.</p>\n    <p>The value of <i>LastEvaluatedKey</i> returned from a parallel <i>Scan</i> request must be used as <i>ExclusiveStartKey</i> with the same Segment ID in a subsequent <i>Scan</i> operation.</p>\n    <p>The value for <i>Segment</i> must be greater than or equal to 0, and less than the value provided for <i>TotalSegments</i>.</p>\n    <p>If you specify <i>Segment</i>, you must also specify <i>TotalSegments</i>.</p>\n  "
          }
        },
        "documentation": "\n    <p>Represents the input of a <i>Scan</i> operation.</p>\n  "
      },
      "output": {
        "shape_name": "ScanOutput",
        "type": "structure",
        "members": {
          "Items": {
            "shape_name": "ItemList",
            "type": "list",
            "members": {
              "shape_name": "AttributeMap",
              "type": "map",
              "keys": {
                "shape_name": "AttributeName",
                "type": "string",
                "documentation": null
              },
              "members": {
                "shape_name": "AttributeValue",
                "type": "structure",
                "members": {
                  "S": {
                    "shape_name": "StringAttributeValue",
                    "type": "string",
                    "documentation": "\n    <p>A String data type</p>\n  "
                  },
                  "N": {
                    "shape_name": "NumberAttributeValue",
                    "type": "string",
                    "documentation": "\n    <p>A Number data type</p>\n  "
                  },
                  "B": {
                    "shape_name": "BinaryAttributeValue",
                    "type": "blob",
                    "documentation": "\n    <p>A Binary data type</p>\n  "
                  },
                  "SS": {
                    "shape_name": "StringSetAttributeValue",
                    "type": "list",
                    "members": {
                      "shape_name": "StringAttributeValue",
                      "type": "string",
                      "documentation": null
                    },
                    "documentation": "\n    <p>A String set data type</p>\n  "
                  },
                  "NS": {
                    "shape_name": "NumberSetAttributeValue",
                    "type": "list",
                    "members": {
                      "shape_name": "NumberAttributeValue",
                      "type": "string",
                      "documentation": null
                    },
                    "documentation": "\n    <p> Number set data type</p>\n  "
                  },
                  "BS": {
                    "shape_name": "BinarySetAttributeValue",
                    "type": "list",
                    "members": {
                      "shape_name": "BinaryAttributeValue",
                      "type": "blob",
                      "documentation": null
                    },
                    "documentation": "\n    <p>A Binary set data type</p>\n  "
                  }
                },
                "documentation": "\n    <p>Represents the data for an attribute. You can set one, and only one, of the elements.</p>\n  "
              },
              "documentation": null
            },
            "documentation": "\n    <p>An array of item attributes that match the scan criteria. Each element in this array consists of an attribute name and the value for that attribute.</p>\n  "
          },
          "Count": {
            "shape_name": "Integer",
            "type": "integer",
            "documentation": "\n    <p>The number of items in the response.</p>\n  "
          },
          "ScannedCount": {
            "shape_name": "Integer",
            "type": "integer",
            "documentation": "\n    <p>The number of items in the complete scan, before any filters are applied. A high\n        <i>ScannedCount</i> value with few, or no, <i>Count</i> results indicates an inefficient\n        <i>Scan</i> operation. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#Count\">Count and ScannedCount</a> in the Amazon DynamoDB Developer Guide.</p>\n\n  "
          },
          "LastEvaluatedKey": {
            "shape_name": "Key",
            "type": "map",
            "keys": {
              "shape_name": "AttributeName",
              "type": "string",
              "documentation": null
            },
            "members": {
              "shape_name": "AttributeValue",
              "type": "structure",
              "members": {
                "S": {
                  "shape_name": "StringAttributeValue",
                  "type": "string",
                  "documentation": "\n    <p>A String data type</p>\n  "
                },
                "N": {
                  "shape_name": "NumberAttributeValue",
                  "type": "string",
                  "documentation": "\n    <p>A Number data type</p>\n  "
                },
                "B": {
                  "shape_name": "BinaryAttributeValue",
                  "type": "blob",
                  "documentation": "\n    <p>A Binary data type</p>\n  "
                },
                "SS": {
                  "shape_name": "StringSetAttributeValue",
                  "type": "list",
                  "members": {
                    "shape_name": "StringAttributeValue",
                    "type": "string",
                    "documentation": null
                  },
                  "documentation": "\n    <p>A String set data type</p>\n  "
                },
                "NS": {
                  "shape_name": "NumberSetAttributeValue",
                  "type": "list",
                  "members": {
                    "shape_name": "NumberAttributeValue",
                    "type": "string",
                    "documentation": null
                  },
                  "documentation": "\n    <p> Number set data type</p>\n  "
                },
                "BS": {
                  "shape_name": "BinarySetAttributeValue",
                  "type": "list",
                  "members": {
                    "shape_name": "BinaryAttributeValue",
                    "type": "blob",
                    "documentation": null
                  },
                  "documentation": "\n    <p>A Binary set data type</p>\n  "
                }
              },
              "documentation": "\n    <p>Represents the data for an attribute. You can set one, and only one, of the elements.</p>\n  "
            },
            "documentation": "     <p>The primary key of the item where the operation\n      stopped, inclusive of the previous result set. Use this value to\n      start a new operation, excluding this value in the new\n      request.</p>\n    <p>If <i>LastEvaluatedKey</i> is null, then the \"last page\" of results has been processed and there is no more data to be retrieved.</p>\n    <p>If <i>LastEvaluatedKey</i> is anything other than null, this does not necessarily mean that there is more data in the result set. The only way to know when you have reached the end of the result set is when <i>LastEvaluatedKey</i> is null.</p>\n "
          },
          "ConsumedCapacity": {
            "shape_name": "ConsumedCapacity",
            "type": "structure",
            "members": {
              "TableName": {
                "shape_name": "TableName",
                "type": "string",
                "min_length": 3,
                "max_length": 255,
                "pattern": "[a-zA-Z0-9_.-]+",
                "documentation": "\n    <p>The name of the table that was affected by the operation.</p>\n  "
              },
              "CapacityUnits": {
                "shape_name": "ConsumedCapacityUnits",
                "type": "double",
                "documentation": "\n    <p>The total number of capacity units consumed by the operation.</p>\n  "
              },
              "Table": {
                "shape_name": "Capacity",
                "type": "structure",
                "members": {
                  "CapacityUnits": {
                    "shape_name": "ConsumedCapacityUnits",
                    "type": "double",
                    "documentation": "\n    <p>The total number of capacity units consumed on a table or an index.</p>\n  "
                  }
                },
                "documentation": "\n    <p>The amount of throughput consumed on the table affected by the operation.</p>\n  "
              },
              "LocalSecondaryIndexes": {
                "shape_name": "SecondaryIndexesCapacityMap",
                "type": "map",
                "keys": {
                  "shape_name": "IndexName",
                  "type": "string",
                  "min_length": 3,
                  "max_length": 255,
                  "pattern": "[a-zA-Z0-9_.-]+",
                  "documentation": null
                },
                "members": {
                  "shape_name": "Capacity",
                  "type": "structure",
                  "members": {
                    "CapacityUnits": {
                      "shape_name": "ConsumedCapacityUnits",
                      "type": "double",
                      "documentation": "\n    <p>The total number of capacity units consumed on a table or an index.</p>\n  "
                    }
                  },
                  "documentation": "\n    <p>Represents the amount of provisioned throughput capacity consumed on a table or an index. </p>\n  "
                },
                "documentation": "\n    <p>The amount of throughput consumed on each local index affected by the operation.</p>\n  "
              },
              "GlobalSecondaryIndexes": {
                "shape_name": "SecondaryIndexesCapacityMap",
                "type": "map",
                "keys": {
                  "shape_name": "IndexName",
                  "type": "string",
                  "min_length": 3,
                  "max_length": 255,
                  "pattern": "[a-zA-Z0-9_.-]+",
                  "documentation": null
                },
                "members": {
                  "shape_name": "Capacity",
                  "type": "structure",
                  "members": {
                    "CapacityUnits": {
                      "shape_name": "ConsumedCapacityUnits",
                      "type": "double",
                      "documentation": "\n    <p>The total number of capacity units consumed on a table or an index.</p>\n  "
                    }
                  },
                  "documentation": "\n    <p>Represents the amount of provisioned throughput capacity consumed on a table or an index. </p>\n  "
                },
                "documentation": "\n    <p>The amount of throughput consumed on each global index affected by the operation.</p>\n  "
              }
            },
            "documentation": "\n    <p>Represents the capacity units consumed by an operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. <i>ConsumedCapacity</i> is only returned if it was asked for in the request. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html\">Provisioned Throughput</a> in the Amazon DynamoDB Developer Guide.</p>\n  "
          }
        },
        "documentation": "\n    <p>Represents the output of a <i>Scan</i> operation.</p>\n  "
      },
      "errors": [
        {
          "shape_name": "ProvisionedThroughputExceededException",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>You exceeded your maximum allowed provisioned throughput.</p>\n  "
            }
          },
          "documentation": "\n    <p>The request rate is too high, or the request is too large, for the available throughput to\n      accommodate. The AWS SDKs automatically retry requests that receive this exception;\n      therefore, your request will eventually succeed, unless the request is too large or your retry\n      queue is too large to finish. Reduce the frequency of requests by using the strategies listed in\n        <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#APIRetries\">Error Retries and Exponential Backoff</a> in the Amazon DynamoDB Developer Guide.</p>\n  "
        },
        {
          "shape_name": "ResourceNotFoundException",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>The resource which is being requested does not exist.</p>\n  "
            }
          },
          "documentation": "\n    <p>The operation tried to access a nonexistent table or index. The resource may not be specified correctly, or its status may not be <code>ACTIVE</code>.</p>\n  "
        },
        {
          "shape_name": "InternalServerError",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>The server encountered an internal error trying to fulfill the request.</p>\n  "
            }
          },
          "documentation": "\n    <p>An error occurred on the server side.</p>\n  "
        }
      ],
      "documentation": "\n    <p>The <i>Scan</i> operation returns one or more items and item attributes by accessing every item in the table. To have Amazon DynamoDB return fewer items, you can provide a <i>ScanFilter</i>.</p>\n\n    <p>If the total number of scanned items exceeds the maximum data set size limit of 1 MB, the scan stops and results are\n      returned to the user with a <i>LastEvaluatedKey</i> to continue the scan in a subsequent\n      operation. The results also include the number of items exceeding the limit. A scan can result\n      in no table data meeting the filter criteria. </p>\n      <p>The result set is eventually consistent. </p>\n    <p>By default, <i>Scan</i> operations proceed sequentially; however, for faster performance on\n      large tables, applications can request a parallel <i>Scan</i> by specifying the <i>Segment</i>\n      and <i>TotalSegments</i> parameters. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#QueryAndScanParallelScan\">Parallel Scan</a> in the Amazon DynamoDB Developer Guide.</p>\n    <examples>\n      <example>\n        <name>Returning All Items</name>\n        <description>This example returns all of the items in a table. No scan filter is\n          applied.</description>\n        <request><![CDATA[\nPOST / HTTP/1.1\nHost: dynamodb.<region>.<domain>;\nX-Amz-Date: <Date>\nAuthorization: AWS4-HMAC-SHA256 Credential=<Credential>, SignedHeaders=content-length;content-type;host;user-agent;x-amz-content-sha256;x-amz-date;x-amz-target, Signature=<Signature>\nUser-Agent: <UserAgentString>\nx-amz-content-sha256: <PayloadHash>\nContent-Type: application/x-amz-json-1.0\nContent-Length: <PayloadSizeBytes>     \nConnection: Keep-Alive]]>\nX-Amz-Target: DynamoDB_20120810.Scan \n\n{\n    \"TableName\": \"Reply\",\n    \"ReturnConsumedCapacity\": \"TOTAL\"\n}\n        </request>\n        <response><![CDATA[\nHTTP/1.1 200 OK\nx-amzn-RequestId: <RequestId> \nx-amz-crc32: <Checksum>\nContent-Type: application/x-amz-json-1.0\nContent-Length: <PayloadSizeBytes>\nDate: <Date>\n]]>\n{\n    \"ConsumedCapacity\": {\n        \"CapacityUnits\": 0.5,\n        \"TableName\": \"Reply\"\n    },\n    \"Count\": 4,\n    \"Items\": [\n        {\n            \"PostedBy\": {\n                \"S\": \"joe@example.com\"\n            },\n            \"ReplyDateTime\": {\n                \"S\": \"20130320115336\"\n            },\n            \"Id\": {\n                \"S\": \"Amazon DynamoDB#How do I update multiple items?\"\n            },\n            \"Message\": {\n                \"S\": \"Have you looked at the BatchWriteItem API?\"\n            }\n        },\n        {\n            \"PostedBy\": {\n                \"S\": \"fred@example.com\"\n            },\n            \"ReplyDateTime\": {\n                \"S\": \"20130320115342\"\n            },\n            \"Id\": {\n                \"S\": \"Amazon DynamoDB#How do I update multiple items?\"\n            },\n            \"Message\": {\n                \"S\": \"No, I didn't know about that.  Where can I find more information?\"\n            }\n        },\n        {\n            \"PostedBy\": {\n                \"S\": \"joe@example.com\"\n            },\n            \"ReplyDateTime\": {\n                \"S\": \"20130320115347\"\n            },\n            \"Id\": {\n                \"S\": \"Amazon DynamoDB#How do I update multiple items?\"\n            },\n            \"Message\": {\n                \"S\": \"BatchWriteItem is documented in the Amazon DynamoDB API Reference.\"\n            }\n        },\n        {\n            \"PostedBy\": {\n                \"S\": \"fred@example.com\"\n            },\n            \"ReplyDateTime\": {\n                \"S\": \"20130320115352\"\n            },\n            \"Id\": {\n                \"S\": \"Amazon DynamoDB#How do I update multiple items?\"\n            },\n            \"Message\": {\n                \"S\": \"OK, I'll take a look at that.  Thanks!\"\n            }\n        }\n    ],\n    \"ScannedCount\": 4\n}\n        </response>\n      </example>\n      <example>\n        <name>Using a Scan Filter</name>\n        <description>This example returns only those items matching specific criteria.</description>\n        <request><![CDATA[\nPOST / HTTP/1.1\nHost: dynamodb.<region>.<domain>;\nX-Amz-Date: <Date>\nAuthorization: AWS4-HMAC-SHA256 Credential=<Credential>, SignedHeaders=content-length;content-type;host;user-agent;x-amz-content-sha256;x-amz-date;x-amz-target, Signature=<Signature>\nUser-Agent: <UserAgentString>\nx-amz-content-sha256: <PayloadHash>\nContent-Type: application/x-amz-json-1.0\nContent-Length: <PayloadSizeBytes>     \nConnection: Keep-Alive]]>\nX-Amz-Target: DynamoDB_20120810.Scan \n\n{\n    \"TableName\": \"Reply\",\n    \"ScanFilter\": {\n        \"PostedBy\": {\n            \"AttributeValueList\": [\n                {\n                    \"S\": \"joe@example.com\"\n                }\n            ],\n            \"ComparisonOperator\": \"EQ\"\n        }\n    },\n    \"ReturnConsumedCapacity\": \"TOTAL\"\n}\n        </request>\n        <response><![CDATA[\nHTTP/1.1 200 OK\nx-amzn-RequestId: <RequestId> \nx-amz-crc32: <Checksum>\nContent-Type: application/x-amz-json-1.0\nContent-Length: <PayloadSizeBytes>\nDate: <Date>\n]]>\n{\n    \"ConsumedCapacity\": {\n        \"CapacityUnits\": 0.5,\n        \"TableName\": \"Reply\"\n    },\n    \"Count\": 2,\n    \"Items\": [\n        {\n            \"PostedBy\": {\n                \"S\": \"joe@example.com\"\n            },\n            \"ReplyDateTime\": {\n                \"S\": \"20130320115336\"\n            },\n            \"Id\": {\n                \"S\": \"Amazon DynamoDB#How do I update multiple items?\"\n            },\n            \"Message\": {\n                \"S\": \"Have you looked at the BatchWriteItem API?\"\n            }\n        },\n        {\n            \"PostedBy\": {\n                \"S\": \"joe@example.com\"\n            },\n            \"ReplyDateTime\": {\n                \"S\": \"20130320115347\"\n            },\n            \"Id\": {\n                \"S\": \"Amazon DynamoDB#How do I update multiple items?\"\n            },\n            \"Message\": {\n                \"S\": \"BatchWriteItem is documented in the Amazon DynamoDB API Reference.\"\n            }\n        }\n    ],\n    \"ScannedCount\": 4\n}\n        </response>\n      </example>\n    </examples>\n  "
    },
    "UpdateItem": {
      "name": "UpdateItem",
      "input": {
        "shape_name": "UpdateItemInput",
        "type": "structure",
        "members": {
          "TableName": {
            "shape_name": "TableName",
            "type": "string",
            "min_length": 3,
            "max_length": 255,
            "pattern": "[a-zA-Z0-9_.-]+",
            "documentation": "\n    <p>The name of the table containing the item to update. </p>\n  ",
            "required": true
          },
          "Key": {
            "shape_name": "Key",
            "type": "map",
            "keys": {
              "shape_name": "AttributeName",
              "type": "string",
              "documentation": null
            },
            "members": {
              "shape_name": "AttributeValue",
              "type": "structure",
              "members": {
                "S": {
                  "shape_name": "StringAttributeValue",
                  "type": "string",
                  "documentation": "\n    <p>A String data type</p>\n  "
                },
                "N": {
                  "shape_name": "NumberAttributeValue",
                  "type": "string",
                  "documentation": "\n    <p>A Number data type</p>\n  "
                },
                "B": {
                  "shape_name": "BinaryAttributeValue",
                  "type": "blob",
                  "documentation": "\n    <p>A Binary data type</p>\n  "
                },
                "SS": {
                  "shape_name": "StringSetAttributeValue",
                  "type": "list",
                  "members": {
                    "shape_name": "StringAttributeValue",
                    "type": "string",
                    "documentation": null
                  },
                  "documentation": "\n    <p>A String set data type</p>\n  "
                },
                "NS": {
                  "shape_name": "NumberSetAttributeValue",
                  "type": "list",
                  "members": {
                    "shape_name": "NumberAttributeValue",
                    "type": "string",
                    "documentation": null
                  },
                  "documentation": "\n    <p> Number set data type</p>\n  "
                },
                "BS": {
                  "shape_name": "BinarySetAttributeValue",
                  "type": "list",
                  "members": {
                    "shape_name": "BinaryAttributeValue",
                    "type": "blob",
                    "documentation": null
                  },
                  "documentation": "\n    <p>A Binary set data type</p>\n  "
                }
              },
              "documentation": "\n    <p>Represents the data for an attribute. You can set one, and only one, of the elements.</p>\n  "
            },
            "documentation": "\n    <p>The primary key that defines the item. Each element consists of an attribute name and a value for that attribute.</p>\n ",
            "required": true
          },
          "AttributeUpdates": {
            "shape_name": "AttributeUpdates",
            "type": "map",
            "keys": {
              "shape_name": "AttributeName",
              "type": "string",
              "documentation": null
            },
            "members": {
              "shape_name": "AttributeValueUpdate",
              "type": "structure",
              "members": {
                "Value": {
                  "shape_name": "AttributeValue",
                  "type": "structure",
                  "members": {
                    "S": {
                      "shape_name": "StringAttributeValue",
                      "type": "string",
                      "documentation": "\n    <p>A String data type</p>\n  "
                    },
                    "N": {
                      "shape_name": "NumberAttributeValue",
                      "type": "string",
                      "documentation": "\n    <p>A Number data type</p>\n  "
                    },
                    "B": {
                      "shape_name": "BinaryAttributeValue",
                      "type": "blob",
                      "documentation": "\n    <p>A Binary data type</p>\n  "
                    },
                    "SS": {
                      "shape_name": "StringSetAttributeValue",
                      "type": "list",
                      "members": {
                        "shape_name": "StringAttributeValue",
                        "type": "string",
                        "documentation": null
                      },
                      "documentation": "\n    <p>A String set data type</p>\n  "
                    },
                    "NS": {
                      "shape_name": "NumberSetAttributeValue",
                      "type": "list",
                      "members": {
                        "shape_name": "NumberAttributeValue",
                        "type": "string",
                        "documentation": null
                      },
                      "documentation": "\n    <p> Number set data type</p>\n  "
                    },
                    "BS": {
                      "shape_name": "BinarySetAttributeValue",
                      "type": "list",
                      "members": {
                        "shape_name": "BinaryAttributeValue",
                        "type": "blob",
                        "documentation": null
                      },
                      "documentation": "\n    <p>A Binary set data type</p>\n  "
                    }
                  },
                  "documentation": "\n    <p>Represents the data for an attribute. You can set one, and only one, of the elements.</p>\n  "
                },
                "Action": {
                  "shape_name": "AttributeAction",
                  "type": "string",
                  "enum": [
                    "ADD",
                    "PUT",
                    "DELETE"
                  ],
                  "documentation": "\n    <p>Specifies how to perform the update. Valid values are <code>PUT</code>, <code>DELETE</code>,\n      and <code>ADD</code>. The behavior depends on whether the specified primary key already exists\n      in the table.</p>\n    \n    <p>\n      <b>If an item with the specified <i>Key</i> is found in the table:</b>\n    </p>\n    \n    <ul>\n      <li>\n        <p><code>PUT</code> - Adds the specified attribute to the item. If the attribute\n          already exists, it is replaced by the new value. </p>\n      </li>\n      <li>\n        <p><code>DELETE</code> - If no value is specified, the attribute and its value are\n          removed from the item. The data type of the specified value must match the existing\n          value's data type.</p>\n        <p>If a <i>set</i> of values is specified, then those values are subtracted from the old\n          set. For example, if the attribute value was the set <code>[a,b,c]</code> and the\n          <i>DELETE</i> action specified <code>[a,c]</code>, then the final attribute value\n          would be <code>[b]</code>. Specifying an empty set is an error.</p>\n      </li>\n      <li>\n        <p><code>ADD</code> - If the attribute does not already exist, then the attribute\n          and its values are added to the item. If the attribute does exist, then the behavior\n          of <code>ADD</code> depends on the data type of the attribute:</p>\n        <ul>\n          <li>\n            <p>If the existing attribute is a number, and if <i>Value</i> is also a number, then\n              the <i>Value</i> is mathematically added to the existing attribute. If\n              <i>Value</i> is a negative number, then it is subtracted from the existing\n              attribute.</p>\n            <note>\n              <p> If you use <code>ADD</code> to increment or decrement a number value for an\n                item that doesn't exist before the update, Amazon DynamoDB uses 0 as the initial\n                value.</p>\n              <p>In addition, if you use <code>ADD</code> to update an existing item, and intend\n                to increment or decrement an attribute value which does not yet exist, Amazon DynamoDB\n                uses <code>0</code> as the initial value. For example, suppose that the item you\n                want to update does not yet have an attribute named <i>itemcount</i>, but you\n                decide to <code>ADD</code> the number <code>3</code> to this attribute anyway,\n                even though it currently does not exist. Amazon DynamoDB will create the <i>itemcount</i>\n                attribute, set its initial value to <code>0</code>, and finally add\n                <code>3</code> to it. The result will be a new <i>itemcount</i> attribute in\n                the item, with a value of <code>3</code>.</p>\n            </note>\n          </li>\n          <li>\n            <p>If the existing data type is a set, and if the <i>Value</i> is also a set, then\n              the <i>Value</i> is added to the existing set. (This is a <i>set</i> operation,\n              not mathematical addition.) For example, if the attribute value was the set\n              <code>[1,2]</code>, and the <code>ADD</code> action specified <code>[3]</code>,\n              then the final attribute value would be <code>[1,2,3]</code>. An error occurs if\n              an Add action is specified for a set attribute and the attribute type specified\n              does not match the existing set type. </p>\n            <p>Both sets must have the same primitive data type. For example, if the existing\n              data type is a set of strings, the <i>Value</i> must also be a set of strings. The\n              same holds true for number sets and binary sets.</p>\n          </li>\n        </ul>\n        <p>This action is only valid for an existing attribute whose data type is number or is a\n          set. Do not use <code>ADD</code> for any other data types.</p>\n      </li>\n    </ul>\n    \n    <p>\n      <b>If no item with the specified <i>Key</i> is found:</b>\n    </p>\n    \n    <ul>\n      <li>\n        <p><code>PUT</code> - Amazon DynamoDB creates a new item with the specified primary key, and\n          then adds the attribute. </p>\n      </li>\n      <li>\n        <p><code>DELETE</code> - Nothing happens; there is no attribute to delete.</p>\n      </li>\n      <li>\n        <p><code>ADD</code> - Amazon DynamoDB creates an item with the supplied primary key and number\n          (or set of numbers) for the attribute value. The only data types allowed are number\n          and number set; no other data types can be specified.</p>\n      </li>\n    </ul>\n  "
                }
              },
              "documentation": "\n    <p>For the <i>UpdateItem</i> operation, represents the attributes to be modified,the action to perform on each, and the new value for each.</p>\n    <note>\n      <p>You cannot use <i>UpdateItem</i> to update any primary key attributes. Instead, you will\n        need to delete the item, and then use <i>PutItem</i> to create a new item with new\n        attributes.</p>\n    </note>\n    <p>Attribute values cannot be null; string and binary type attributes must have lengths greater\n      than zero; and set type attributes must not be empty. Requests with empty values will be\n      rejected with a <i>ValidationException</i>.</p>\n  "
            },
            "documentation": "\n    <p>The names of attributes to be modified, the action to perform on each, and the new value for\n      each. If you are updating an attribute that is an index key attribute for any indexes on that\n      table, the attribute type must match the index key type defined in the <i>AttributesDefinition</i> of\n      the table description. You can use <i>UpdateItem</i> to update any non-key attributes.</p>\n    <p>Attribute values cannot be null. String and binary type attributes must have lengths greater\n      than zero. Set type attributes must not be empty. Requests with empty values will be\n      rejected with a <i>ValidationException</i>.</p>\n    <p>Each <i>AttributeUpdates</i> element consists of an attribute name to modify, along with the\n      following:</p>\n    <ul>\n      <li>\n        <p><i>Value</i> - The new value, if applicable, for this attribute.</p>\n      </li>\n      <li>\n        <p><i>Action</i> - Specifies how to perform the update. Valid values for <i>Action</i>\n          are <code>PUT</code>, <code>DELETE</code>, and <code>ADD</code>. The behavior depends on\n          whether the specified primary key already exists in the table.</p>\n\n        <p>\n          <b>If an item with the specified <i>Key</i> is found in the table:</b>\n        </p>\n\n        <ul>\n          <li>\n            <p><code>PUT</code> - Adds the specified attribute to the item. If the attribute\n              already exists, it is replaced by the new value. </p>\n          </li>\n          <li>\n            <p><code>DELETE</code> - If no value is specified, the attribute and its value are\n              removed from the item. The data type of the specified value must match the existing\n              value's data type.</p>\n            <p>If a <i>set</i> of values is specified, then those values are subtracted from the old\n              set. For example, if the attribute value was the set <code>[a,b,c]</code> and the\n                <i>DELETE</i> action specified <code>[a,c]</code>, then the final attribute value\n              would be <code>[b]</code>. Specifying an empty set is an error.</p>\n          </li>\n          <li>\n            <p><code>ADD</code> - If the attribute does not already exist, then the attribute\n              and its values are added to the item. If the attribute does exist, then the behavior\n              of <code>ADD</code> depends on the data type of the attribute:</p>\n            <ul>\n              <li>\n                <p>If the existing attribute is a number, and if <i>Value</i> is also a number, then\n                  the <i>Value</i> is mathematically added to the existing attribute. If\n                    <i>Value</i> is a negative number, then it is subtracted from the existing\n                  attribute.</p>\n                <note>\n                  <p> If you use <code>ADD</code> to increment or decrement a number value for an\n                    item that doesn't exist before the update, Amazon DynamoDB uses 0 as the initial\n                    value.</p>\n                  <p>In addition, if you use <code>ADD</code> to update an existing item, and intend\n                    to increment or decrement an attribute value which does not yet exist, Amazon DynamoDB\n                    uses <code>0</code> as the initial value. For example, suppose that the item you\n                    want to update does not yet have an attribute named <i>itemcount</i>, but you\n                    decide to <code>ADD</code> the number <code>3</code> to this attribute anyway,\n                    even though it currently does not exist. Amazon DynamoDB will create the <i>itemcount</i>\n                    attribute, set its initial value to <code>0</code>, and finally add\n                      <code>3</code> to it. The result will be a new <i>itemcount</i> attribute in\n                    the item, with a value of <code>3</code>.</p>\n                </note>\n              </li>\n              <li>\n                <p>If the existing data type is a set, and if the <i>Value</i> is also a set, then\n                  the <i>Value</i> is added to the existing set. (This is a <i>set</i> operation,\n                  not mathematical addition.) For example, if the attribute value was the set\n                    <code>[1,2]</code>, and the <code>ADD</code> action specified <code>[3]</code>,\n                  then the final attribute value would be <code>[1,2,3]</code>. An error occurs if\n                  an Add action is specified for a set attribute and the attribute type specified\n                  does not match the existing set type. </p>\n                <p>Both sets must have the same primitive data type. For example, if the existing\n                  data type is a set of strings, the <i>Value</i> must also be a set of strings. The\n                  same holds true for number sets and binary sets.</p>\n              </li>\n            </ul>\n            <p>This action is only valid for an existing attribute whose data type is number or is a\n              set. Do not use <code>ADD</code> for any other data types.</p>\n          </li>\n        </ul>\n\n        <p>\n          <b>If no item with the specified <i>Key</i> is found:</b>\n        </p>\n\n        <ul>\n          <li>\n            <p><code>PUT</code> - Amazon DynamoDB creates a new item with the specified primary key, and\n              then adds the attribute. </p>\n          </li>\n          <li>\n            <p><code>DELETE</code> - Nothing happens; there is no attribute to delete.</p>\n          </li>\n          <li>\n            <p><code>ADD</code> - Amazon DynamoDB creates an item with the supplied primary key and number\n              (or set of numbers) for the attribute value. The only data types allowed are number\n              and number set; no other data types can be specified.</p>\n          </li>\n        </ul>\n      </li>\n    </ul>\n    <p>If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.</p>\n  "
          },
          "Expected": {
            "shape_name": "ExpectedAttributeMap",
            "type": "map",
            "keys": {
              "shape_name": "AttributeName",
              "type": "string",
              "documentation": null
            },
            "members": {
              "shape_name": "ExpectedAttributeValue",
              "type": "structure",
              "members": {
                "Value": {
                  "shape_name": "AttributeValue",
                  "type": "structure",
                  "members": {
                    "S": {
                      "shape_name": "StringAttributeValue",
                      "type": "string",
                      "documentation": "\n    <p>A String data type</p>\n  "
                    },
                    "N": {
                      "shape_name": "NumberAttributeValue",
                      "type": "string",
                      "documentation": "\n    <p>A Number data type</p>\n  "
                    },
                    "B": {
                      "shape_name": "BinaryAttributeValue",
                      "type": "blob",
                      "documentation": "\n    <p>A Binary data type</p>\n  "
                    },
                    "SS": {
                      "shape_name": "StringSetAttributeValue",
                      "type": "list",
                      "members": {
                        "shape_name": "StringAttributeValue",
                        "type": "string",
                        "documentation": null
                      },
                      "documentation": "\n    <p>A String set data type</p>\n  "
                    },
                    "NS": {
                      "shape_name": "NumberSetAttributeValue",
                      "type": "list",
                      "members": {
                        "shape_name": "NumberAttributeValue",
                        "type": "string",
                        "documentation": null
                      },
                      "documentation": "\n    <p> Number set data type</p>\n  "
                    },
                    "BS": {
                      "shape_name": "BinarySetAttributeValue",
                      "type": "list",
                      "members": {
                        "shape_name": "BinaryAttributeValue",
                        "type": "blob",
                        "documentation": null
                      },
                      "documentation": "\n    <p>A Binary set data type</p>\n  "
                    }
                  },
                  "documentation": "\n    <p>Represents the data for an attribute. You can set one, and only one, of the elements.</p>\n  "
                },
                "Exists": {
                  "shape_name": "BooleanObject",
                  "type": "boolean",
                  "documentation": "\n    <p>Causes Amazon DynamoDB to evaluate the value before attempting a conditional operation:</p>\n    <ul>\n      <li>\n        <p>If <i>Exists</i> is <code>true</code>, Amazon DynamoDB will check to see if that attribute\n          value already exists in the table. If it is found, then the operation\n          succeeds. If it is not found, the operation fails with a\n          <i>ConditionalCheckFailedException</i>.</p>\n      </li>\n      <li>\n        <p>If <i>Exists</i> is <code>false</code>, Amazon DynamoDB assumes that the attribute value does\n          <i>not</i> exist in the table. If in fact the value does not exist, then the\n          assumption is valid and the operation succeeds. If the value is found,\n          despite the assumption that it does not exist, the operation fails with a\n          <i>ConditionalCheckFailedException</i>.</p>\n      </li>\n    </ul>\n    <p>The default setting for <i>Exists</i> is <code>true</code>. If you supply a <i>Value</i> all\n      by itself, Amazon DynamoDB assumes the attribute exists: You don't have to set <i>Exists</i> to\n        <code>true</code>, because it is implied.</p>\n    <p>Amazon DynamoDB returns a <i>ValidationException</i> if:</p>\n    <ul>\n      <li>\n        <p><i>Exists</i> is <code>true</code> but there is no <i>Value</i> to check. (You expect\n          a value to exist, but don't specify what that value is.)</p>\n      </li>\n      <li>\n        <p><i>Exists</i> is <code>false</code> but you also specify a <i>Value</i>. (You cannot\n          expect an attribute to have a value, while also expecting it not to exist.)</p>\n      </li>\n    </ul>\n    <p>If you specify more than one condition for <i>Exists</i>, then all of the conditions must\n      evaluate to true. (In other words, the conditions are ANDed together.) Otherwise, the\n      conditional operation will fail.</p>\n  "
                }
              },
              "documentation": "\n    <p>Represents an attribute value used with conditional <i>DeleteItem</i>, <i>PutItem</i> or <i>UpdateItem</i> operations.  Amazon DynamoDB will check to see if the attribute value already exists; or if the attribute exists and has a particular value before updating it.</p>\n  "
            },
            "documentation": "\n    <p>A map of attribute/condition pairs. This is the conditional block for the <i>UpdateItem</i> operation. All the conditions must be met for the operation to succeed.</p>\n        <p><i>Expected</i> allows you to\n      provide an attribute name, and whether or not Amazon DynamoDB should check to see if the attribute value\n      already exists; or if the attribute value exists and has a particular value before changing\n      it.</p>\n    <p>Each item in <i>Expected</i> represents an attribute name for Amazon DynamoDB to check, along with\n      the following: </p>\n    <ul>\n      <li>\n        <p><i>Value</i> - The attribute value for Amazon DynamoDB to check.</p>\n      </li>\n      <li>\n        <p><i>Exists</i> - Causes Amazon DynamoDB to evaluate the value before attempting a conditional\n          operation:</p>\n        <ul>\n          <li>\n            <p>If <i>Exists</i> is <code>true</code>, Amazon DynamoDB will check to see if that attribute\n              value already exists in the table. If it is found, then the operation\n              succeeds. If it is not found, the operation fails with a\n                <i>ConditionalCheckFailedException</i>.</p>\n          </li>\n          <li>\n            <p>If <i>Exists</i> is <code>false</code>, Amazon DynamoDB assumes that the attribute value does\n                <i>not</i> exist in the table. If in fact the value does not exist, then the\n              assumption is valid and the operation succeeds. If the value is found,\n              despite the assumption that it does not exist, the operation fails with a\n                <i>ConditionalCheckFailedException</i>.</p>\n          </li>\n        </ul>\n        <p>The default setting for <i>Exists</i> is <code>true</code>. If you supply a <i>Value</i>\n          all by itself, Amazon DynamoDB assumes the attribute exists:  You don't have to set <i>Exists</i> to <code>true</code>, because it is\n          implied.</p>\n        <p>Amazon DynamoDB returns a <i>ValidationException</i> if:</p>\n        <ul>\n          <li>\n            <p><i>Exists</i> is <code>true</code> but there is no <i>Value</i> to check. (You expect\n              a value to exist, but don't specify what that value is.)</p>\n          </li>\n          <li>\n            <p><i>Exists</i> is <code>false</code> but you also specify a <i>Value</i>. (You cannot\n              expect an attribute to have a value, while also expecting it not to exist.)</p>\n          </li>\n        </ul>\n      </li>\n    </ul>\n    <p>If you specify more than one condition for <i>Exists</i>, then all of the conditions must\n      evaluate to true. (In other words, the conditions are ANDed together.) Otherwise, the\n      conditional operation will fail.</p>\n\n  "
          },
          "ReturnValues": {
            "shape_name": "ReturnValue",
            "type": "string",
            "enum": [
              "NONE",
              "ALL_OLD",
              "UPDATED_OLD",
              "ALL_NEW",
              "UPDATED_NEW"
            ],
            "documentation": "\n    <p>Use <i>ReturnValues</i> if you want to get the item attributes as they appeared either before\n      or after they were updated. For <i>UpdateItem</i>, the valid values are:</p>\n    <ul>\n      <li>\n        <p><code>NONE</code> - If <i>ReturnValues</i> is not specified, or if its\n          value is <code>NONE</code>, then nothing is returned. (This is the default for <i>ReturnValues</i>.)</p>\n      </li>\n      <li>\n        <p><code>ALL_OLD</code> - If <i>UpdateItem</i> overwrote an attribute name-value pair,\n          then the content of the old item is returned.</p>\n      </li>\n      <li>\n        <p><code>UPDATED_OLD</code> - The old versions of only the updated attributes are\n          returned.</p>\n      </li>\n      <li>\n        <p><code>ALL_NEW</code> - All of the attributes of the new version of the item are\n          returned.</p>\n      </li>\n      <li>\n        <p><code>UPDATED_NEW</code> - The new versions of only the updated attributes are\n          returned.</p>\n      </li>\n    </ul>\n  "
          },
          "ReturnConsumedCapacity": {
            "shape_name": "ReturnConsumedCapacity",
            "type": "string",
            "enum": [
              "INDEXES",
              "TOTAL",
              "NONE"
            ],
            "documentation": "\n    <p>If set to <code>TOTAL</code>, the response includes <i>ConsumedCapacity</i> data for tables and indexes. If set to <code>INDEXES</code>, the repsonse includes <i>ConsumedCapacity</i> for indexes. If set to <code>NONE</code> (the default), <i>ConsumedCapacity</i> is not included in the response.</p>\n  "
          },
          "ReturnItemCollectionMetrics": {
            "shape_name": "ReturnItemCollectionMetrics",
            "type": "string",
            "enum": [
              "SIZE",
              "NONE"
            ],
            "documentation": "     <p>If set to <code>SIZE</code>, statistics about item collections, if any, that were modified during\n      the operation are returned in the response. If set to <code>NONE</code> (the default), no statistics are returned.</p>\n "
          }
        },
        "documentation": "\n    <p>Represents the input of an <i>UpdateItem</i> operation.</p>\n  "
      },
      "output": {
        "shape_name": "UpdateItemOutput",
        "type": "structure",
        "members": {
          "Attributes": {
            "shape_name": "AttributeMap",
            "type": "map",
            "keys": {
              "shape_name": "AttributeName",
              "type": "string",
              "documentation": null
            },
            "members": {
              "shape_name": "AttributeValue",
              "type": "structure",
              "members": {
                "S": {
                  "shape_name": "StringAttributeValue",
                  "type": "string",
                  "documentation": "\n    <p>A String data type</p>\n  "
                },
                "N": {
                  "shape_name": "NumberAttributeValue",
                  "type": "string",
                  "documentation": "\n    <p>A Number data type</p>\n  "
                },
                "B": {
                  "shape_name": "BinaryAttributeValue",
                  "type": "blob",
                  "documentation": "\n    <p>A Binary data type</p>\n  "
                },
                "SS": {
                  "shape_name": "StringSetAttributeValue",
                  "type": "list",
                  "members": {
                    "shape_name": "StringAttributeValue",
                    "type": "string",
                    "documentation": null
                  },
                  "documentation": "\n    <p>A String set data type</p>\n  "
                },
                "NS": {
                  "shape_name": "NumberSetAttributeValue",
                  "type": "list",
                  "members": {
                    "shape_name": "NumberAttributeValue",
                    "type": "string",
                    "documentation": null
                  },
                  "documentation": "\n    <p> Number set data type</p>\n  "
                },
                "BS": {
                  "shape_name": "BinarySetAttributeValue",
                  "type": "list",
                  "members": {
                    "shape_name": "BinaryAttributeValue",
                    "type": "blob",
                    "documentation": null
                  },
                  "documentation": "\n    <p>A Binary set data type</p>\n  "
                }
              },
              "documentation": "\n    <p>Represents the data for an attribute. You can set one, and only one, of the elements.</p>\n  "
            },
            "documentation": "\n    <p>A map of attribute values as they appeared before the <i>UpdateItem</i> operation, but only if\n        <i>ReturnValues</i> was specified as something other than <code>NONE</code> in\n      the request. Each element represents one attribute.</p>\n  "
          },
          "ConsumedCapacity": {
            "shape_name": "ConsumedCapacity",
            "type": "structure",
            "members": {
              "TableName": {
                "shape_name": "TableName",
                "type": "string",
                "min_length": 3,
                "max_length": 255,
                "pattern": "[a-zA-Z0-9_.-]+",
                "documentation": "\n    <p>The name of the table that was affected by the operation.</p>\n  "
              },
              "CapacityUnits": {
                "shape_name": "ConsumedCapacityUnits",
                "type": "double",
                "documentation": "\n    <p>The total number of capacity units consumed by the operation.</p>\n  "
              },
              "Table": {
                "shape_name": "Capacity",
                "type": "structure",
                "members": {
                  "CapacityUnits": {
                    "shape_name": "ConsumedCapacityUnits",
                    "type": "double",
                    "documentation": "\n    <p>The total number of capacity units consumed on a table or an index.</p>\n  "
                  }
                },
                "documentation": "\n    <p>The amount of throughput consumed on the table affected by the operation.</p>\n  "
              },
              "LocalSecondaryIndexes": {
                "shape_name": "SecondaryIndexesCapacityMap",
                "type": "map",
                "keys": {
                  "shape_name": "IndexName",
                  "type": "string",
                  "min_length": 3,
                  "max_length": 255,
                  "pattern": "[a-zA-Z0-9_.-]+",
                  "documentation": null
                },
                "members": {
                  "shape_name": "Capacity",
                  "type": "structure",
                  "members": {
                    "CapacityUnits": {
                      "shape_name": "ConsumedCapacityUnits",
                      "type": "double",
                      "documentation": "\n    <p>The total number of capacity units consumed on a table or an index.</p>\n  "
                    }
                  },
                  "documentation": "\n    <p>Represents the amount of provisioned throughput capacity consumed on a table or an index. </p>\n  "
                },
                "documentation": "\n    <p>The amount of throughput consumed on each local index affected by the operation.</p>\n  "
              },
              "GlobalSecondaryIndexes": {
                "shape_name": "SecondaryIndexesCapacityMap",
                "type": "map",
                "keys": {
                  "shape_name": "IndexName",
                  "type": "string",
                  "min_length": 3,
                  "max_length": 255,
                  "pattern": "[a-zA-Z0-9_.-]+",
                  "documentation": null
                },
                "members": {
                  "shape_name": "Capacity",
                  "type": "structure",
                  "members": {
                    "CapacityUnits": {
                      "shape_name": "ConsumedCapacityUnits",
                      "type": "double",
                      "documentation": "\n    <p>The total number of capacity units consumed on a table or an index.</p>\n  "
                    }
                  },
                  "documentation": "\n    <p>Represents the amount of provisioned throughput capacity consumed on a table or an index. </p>\n  "
                },
                "documentation": "\n    <p>The amount of throughput consumed on each global index affected by the operation.</p>\n  "
              }
            },
            "documentation": "\n    <p>Represents the capacity units consumed by an operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. <i>ConsumedCapacity</i> is only returned if it was asked for in the request. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html\">Provisioned Throughput</a> in the Amazon DynamoDB Developer Guide.</p>\n  "
          },
          "ItemCollectionMetrics": {
            "shape_name": "ItemCollectionMetrics",
            "type": "structure",
            "members": {
              "ItemCollectionKey": {
                "shape_name": "ItemCollectionKeyAttributeMap",
                "type": "map",
                "keys": {
                  "shape_name": "AttributeName",
                  "type": "string",
                  "documentation": null
                },
                "members": {
                  "shape_name": "AttributeValue",
                  "type": "structure",
                  "members": {
                    "S": {
                      "shape_name": "StringAttributeValue",
                      "type": "string",
                      "documentation": "\n    <p>A String data type</p>\n  "
                    },
                    "N": {
                      "shape_name": "NumberAttributeValue",
                      "type": "string",
                      "documentation": "\n    <p>A Number data type</p>\n  "
                    },
                    "B": {
                      "shape_name": "BinaryAttributeValue",
                      "type": "blob",
                      "documentation": "\n    <p>A Binary data type</p>\n  "
                    },
                    "SS": {
                      "shape_name": "StringSetAttributeValue",
                      "type": "list",
                      "members": {
                        "shape_name": "StringAttributeValue",
                        "type": "string",
                        "documentation": null
                      },
                      "documentation": "\n    <p>A String set data type</p>\n  "
                    },
                    "NS": {
                      "shape_name": "NumberSetAttributeValue",
                      "type": "list",
                      "members": {
                        "shape_name": "NumberAttributeValue",
                        "type": "string",
                        "documentation": null
                      },
                      "documentation": "\n    <p> Number set data type</p>\n  "
                    },
                    "BS": {
                      "shape_name": "BinarySetAttributeValue",
                      "type": "list",
                      "members": {
                        "shape_name": "BinaryAttributeValue",
                        "type": "blob",
                        "documentation": null
                      },
                      "documentation": "\n    <p>A Binary set data type</p>\n  "
                    }
                  },
                  "documentation": "\n    <p>Represents the data for an attribute. You can set one, and only one, of the elements.</p>\n  "
                },
                "documentation": "\n    <p>The hash key value of the item collection. This is the same as the hash key of the item.</p>  \n   "
              },
              "SizeEstimateRangeGB": {
                "shape_name": "ItemCollectionSizeEstimateRange",
                "type": "list",
                "members": {
                  "shape_name": "ItemCollectionSizeEstimateBound",
                  "type": "double",
                  "documentation": null
                },
                "documentation": "\n    <p>An estimate of item collection size, measured in gigabytes. This is a\n      two-element array containing a lower bound and an upper bound for the estimate. The estimate\n      includes the size of all the items in the table, plus the size of all attributes projected\n      into all of the local secondary indexes on that table. Use this estimate to measure whether a\n      local secondary index is approaching its size limit.</p>\n    <p>The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.</p>\n  "
              }
            },
            "documentation": "\n    <p>Information about item collections, if any, that were affected by the operation. <i>ItemCollectionMetrics</i> is only returned if it was asked for in the request. If the\n      table does not have any local secondary indexes, this information is not returned in the\n      response.</p>\n  "
          }
        },
        "documentation": "\n    <p>Represents the output of an <i>UpdateItem</i> operation.</p>\n  "
      },
      "errors": [
        {
          "shape_name": "ConditionalCheckFailedException",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>The conditional request failed.</p>\n  "
            }
          },
          "documentation": "\n    <p>A condition specified in the operation could not be evaluated.</p>\n  "
        },
        {
          "shape_name": "ProvisionedThroughputExceededException",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>You exceeded your maximum allowed provisioned throughput.</p>\n  "
            }
          },
          "documentation": "\n    <p>The request rate is too high, or the request is too large, for the available throughput to\n      accommodate. The AWS SDKs automatically retry requests that receive this exception;\n      therefore, your request will eventually succeed, unless the request is too large or your retry\n      queue is too large to finish. Reduce the frequency of requests by using the strategies listed in\n        <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#APIRetries\">Error Retries and Exponential Backoff</a> in the Amazon DynamoDB Developer Guide.</p>\n  "
        },
        {
          "shape_name": "ResourceNotFoundException",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>The resource which is being requested does not exist.</p>\n  "
            }
          },
          "documentation": "\n    <p>The operation tried to access a nonexistent table or index. The resource may not be specified correctly, or its status may not be <code>ACTIVE</code>.</p>\n  "
        },
        {
          "shape_name": "ItemCollectionSizeLimitExceededException",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>The total size of an item collection has exceeded the maximum limit of 10 gigabytes.</p>\n  "
            }
          },
          "documentation": "\n    <p>An item collection is too large. This exception is only returned for tables that have one or\n      more local secondary indexes.</p>\n  "
        },
        {
          "shape_name": "InternalServerError",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>The server encountered an internal error trying to fulfill the request.</p>\n  "
            }
          },
          "documentation": "\n    <p>An error occurred on the server side.</p>\n  "
        }
      ],
      "documentation": "\n    <p> Edits an existing item's attributes, or inserts a new item if it does not already exist. You can put, delete, or add attribute values. You can\n      also perform a conditional update (insert a new attribute name-value pair if it doesn't exist,\n      or replace an existing name-value pair if it has certain expected attribute values).</p>\n    <p>In addition to updating an item, you can also return the item's attribute values in the same operation, using the <i>ReturnValues</i> parameter.</p>\n    <examples>\n      <example>\n        <name>Conditional Update</name>\n        <description>\n          <p>This example updates the Thread table, changing the LastPostedBy attribute-but\n            only if LastPostedBy is currently \"fred@example.com\". All of the item's attributes, as\n            they appear after the update, are returned in the response.</p>\n        </description>\n        <request><![CDATA[\nPOST / HTTP/1.1\nHost: dynamodb.<region>.<domain>;\nX-Amz-Date: <Date>\nAuthorization: AWS4-HMAC-SHA256 Credential=<Credential>, SignedHeaders=content-length;content-type;host;user-agent;x-amz-content-sha256;x-amz-date;x-amz-target, Signature=<Signature>\nUser-Agent: <UserAgentString>\nx-amz-content-sha256: <PayloadHash>\nContent-Type: application/x-amz-json-1.0\nContent-Length: <PayloadSizeBytes>     \nConnection: Keep-Alive]]>\nX-Amz-Target: DynamoDB_20120810.UpdateItem \n\n{\n    \"TableName\": \"Thread\",\n    \"Key\": {\n        \"ForumName\": {\n            \"S\": \"Amazon DynamoDB\"\n        },\n        \"Subject\": {\n            \"S\": \"Maximum number of items?\"\n        }\n    },\n    \"AttributeUpdates\": {\n        \"LastPostedBy\": {\n            \"Value\": {\n                \"S\": \"alice@example.com\"\n            },\n            \"Action\": \"PUT\"\n        }\n    },\n    \"Expected\": {\n        \"LastPostedBy\": {\n            \"Value\": {\n                \"S\": \"fred@example.com\"\n            },\n            \"Exists\": true\n        }\n    },\n    \"ReturnValues\": \"ALL_NEW\"\n}\n        </request>\n        <response><![CDATA[\nHTTP/1.1 200 OK\nx-amzn-RequestId: <RequestId> \nx-amz-crc32: <Checksum>\nContent-Type: application/x-amz-json-1.0\nContent-Length: <PayloadSizeBytes>\nDate: <Date>\n]]>\n{\n    \"Attributes\": {\n        \"LastPostedBy\": {\n            \"S\": \"alice@example.com\"\n        },\n        \"ForumName\": {\n            \"S\": \"Amazon DynamoDB\"\n        },\n        \"LastPostDateTime\": {\n            \"S\": \"20130320010350\"\n        },\n        \"Tags\": {\n            \"SS\": [\"Update\",\"Multiple Items\",\"HelpMe\"]\n        },\n        \"Subject\": {\n            \"S\": \"Maximum number of items?\"\n        },\n        \"Views\": {\n            \"N\": \"5\"\n        },\n        \"Message\": {\n            \"S\": \"I want to put 10 million data items to an Amazon DynamoDB table.  Is there an upper limit?\"\n        }\n    }\n}\n        </response>\n      </example>\n      <example>\n        <name>Atomic Counter</name>\n        <description>\n          <p>This example increments the Replies attribute in the Thread table whenever someone\n            posts a reply. Because ReturnValues is set to NONE, no output appears in the response\n            payload.</p>\n        </description>\n        <request><![CDATA[\nPOST / HTTP/1.1\nHost: dynamodb.<region>.<domain>;\nX-Amz-Date: <Date>\nAuthorization: AWS4-HMAC-SHA256 Credential=<Credential>, SignedHeaders=content-length;content-type;host;user-agent;x-amz-content-sha256;x-amz-date;x-amz-target, Signature=<Signature>\nUser-Agent: <UserAgentString>\nx-amz-content-sha256: <PayloadHash>\nContent-Type: application/x-amz-json-1.0\nContent-Length: <PayloadSizeBytes>     \nConnection: Keep-Alive]]>\nX-Amz-Target: DynamoDB_20120810.UpdateItem \n\n{\n    \"TableName\": \"Thread\",\n    \"Key\": {\n        \"ForumName\": {\n            \"S\": \"Amazon DynamoDB\"\n        },\n        \"Subject\": {\n            \"S\": \"A question about updates\"\n        }\n    },\n    \"AttributeUpdates\": {\n        \"Replies\": {\n            \"Action\": \"ADD\",\n            \"Value\": {\"N\": \"1\"}\n        }\n    },\n    \"ReturnValues\" : \"NONE\"\n}\n        </request>\n        <response><![CDATA[\nHTTP/1.1 200 OK\nx-amzn-RequestId: <RequestId> \nx-amz-crc32: <Checksum>\nContent-Type: application/x-amz-json-1.0\nContent-Length: <PayloadSizeBytes>\nDate: <Date>\n]]>\n{          \n}\n        </response>\n      </example>\n    </examples>\n  "
    },
    "UpdateTable": {
      "name": "UpdateTable",
      "input": {
        "shape_name": "UpdateTableInput",
        "type": "structure",
        "members": {
          "TableName": {
            "shape_name": "TableName",
            "type": "string",
            "min_length": 3,
            "max_length": 255,
            "pattern": "[a-zA-Z0-9_.-]+",
            "documentation": "\n    <p>The name of the table to be updated.</p>\n  ",
            "required": true
          },
          "ProvisionedThroughput": {
            "shape_name": "ProvisionedThroughput",
            "type": "structure",
            "members": {
              "ReadCapacityUnits": {
                "shape_name": "PositiveLongObject",
                "type": "long",
                "min_length": 1,
                "documentation": "\n    <p>The maximum number of strongly consistent reads consumed per second before Amazon DynamoDB returns a\n      <i>ThrottlingException</i>. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithDDTables.html#ProvisionedThroughput\">Specifying Read and Write Requirements</a> in the Amazon DynamoDB Developer Guide.</p>\n  ",
                "required": true
              },
              "WriteCapacityUnits": {
                "shape_name": "PositiveLongObject",
                "type": "long",
                "min_length": 1,
                "documentation": "\n    <p>The maximum number of writes consumed per second before Amazon DynamoDB returns a\n      <i>ThrottlingException</i>. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithDDTables.html#ProvisionedThroughput\">Specifying Read and Write Requirements</a> in the Amazon DynamoDB Developer Guide.</p>\n  ",
                "required": true
              }
            },
            "documentation": "\n    <p>Represents the provisioned throughput settings for a specified table or index. The settings can be modified using the <i>UpdateTable</i> operation.</p>\n      <p>For current minimum and maximum provisioned throughput values, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\">Limits</a> in the Amazon DynamoDB Developer Guide.</p>\n  "
          },
          "GlobalSecondaryIndexUpdates": {
            "shape_name": "GlobalSecondaryIndexUpdateList",
            "type": "list",
            "members": {
              "shape_name": "GlobalSecondaryIndexUpdate",
              "type": "structure",
              "members": {
                "Update": {
                  "shape_name": "UpdateGlobalSecondaryIndexAction",
                  "type": "structure",
                  "members": {
                    "IndexName": {
                      "shape_name": "IndexName",
                      "type": "string",
                      "min_length": 3,
                      "max_length": 255,
                      "pattern": "[a-zA-Z0-9_.-]+",
                      "documentation": "\n    <p>The name of the global secondary index to be updated.</p>\n  ",
                      "required": true
                    },
                    "ProvisionedThroughput": {
                      "shape_name": "ProvisionedThroughput",
                      "type": "structure",
                      "members": {
                        "ReadCapacityUnits": {
                          "shape_name": "PositiveLongObject",
                          "type": "long",
                          "min_length": 1,
                          "documentation": "\n    <p>The maximum number of strongly consistent reads consumed per second before Amazon DynamoDB returns a\n      <i>ThrottlingException</i>. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithDDTables.html#ProvisionedThroughput\">Specifying Read and Write Requirements</a> in the Amazon DynamoDB Developer Guide.</p>\n  ",
                          "required": true
                        },
                        "WriteCapacityUnits": {
                          "shape_name": "PositiveLongObject",
                          "type": "long",
                          "min_length": 1,
                          "documentation": "\n    <p>The maximum number of writes consumed per second before Amazon DynamoDB returns a\n      <i>ThrottlingException</i>. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithDDTables.html#ProvisionedThroughput\">Specifying Read and Write Requirements</a> in the Amazon DynamoDB Developer Guide.</p>\n  ",
                          "required": true
                        }
                      },
                      "documentation": "\n    <p>Represents the provisioned throughput settings for a specified table or index. The settings can be modified using the <i>UpdateTable</i> operation.</p>\n      <p>For current minimum and maximum provisioned throughput values, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\">Limits</a> in the Amazon DynamoDB Developer Guide.</p>\n  ",
                      "required": true
                    }
                  },
                  "documentation": "\n    <p>The name of a global secondary index, along with the updated provisioned throughput settings that are to be applied to that index.</p>\n  "
                }
              },
              "documentation": "\n    <p>Represents the new provisioned throughput settings to apply to a global secondary index.</p>\n  "
            },
            "documentation": "\n    <p>An array of one or more global secondary indexes on the table, together with provisioned throughput settings for each index.</p>\n  "
          }
        },
        "documentation": "\n    <p>Represents the input of an <i>UpdateTable</i> operation.</p>\n  "
      },
      "output": {
        "shape_name": "UpdateTableOutput",
        "type": "structure",
        "members": {
          "TableDescription": {
            "shape_name": "TableDescription",
            "type": "structure",
            "members": {
              "AttributeDefinitions": {
                "shape_name": "AttributeDefinitions",
                "type": "list",
                "members": {
                  "shape_name": "AttributeDefinition",
                  "type": "structure",
                  "members": {
                    "AttributeName": {
                      "shape_name": "KeySchemaAttributeName",
                      "type": "string",
                      "min_length": 1,
                      "max_length": 255,
                      "documentation": "\n    <p>A name for the attribute.</p>\n  ",
                      "required": true
                    },
                    "AttributeType": {
                      "shape_name": "ScalarAttributeType",
                      "type": "string",
                      "enum": [
                        "S",
                        "N",
                        "B"
                      ],
                      "documentation": "\n    <p>The data type for the attribute.</p>\n  ",
                      "required": true
                    }
                  },
                  "documentation": "\n    <p>Represents an attribute for describing the key schema for the table and indexes.</p>\n  "
                },
                "documentation": "\n    <p>An array of <i>AttributeDefinition</i> objects.  Each of these objects describes one attribute in the table and index key schema.</p>\n      <p>Each <i>AttributeDefinition</i> object in this array is composed of:</p>\n    <ul>\n      <li>\n        <p><i>AttributeName</i> - The name of the attribute.</p>\n      </li>\n      <li>\n        <p><i>AttributeType</i> - The data type for the attribute.</p>\n      </li>\n    </ul>\n  "
              },
              "TableName": {
                "shape_name": "TableName",
                "type": "string",
                "min_length": 3,
                "max_length": 255,
                "pattern": "[a-zA-Z0-9_.-]+",
                "documentation": "\n    <p>The name of the table.</p>\n  "
              },
              "KeySchema": {
                "shape_name": "KeySchema",
                "type": "list",
                "members": {
                  "shape_name": "KeySchemaElement",
                  "type": "structure",
                  "members": {
                    "AttributeName": {
                      "shape_name": "KeySchemaAttributeName",
                      "type": "string",
                      "min_length": 1,
                      "max_length": 255,
                      "documentation": "\n    <p>The name of a key attribute.</p>\n  ",
                      "required": true
                    },
                    "KeyType": {
                      "shape_name": "KeyType",
                      "type": "string",
                      "enum": [
                        "HASH",
                        "RANGE"
                      ],
                      "documentation": "\n    <p>The attribute data, consisting of the data type and the attribute value\n      itself.</p>\n  ",
                      "required": true
                    }
                  },
                  "documentation": "\n    <p>Represents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or\n      the key attributes of an index.</p>\n  "
                },
                "min_length": 1,
                "max_length": 2,
                "documentation": "\n    <p>The primary key structure for the table. Each <i>KeySchemaElement</i> consists of:</p>\n    <ul>\n      <li>\n        <p><i>AttributeName</i> - The name of the attribute.</p>\n      </li>\n      <li>\n        <p><i>KeyType</i> - The key type for the attribute. Can be either <code>HASH</code> or\n            <code>RANGE</code>.</p>\n      </li>\n    </ul>\n    <p>For more information about primary keys, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey\">Primary Key</a> in the Amazon DynamoDB Developer Guide.</p>\n  "
              },
              "TableStatus": {
                "shape_name": "TableStatus",
                "type": "string",
                "enum": [
                  "CREATING",
                  "UPDATING",
                  "DELETING",
                  "ACTIVE"
                ],
                "documentation": "\n    <p>The current state of the table:</p>\n    <ul>\n      <li>\n        <p><i>CREATING</i> - The table is being created, as the result of a <i>CreateTable</i>\n          operation.</p>\n      </li>\n      <li>\n        <p><i>UPDATING</i> - The table is being updated, as the result of an <i>UpdateTable</i>\n          operation.</p>\n      </li>\n      <li>\n        <p><i>DELETING</i> - The table is being deleted, as the result of a <i>DeleteTable</i>\n          operation.</p>\n      </li>\n      <li>\n        <p><i>ACTIVE</i> - The table is ready for use.</p>\n      </li>\n    </ul>\n  "
              },
              "CreationDateTime": {
                "shape_name": "Date",
                "type": "timestamp",
                "documentation": "\n    <p>The date and time when the table was created, in <a href=\"http://www.epochconverter.com/\">UNIX epoch time</a> format.</p>\n  "
              },
              "ProvisionedThroughput": {
                "shape_name": "ProvisionedThroughputDescription",
                "type": "structure",
                "members": {
                  "LastIncreaseDateTime": {
                    "shape_name": "Date",
                    "type": "timestamp",
                    "documentation": "\n    <p>The date and time of the last provisioned throughput increase for this table.</p>\n  "
                  },
                  "LastDecreaseDateTime": {
                    "shape_name": "Date",
                    "type": "timestamp",
                    "documentation": "\n    <p>The date and time of the last provisioned throughput decrease for this table.</p>\n  "
                  },
                  "NumberOfDecreasesToday": {
                    "shape_name": "PositiveLongObject",
                    "type": "long",
                    "min_length": 1,
                    "documentation": "\n    <p>The number of provisioned throughput decreases for this table during this UTC calendar day.\n      For current maximums on provisioned throughput decreases, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\">Limits</a> in the Amazon DynamoDB Developer Guide.</p>\n  "
                  },
                  "ReadCapacityUnits": {
                    "shape_name": "PositiveLongObject",
                    "type": "long",
                    "min_length": 1,
                    "documentation": "\n    <p>The maximum number of strongly consistent reads consumed per second before Amazon DynamoDB returns a\n        <i>ThrottlingException</i>. Eventually consistent reads require less effort than strongly\n      consistent reads, so a setting of 50 <i>ReadCapacityUnits</i> per second provides 100\n      eventually consistent <i>ReadCapacityUnits</i> per second.</p>\n  "
                  },
                  "WriteCapacityUnits": {
                    "shape_name": "PositiveLongObject",
                    "type": "long",
                    "min_length": 1,
                    "documentation": "\n    <p>The maximum number of writes consumed per second before Amazon DynamoDB returns a\n        <i>ThrottlingException</i>.</p>\n  "
                  }
                },
                "documentation": "\n    <p>The provisioned throughput settings for the table, consisting of read and write\n      capacity units, along with data about increases and decreases.</p>\n  "
              },
              "TableSizeBytes": {
                "shape_name": "Long",
                "type": "long",
                "documentation": "\n    <p>The total size of the specified table, in bytes. Amazon DynamoDB updates this value approximately every six\n      hours. Recent changes might not be reflected in this value.\n      </p>\n  "
              },
              "ItemCount": {
                "shape_name": "Long",
                "type": "long",
                "documentation": "\n    <p>The number of items in the specified table. Amazon DynamoDB updates this value approximately every six\n      hours. Recent changes might not be reflected in this value.\n      </p>\n  "
              },
              "LocalSecondaryIndexes": {
                "shape_name": "LocalSecondaryIndexDescriptionList",
                "type": "list",
                "members": {
                  "shape_name": "LocalSecondaryIndexDescription",
                  "type": "structure",
                  "members": {
                    "IndexName": {
                      "shape_name": "IndexName",
                      "type": "string",
                      "min_length": 3,
                      "max_length": 255,
                      "pattern": "[a-zA-Z0-9_.-]+",
                      "documentation": "\n    <p>Represents the name of the local secondary index.</p>\n  "
                    },
                    "KeySchema": {
                      "shape_name": "KeySchema",
                      "type": "list",
                      "members": {
                        "shape_name": "KeySchemaElement",
                        "type": "structure",
                        "members": {
                          "AttributeName": {
                            "shape_name": "KeySchemaAttributeName",
                            "type": "string",
                            "min_length": 1,
                            "max_length": 255,
                            "documentation": "\n    <p>The name of a key attribute.</p>\n  ",
                            "required": true
                          },
                          "KeyType": {
                            "shape_name": "KeyType",
                            "type": "string",
                            "enum": [
                              "HASH",
                              "RANGE"
                            ],
                            "documentation": "\n    <p>The attribute data, consisting of the data type and the attribute value\n      itself.</p>\n  ",
                            "required": true
                          }
                        },
                        "documentation": "\n    <p>Represents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or\n      the key attributes of an index.</p>\n  "
                      },
                      "min_length": 1,
                      "max_length": 2,
                      "documentation": "The complete index\n    key schema, which consists of one or more pairs of attribute names and key types\n      (<code>HASH</code> or <code>RANGE</code>). "
                    },
                    "Projection": {
                      "shape_name": "Projection",
                      "type": "structure",
                      "members": {
                        "ProjectionType": {
                          "shape_name": "ProjectionType",
                          "type": "string",
                          "enum": [
                            "ALL",
                            "KEYS_ONLY",
                            "INCLUDE"
                          ],
                          "documentation": "\n    <p>The set of attributes that are projected into the index:</p>\n    <ul>\n      <li>\n        <p><code>KEYS_ONLY</code> - Only the index and primary keys are projected into the\n          index.</p>\n      </li>\n      <li>\n        <p><code>INCLUDE</code> - Only the specified table attributes are projected into the\n          index. The list of projected attributes are\n          in <i>NonKeyAttributes</i>.</p>\n      </li>\n      <li>\n        <p><code>ALL</code> - All of the table attributes are projected into the\n          index.</p>\n      </li>\n    </ul>\n  "
                        },
                        "NonKeyAttributes": {
                          "shape_name": "NonKeyAttributeNameList",
                          "type": "list",
                          "members": {
                            "shape_name": "NonKeyAttributeName",
                            "type": "string",
                            "min_length": 1,
                            "max_length": 255,
                            "documentation": null
                          },
                          "min_length": 1,
                          "max_length": 20,
                          "documentation": "\n    <p>Represents the non-key attribute names which will be projected into the index.</p>\n    <p>For local secondary indexes, the total count of <i>NonKeyAttributes</i> summed across all of the local secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.</p>\n  "
                        }
                      },
                      "documentation": "\n    <p>Represents attributes that are copied (projected) from the table into an index. These are in\n      addition to the primary key attributes and index key attributes, which are automatically\n      projected.</p>\n  "
                    },
                    "IndexSizeBytes": {
                      "shape_name": "Long",
                      "type": "long",
                      "documentation": "\n    <p>The total size of the specified index, in bytes. Amazon DynamoDB updates this value approximately every six\n      hours. Recent changes might not be reflected in this value.\n      </p>\n  "
                    },
                    "ItemCount": {
                      "shape_name": "Long",
                      "type": "long",
                      "documentation": "\n    <p>The number of items in the specified index. Amazon DynamoDB updates this value approximately every six\n      hours. Recent changes might not be reflected in this value.\n      </p>\n  "
                    }
                  },
                  "documentation": "\n    <p>Represents the properties of a local secondary index.</p>\n  "
                },
                "documentation": "\n    <p>Represents one or more local secondary indexes on the table. Each index is scoped to a given\n      hash key value. Tables with one or more local secondary indexes are subject to an item\n      collection size limit, where the amount of data within a given item collection cannot exceed\n      10 GB. Each element is composed of:</p>\n    <ul>\n      <li>\n        <p><i>IndexName</i> - The name of the local secondary index.</p>\n      </li>\n      <li>\n        <p><i>KeySchema</i> - Specifies the complete index key schema. The attribute names in the\n          key schema must be between 1 and 255 characters (inclusive). The key schema must begin with the same hash key attribute as the table.</p>\n      </li>\n      <li>         <p><i>Projection</i> - Specifies\n          attributes that are copied (projected) from the table into the index. These are in\n          addition to the primary key attributes and index key\n          attributes, which are automatically projected. Each\n          attribute specification is composed of:</p>\n        <ul>\n          <li>\n            <p><i>ProjectionType</i> - One\n              of the following:</p>\n            <ul>\n              <li>\n                <p><code>KEYS_ONLY</code> - Only the index and primary keys are projected into the\n                  index.</p>\n              </li>\n              <li>\n                <p><code>INCLUDE</code> - Only the specified table attributes are projected into the\n                  index. The list of projected attributes are\n                  in <i>NonKeyAttributes</i>.</p>\n              </li>\n              <li>\n                <p><code>ALL</code> - All of the table attributes are projected into the\n                  index.</p>\n              </li>\n            </ul>\n          </li>\n          <li>\n            <p><i>NonKeyAttributes</i> - A list of one or more non-key attribute names that are \n              projected into the secondary index. The total count of attributes specified in <i>NonKeyAttributes</i>, summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.</p>\n          </li>\n        </ul>\n </li>\n      <li>\n        <p><i>IndexSizeBytes</i> - Represents the total size of the index, in bytes. Amazon DynamoDB updates\n          this value approximately every six hours. Recent changes might not be reflected in this\n          value.</p>\n</li>\n      <li>\n        <p><i>ItemCount</i> - Represents the number of items in the index. Amazon DynamoDB updates this value\n          approximately every six hours. Recent changes might not be reflected in this value.</p>\n      </li>\n    </ul>\n    <p>If the table is in the <code>DELETING</code> state, no information about indexes will be returned.</p>\n  "
              },
              "GlobalSecondaryIndexes": {
                "shape_name": "GlobalSecondaryIndexDescriptionList",
                "type": "list",
                "members": {
                  "shape_name": "GlobalSecondaryIndexDescription",
                  "type": "structure",
                  "members": {
                    "IndexName": {
                      "shape_name": "IndexName",
                      "type": "string",
                      "min_length": 3,
                      "max_length": 255,
                      "pattern": "[a-zA-Z0-9_.-]+",
                      "documentation": "\n    <p>The name of the global secondary index.</p>\n  "
                    },
                    "KeySchema": {
                      "shape_name": "KeySchema",
                      "type": "list",
                      "members": {
                        "shape_name": "KeySchemaElement",
                        "type": "structure",
                        "members": {
                          "AttributeName": {
                            "shape_name": "KeySchemaAttributeName",
                            "type": "string",
                            "min_length": 1,
                            "max_length": 255,
                            "documentation": "\n    <p>The name of a key attribute.</p>\n  ",
                            "required": true
                          },
                          "KeyType": {
                            "shape_name": "KeyType",
                            "type": "string",
                            "enum": [
                              "HASH",
                              "RANGE"
                            ],
                            "documentation": "\n    <p>The attribute data, consisting of the data type and the attribute value\n      itself.</p>\n  ",
                            "required": true
                          }
                        },
                        "documentation": "\n    <p>Represents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or\n      the key attributes of an index.</p>\n  "
                      },
                      "min_length": 1,
                      "max_length": 2,
                      "documentation": "\n    <p>The complete key schema for the global secondary index, consisting of one or more pairs of attribute names and key types\n      (<code>HASH</code> or <code>RANGE</code>).</p> \n  "
                    },
                    "Projection": {
                      "shape_name": "Projection",
                      "type": "structure",
                      "members": {
                        "ProjectionType": {
                          "shape_name": "ProjectionType",
                          "type": "string",
                          "enum": [
                            "ALL",
                            "KEYS_ONLY",
                            "INCLUDE"
                          ],
                          "documentation": "\n    <p>The set of attributes that are projected into the index:</p>\n    <ul>\n      <li>\n        <p><code>KEYS_ONLY</code> - Only the index and primary keys are projected into the\n          index.</p>\n      </li>\n      <li>\n        <p><code>INCLUDE</code> - Only the specified table attributes are projected into the\n          index. The list of projected attributes are\n          in <i>NonKeyAttributes</i>.</p>\n      </li>\n      <li>\n        <p><code>ALL</code> - All of the table attributes are projected into the\n          index.</p>\n      </li>\n    </ul>\n  "
                        },
                        "NonKeyAttributes": {
                          "shape_name": "NonKeyAttributeNameList",
                          "type": "list",
                          "members": {
                            "shape_name": "NonKeyAttributeName",
                            "type": "string",
                            "min_length": 1,
                            "max_length": 255,
                            "documentation": null
                          },
                          "min_length": 1,
                          "max_length": 20,
                          "documentation": "\n    <p>Represents the non-key attribute names which will be projected into the index.</p>\n    <p>For local secondary indexes, the total count of <i>NonKeyAttributes</i> summed across all of the local secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.</p>\n  "
                        }
                      },
                      "documentation": "\n    <p>Represents attributes that are copied (projected) from the table into an index. These are in\n      addition to the primary key attributes and index key attributes, which are automatically\n      projected.</p>\n  "
                    },
                    "IndexStatus": {
                      "shape_name": "IndexStatus",
                      "type": "string",
                      "enum": [
                        "CREATING",
                        "UPDATING",
                        "DELETING",
                        "ACTIVE"
                      ],
                      "documentation": "\n    <p>The current state of the global secondary index:</p>\n    <ul>\n      <li>\n        <p><i>CREATING</i> - The index is being created, as the result of a <i>CreateTable</i> or \n          <i>UpdateTable</i> operation.</p>\n      </li>\n      <li>\n        <p><i>UPDATING</i> - The index is being updated, as the result of a <i>CreateTable</i> or \n          <i>UpdateTable</i> operation.</p>\n      </li>\n      <li>\n        <p><i>DELETING</i> - The index is being deleted, as the result of a <i>DeleteTable</i>\n          operation.</p>\n      </li>\n      <li>\n        <p><i>ACTIVE</i> - The index is ready for use.</p>\n      </li>\n    </ul>\n  "
                    },
                    "ProvisionedThroughput": {
                      "shape_name": "ProvisionedThroughputDescription",
                      "type": "structure",
                      "members": {
                        "LastIncreaseDateTime": {
                          "shape_name": "Date",
                          "type": "timestamp",
                          "documentation": "\n    <p>The date and time of the last provisioned throughput increase for this table.</p>\n  "
                        },
                        "LastDecreaseDateTime": {
                          "shape_name": "Date",
                          "type": "timestamp",
                          "documentation": "\n    <p>The date and time of the last provisioned throughput decrease for this table.</p>\n  "
                        },
                        "NumberOfDecreasesToday": {
                          "shape_name": "PositiveLongObject",
                          "type": "long",
                          "min_length": 1,
                          "documentation": "\n    <p>The number of provisioned throughput decreases for this table during this UTC calendar day.\n      For current maximums on provisioned throughput decreases, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\">Limits</a> in the Amazon DynamoDB Developer Guide.</p>\n  "
                        },
                        "ReadCapacityUnits": {
                          "shape_name": "PositiveLongObject",
                          "type": "long",
                          "min_length": 1,
                          "documentation": "\n    <p>The maximum number of strongly consistent reads consumed per second before Amazon DynamoDB returns a\n        <i>ThrottlingException</i>. Eventually consistent reads require less effort than strongly\n      consistent reads, so a setting of 50 <i>ReadCapacityUnits</i> per second provides 100\n      eventually consistent <i>ReadCapacityUnits</i> per second.</p>\n  "
                        },
                        "WriteCapacityUnits": {
                          "shape_name": "PositiveLongObject",
                          "type": "long",
                          "min_length": 1,
                          "documentation": "\n    <p>The maximum number of writes consumed per second before Amazon DynamoDB returns a\n        <i>ThrottlingException</i>.</p>\n  "
                        }
                      },
                      "documentation": "\n    <p>Represents the provisioned throughput settings for the table, consisting of read and write\n      capacity units, along with data about increases and decreases.</p>\n  "
                    },
                    "IndexSizeBytes": {
                      "shape_name": "Long",
                      "type": "long",
                      "documentation": "\n    <p>The total size of the specified index, in bytes. Amazon DynamoDB updates this value approximately every six\n      hours. Recent changes might not be reflected in this value.\n      </p>\n  "
                    },
                    "ItemCount": {
                      "shape_name": "Long",
                      "type": "long",
                      "documentation": "\n    <p>The number of items in the specified index. Amazon DynamoDB updates this value approximately every six\n      hours. Recent changes might not be reflected in this value.\n      </p>\n  "
                    }
                  },
                  "documentation": "\n    <p>Represents the properties of a global secondary index.</p>\n  "
                },
                "documentation": "\n    <p>The global secondary indexes, if any, on the table. Each index is scoped to a given\n      hash key value. Each element is composed of:</p>\n    <ul>\n      <li>\n        <p><i>IndexName</i> - The name of the global secondary index.</p>\n      </li>\n      <li>\n        <p><i>KeySchema</i> - Specifies the complete index key schema. The attribute names in the\n          key schema must be between 1 and 255 characters (inclusive). The key schema must begin with the same hash key attribute as the table.</p>\n      </li>\n      <li>         <p><i>Projection</i> - Specifies\n          attributes that are copied (projected) from the table into the index. These are in\n          addition to the primary key attributes and index key\n          attributes, which are automatically projected. Each\n          attribute specification is composed of:</p>\n        <ul>\n          <li>\n            <p><i>ProjectionType</i> - One\n              of the following:</p>\n            <ul>\n              <li>\n                <p><code>KEYS_ONLY</code> - Only the index and primary keys are projected into the\n                  index.</p>\n              </li>\n              <li>\n                <p><code>INCLUDE</code> - Only the specified table attributes are projected into the\n                  index. The list of projected attributes are\n                  in <i>NonKeyAttributes</i>.</p>\n              </li>\n              <li>\n                <p><code>ALL</code> - All of the table attributes are projected into the\n                  index.</p>\n              </li>\n            </ul>\n          </li>\n          <li>\n            <p><i>NonKeyAttributes</i> - A list of one or more non-key attribute names that are \n              projected into the secondary index. The total count of attributes specified in <i>NonKeyAttributes</i>, summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.</p>\n          </li>\n        </ul>\n </li>\n      <li>\n        <p><i>ProvisionedThroughput</i> - The provisioned throughput settings for the global secondary index,\n          consisting of read and write capacity units, along with data about increases and\n          decreases. </p>\n      </li>\n      <li>\n        <p><i>IndexSizeBytes</i> - The total size of the global secondary index, in bytes. Amazon DynamoDB updates this value approximately every six\n      hours. Recent changes might not be reflected in this value.\n      </p>\n</li>\n      <li>\n        <p><i>ItemCount</i> - The number of items in the global secondary index. Amazon DynamoDB updates this value approximately every six\n      hours. Recent changes might not be reflected in this value.\n      </p>\n      </li>\n    </ul>\n    <p>If the table is in the <code>DELETING</code> state, no information about indexes will be returned.</p>\n  "
              }
            },
            "documentation": "\n    <p>Represents the properties of a table.</p>\n  "
          }
        },
        "documentation": "\n    <p>Represents the output of an <i>UpdateTable</i> operation.</p>\n  "
      },
      "errors": [
        {
          "shape_name": "ResourceInUseException",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>The resource which is being attempted to be changed is in use.</p>\n  "
            }
          },
          "documentation": "\n    <p>The operation conflicts with the resource's availability. For example, you attempted to\n      recreate an existing table, or tried to delete a table currently in the <code>CREATING</code>\n      state.</p>\n  "
        },
        {
          "shape_name": "ResourceNotFoundException",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>The resource which is being requested does not exist.</p>\n  "
            }
          },
          "documentation": "\n    <p>The operation tried to access a nonexistent table or index. The resource may not be specified correctly, or its status may not be <code>ACTIVE</code>.</p>\n  "
        },
        {
          "shape_name": "LimitExceededException",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>Too many operations for a given subscriber.</p>\n  "
            }
          },
          "documentation": "\n    <p>The number of concurrent table requests (cumulative number of tables in the\n        <code>CREATING</code>, <code>DELETING</code> or <code>UPDATING</code> state) exceeds the\n      maximum allowed of 10.</p>\n    <p>Also, for tables with secondary indexes, only one of those tables can be in the <code>CREATING</code> state at any point in time. Do not attempt to create more than one such table simultaneously.</p> \n      <p>The total limit of tables in the <code>ACTIVE</code> state is 250.</p>\n  "
        },
        {
          "shape_name": "InternalServerError",
          "type": "structure",
          "members": {
            "message": {
              "shape_name": "ErrorMessage",
              "type": "string",
              "documentation": "\n    <p>The server encountered an internal error trying to fulfill the request.</p>\n  "
            }
          },
          "documentation": "\n    <p>An error occurred on the server side.</p>\n  "
        }
      ],
      "documentation": "\n    <p>Updates the provisioned throughput for the given table. Setting the throughput for a table\n      helps you manage performance and is part of the provisioned throughput feature of Amazon DynamoDB.</p>\n    <p>The provisioned throughput values can be upgraded or downgraded based on the maximums and\n      minimums listed in the <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\">Limits</a> section in the Amazon DynamoDB Developer Guide.</p>\n    <p>The table must be in the <code>ACTIVE</code> state for this operation to succeed.\n        <i>UpdateTable</i> is an asynchronous operation; while executing the operation, the table is\n      in the <code>UPDATING</code> state. While the table is in the <code>UPDATING</code> state, the\n      table still has the provisioned throughput from before the call. The new provisioned\n      throughput setting is in effect only when the table returns to the <code>ACTIVE</code> state\n      after the <i>UpdateTable</i> operation. </p>\n    <p>You cannot add, modify or delete indexes using <i>UpdateTable</i>. Indexes can only be defined at table creation time.</p>\n\n    <examples>\n      <example>\n        <name>Modify Provisioned Write Throughput</name>\n        <description>\n          <p> This example changes both the provisioned read and write throughput of the Thread table to\n            10 capacity units.</p>\n        </description>\n        <request><![CDATA[\nPOST / HTTP/1.1\nHost: dynamodb.<region>.<domain>;\nX-Amz-Date: <Date>\nAuthorization: AWS4-HMAC-SHA256 Credential=<Credential>, SignedHeaders=content-length;content-type;host;user-agent;x-amz-content-sha256;x-amz-date;x-amz-target, Signature=<Signature>\nUser-Agent: <UserAgentString>\nx-amz-content-sha256: <PayloadHash>\nContent-Type: application/x-amz-json-1.0\nContent-Length: <PayloadSizeBytes>     \nConnection: Keep-Alive]]>\nX-Amz-Target: DynamoDB_20120810.UpdateTable \n\n{\n    \"TableName\": \"Thread\",\n    \"ProvisionedThroughput\": {\n        \"ReadCapacityUnits\": 10,\n        \"WriteCapacityUnits\": 10\n    }\n}\n        </request>\n        <response><![CDATA[\nHTTP/1.1 200 OK\nx-amzn-RequestId: <RequestId> \nx-amz-crc32: <Checksum>\nContent-Type: application/x-amz-json-1.0\nContent-Length: <PayloadSizeBytes>\nDate: <Date>\n]]>\n{          \n    \"TableDescription\": {\n        \"AttributeDefinitions\": [\n            {\n                \"AttributeName\": \"ForumName\",\n                \"AttributeType\": \"S\"\n            },\n            {\n                \"AttributeName\": \"LastPostDateTime\",\n                \"AttributeType\": \"S\"\n            },\n            {\n                \"AttributeName\": \"Subject\",\n                \"AttributeType\": \"S\"\n            }\n        ],\n        \"CreationDateTime\": 1.363801528686E9,\n        \"ItemCount\": 0,\n        \"KeySchema\": [\n            {\n                \"AttributeName\": \"ForumName\",\n                \"KeyType\": \"HASH\"\n            },\n            {\n                \"AttributeName\": \"Subject\",\n                \"KeyType\": \"RANGE\"\n            }\n        ],\n        \"LocalSecondaryIndexes\": [\n            {\n                \"IndexName\": \"LastPostIndex\",\n                \"IndexSizeBytes\": 0,\n                \"ItemCount\": 0,\n                \"KeySchema\": [\n                    {\n                        \"AttributeName\": \"ForumName\",\n                        \"KeyType\": \"HASH\"\n                    },\n                    {\n                        \"AttributeName\": \"LastPostDateTime\",\n                        \"KeyType\": \"RANGE\"\n                    }\n                ],\n                \"Projection\": {\n                    \"ProjectionType\": \"KEYS_ONLY\"\n                }\n            }\n        ],\n        \"ProvisionedThroughput\": {\n            \"LastIncreaseDateTime\": 1.363801701282E9,\n            \"NumberOfDecreasesToday\": 0,\n            \"ReadCapacityUnits\": 5,\n            \"WriteCapacityUnits\": 5\n        },\n        \"TableName\": \"Thread\",\n        \"TableSizeBytes\": 0,\n        \"TableStatus\": \"UPDATING\"\n    }\n}\n        </response>\n      </example>\n    </examples>\n  "
    }
  },
  "pagination": {
    "BatchGetItem": {
      "input_token": "RequestItems",
      "output_token": "UnprocessedKeys",
      "result_key": "Responses[]"
    },
    "ListTables": {
      "input_token": "ExclusiveStartTableName",
      "output_token": "LastEvaluatedTableName",
      "limit_key": "Limit",
      "result_key": "TableNames"
    },
    "Query": {
      "input_token": "ExclusiveStartKey",
      "output_token": "LastEvaluatedKey",
      "limit_key": "Limit",
      "result_key": "Items"
    },
    "Scan": {
      "input_token": "ExclusiveStartKey",
      "output_token": "LastEvaluatedKey",
      "limit_key": "Limit",
      "result_key": "Items"
    }
  }
}
