{
  "name": "taskcluster-client",
  "version": "0.5.0",
  "author": {
    "name": "Jonas Finnemann Jensen",
    "email": "jopsen@gmail.com"
  },
  "description": "Client for interfacing taskcluster components",
  "license": "MPL-2.0",
  "scripts": {
    "test": "mocha test/auth_test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/taskcluster/taskcluster-client.git"
  },
  "dependencies": {
    "promise": "4.0.0",
    "lodash": "2.4.1",
    "debug": "0.7.4",
    "superagent": "~0.16.0",
    "superagent-promise": "0.1.0",
    "superagent-hawk": "0.0.3",
    "hawk": "2.2.1"
  },
  "devDependencies": {
    "mocha": "1.18.2",
    "commander": "2.2.0",
    "cliff": "0.1.8"
  },
  "readme": "# TaskCluster Client\n_A taskcluster client library for node.js._\n\n## Usage\nThis client library is generated from the auto-generated API reference.\nYou can create a Client class from a JSON reference object at runtime using\n`taskcluster.createClient(reference)`. But there is also a set of builtin\nreferences from which Client classes are already constructed.\n\n```js\nvar taskcluster = require('taskcluster-client');\n\n// Instantiate the Queue Client class\nvar queue = new taskcluster.Queue({\n  credentials: {\n    clientId:     '...',\n    accessToken:  '...'\n  }\n});\n\n// Create task using the queue client\nqueue.createTask(task).then(function(result) {\n  // status is a task status structure\n  console.log(result.status);\n});\n```\n\nThe `payload` parameter is always a JSON object as documented by the REST API\ndocumentation. The methods always returns a _promise_ for the response JSON\nobject as documented in the REST API documentation.\n\n<!-- START OF GENERATED DOCS -->\n\n### Methods in `taskcluster.Auth`\n```js\n// Create Auth client instance with default baseUrl:\n//  - http://auth.taskcluster.net/v1\nvar auth = new taskcluster.Auth(options);\n```\n * `auth.inspect(clientId) : result`\n * `auth.getCredentials(clientId) : result`\n\n<!-- END OF GENERATED DOCS -->\n\n### Create Client Class Dynamically\nYou can create a Client class from a reference JSON object as illustrated\nbelow:\n\n```js\nvar reference = {...}; // JSON from references.taskcluster.net/...\n\n// Create Client class\nvar MyClient = taskcluster.createClient(reference);\n\n// Instantiate an instance of MyClient\nvar myClient = new MyClient({\n  credentials: {...}\n});\n\n// Make a request with a method on myClient\nmyClient.myMethod(arg1, arg2, payload).then(function(result) {\n  // ...\n});\n```\n\n### Configuring API BaseUrls\nIf you use the builtin API Client classes documented above you can configure\nthe `baseUrl` when creating an instance of the client. As illustrated below:\n\n```js\nvar auth = new taskcluster.Auth({\n  credentials:  {...},\n  baseUrl:      \"http://localhost:4040\" // Useful for development and testing\n});\n```\n### Configuring Credentials\nWhen creating an instance of a Client class the credentials can be provided\nin options. For example:\n```js\nvar auth = new taskcluster.Auth({\n  credentials: {\n    clientId:     '...',\n    accessToken:  '...'\n  }\n});\n```\n\nYou can also configure default options globally using\n`taskcluster.config(options)`, as follows:\n\n```js\n// Configure default options\ntaskcluster.config({\n  credentials: {\n    clientId:     '...',\n    accessToken:  '...'\n  }\n});\n\n// No credentials needed here\nvar auth = new taskcluster.Auth();\n```\n\n### Delegated Authorization\nIf your client has the scope `auth:can-delegate` you can send requests with\na scope set different from the one you have. This is useful when the\nscheduler performs a request on behalf of a task-graph, or when\nauthentication takes place in a trusted proxy. See example below:\n\n```js\n// Create delegating instance of Auth Client class\nvar auth = new taskcluster.Auth({\n  credentials: {\n    clientId:     '...',\n    accessToken:  '...',\n    delegating:   true,\n    scopes:       ['scope', ...]  // For example task.scopes\n  }\n});\n\n// This request is only successful if the set of scopes declared above\n// allows the request to come through. The set of scopes the client has\n// will not be used to authorize this request.\nauth.getCredentials(someClientId).then(function(result) {\n  // ...\n});\n```\nWe call this delegated authorization, because the trusted node that has the\nscope `auth:can-delegate`, delegates authorization of the request to API\nend-point.\n\n## Updating Builtin APIs\nWhen releasing a new version of the `taskcluster-client` library, we should\nalways update the builtin references using `utils/update-apis.js` this\nmaintenance script can be used to list, show, add, remove and update builtin\nAPI definitions.\n\nWhen `apis.json` is updated, please run `utils/generate-docs.js` to update\nthe documentation in this file.\n\n##License\nThe taskcluster client library is released on [MPL 2.0](http://mozilla.org/MPL/2.0/).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/taskcluster/taskcluster-client/issues"
  },
  "homepage": "https://github.com/taskcluster/taskcluster-client",
  "_id": "taskcluster-client@0.5.0",
  "_from": "taskcluster-client@0.5.0"
}
