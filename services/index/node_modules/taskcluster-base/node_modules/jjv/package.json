{
  "name": "jjv",
  "version": "1.0.2",
  "author": {
    "name": "Alex Cornejo"
  },
  "devDependencies": {
    "chai": "~1.8.1",
    "mocha": "~1.13.0",
    "uglify-js": "~2.4.0",
    "jshint": "~2.3.0"
  },
  "dependencies": {},
  "repository": {
    "type": "git",
    "url": "https://github.com/acornejo/jjv.git",
    "web": "https://github.com/acornejo/jjv"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/acornejo/jjv/raw/master/LICENSE"
    }
  ],
  "scripts": {
    "prepublish": "mkdir build; ./node_modules/.bin/uglifyjs -o build/jjv.min.js lib/jjv.js",
    "pretest": "./node_modules/.bin/jshint -e 'js,json' ./lib ./test",
    "test": "./node_modules/.bin/mocha -b -R spec ./test"
  },
  "main": "index.js",
  "readme": "# JJV: JJV JSON Validator\n\nA simple and extensible json-schema validator written in javascript. JJV\nruns in the browser and in the server (through node.js), it has no\ndependencies and has out-of-the-box AMD support.\n\nJJV implements the latest (v4) JSON Schema Core draft, however due to\nperformance and security concerns remote schemas are not fetched. To\nensure compliance JJV is tested against JSON Schema Test Suite published\nby json-schema.org (and passes all tests). For examples and a detailed\ndescription of the JSON-schema specification visit\n[json-schema.org](http://json-schema.org).\n\nJJV is fast! For a detailed performance comparison visit z-schema's\n[benchmarks](https://rawgithub.com/zaggino/z-schema/master/benchmark/results.html)\nwebsite, which compares various javascript JSON schema validators.\n\n## Basic Usage\n\nIn the most basic usage an environment must be created, and one or more\nnamed schemas are registered in the environment (it is also possible to\nregister schemas with remote URI's in the same way). Javascript\nobjects can then be validated against any registered schema.\n\n```javascript\n// create new JJV environment\nvar env = jjv();\n\n// Register a `user` schema\nenv.addSchema('user', {\n    type: 'object',\n    properties: {\n        firstname: {\n            type: 'string',\n            minLength: 2,\n            maxLength: 15\n        },\n        lastname: {\n            type: 'string',\n            minLength: 2,\n            maxLength: 25\n        },\n        gender: {\n            type: 'string',\n            enum: ['male', 'female']\n        },\n        email: {\n            type: 'string',\n            format: 'email'\n        },\n        password: {\n            type: 'string',\n            minLength: 8\n        }\n    },\n    required: ['firstname', 'lastname', 'email', 'password']\n});\n\n// Perform validation against an incomplete user object (errors will be reported)\nvar errors = env.validate('user', {firstname: 'John', lastname: 'Smith'});\n\n// validation was successful\nif (!errors) {\n    alert('User has been validated.')\n} else {\n    alert('Failed with error object ' + JSON.stringify(errors));\n}\n```\n\nIt is also possible to validate objects against unregistered and/or\nunnamed schemas by supplying the schema object directly. For example:\n\n```javascript\nvar env = jjv();\n\nvar errors = env.validate({\n    type: 'object',\n    properties: {\n        x: {\n            type: 'number'\n        },\n        y: {\n            type: 'number'\n        }\n    },\n    required: ['x', 'y']\n }, {x: 20, y: 50});\n\n```\n\n## Validation Options\n\nJJV provides options to control the validation of required fields, the\nhandling of default values, and the handling of additional properties.\n\n<table>\n    <tr>\n        <th>Option</th>\n        <th>Default</th>\n        <th>Description</th>\n    </tr>\n    <tr>\n        <td>checkRequired</td>\n        <td>true</td>\n        <td>If true it reports missing required properties, otherwise it\n        allows missing required properties.</td>\n    </tr>\n    <tr>\n        <td>useDefault</td>\n        <td>false</td>\n        <td>If true it modifies the object to have the default values for\n        missing non-required fields.</td>\n    </tr>\n    <tr>\n        <td>useCoerce</td>\n        <td>false</td>\n        <td>If true it enables type coercion where defined.</td>\n    </tr>\n    <tr>\n        <td>removeAdditional</td>\n        <td>false</td>\n        <td>If true it removes all attributes of an object which are not\n        matched by the schema's specification.\n    </tr>\n</table>\n\nThe defaults can be overridden for the entire environment or on a\nper-validation basis. For example, to override the checkRequired option\nfor the entire environment simply do:\n\n```javascript\nenv.defaultOptions.checkRequired=false;\n```\n\nTo override the checkRequired option on a per-validation case do:\n\n```\nenv.validate('schemaName', object, {checkRequired: false});\n```\n\n## Advanced Usage\n\nJJV provides mechanisms to add support for custom types, custom formats,\nand custom checks.\n\n### Custom Types\n\nSupport for additional types can be added through the `addType`\nfunction. For example, a simple implementation of the `date` type could\nbe the following:\n\n```javascript\nenv.addType('date', function (v) {\n  return !isNan(Date.parse(v));\n});\n```\n\n### Custom Formats\n\nIt is also possible to add support for additional string formats through\nthe `addFormat` function. For example, an implementation of the\n`hexadecimal` string format (already included) could be as follows:\n\n```javascript\nenv.addFormat('hexadecimal', function (v) {\n    return (/^[a-fA-F0-9]+$/).test(v);\n});\n```\n\n### Custom Checks\n\nIt is possible to add support for custom checks (i.e.,\n`minItems`, `maxItems`, `minLength`, `maxLength`, etc.) through the\n`addCheck` function. For example, an implementation for an `exactLength`\nvalidation keyword that supports arrays and strings can be achieved with\nthe following:\n\n```javascript\nenv.addCheck('exactLength', function (v, p) {\n    return v.length === p;\n});\n```\n\n### Custom Type Coercion\n\nJJV allows custom type coercion rules. As an example, supposed that fields\nwhich are declared with as type `integer` are sometimes encoded as a string.\nType coercion allows you to specify that all types declared as `integer` should\nbe cast/coerced to an `integer` before performing validation.\n\n```javascript\nenv.addTypeCoercion('integer', function (x) {\n    return parseInt(x, 10);\n});\n```\n\nRecall to set the option `useCoerce` to `true` to enable this feature.\n\n## $data v5 proposal\n\nJJV supports the `$data` spec proposed for draft 5 of json-schema,\ncomplete with relative and absolute JSON pointers.\n\nFor information on how to use these feature see the proposal here:\n\n[$data-proposal](https://github.com/json-schema/json-schema/wiki/$data-(v5-proposal)).\n",
  "readmeFilename": "README.md",
  "description": "A simple and extensible json-schema validator written in javascript. JJV runs in the browser and in the server (through node.js), it has no dependencies and has out-of-the-box AMD support.",
  "bugs": {
    "url": "https://github.com/acornejo/jjv/issues"
  },
  "homepage": "https://github.com/acornejo/jjv",
  "_id": "jjv@1.0.2",
  "dist": {
    "shasum": "f5271e1939f69289cc99caba982a6489ce664928"
  },
  "_from": "jjv@1.0.2",
  "_resolved": "https://registry.npmjs.org/jjv/-/jjv-1.0.2.tgz"
}
