{
  "name": "buffer-more-ints",
  "version": "0.0.2",
  "author": {
    "name": "David Wragg",
    "email": "david@wragg.org"
  },
  "description": "Add support for more integer widths to Buffer",
  "homepage": "https://github.com/dpw/node-buffer-more-ints",
  "repository": {
    "type": "git",
    "url": "https://github.com/dpw/node-buffer-more-ints.git"
  },
  "main": "buffer-more-ints.js",
  "devDependencies": {
    "nodeunit": ""
  },
  "scripts": {
    "test": "node ./node_modules/nodeunit/bin/nodeunit buffer-more-ints-tests.js"
  },
  "readme": "# buffer-more-ints: Add support for more integer widths to Buffer\n\nNode's Buffer only supports reading and writing integers of a limited\nrange of widths.  This module provides support for more widths, so\nthat integers from 1 to 8 bytes (64 bits) can be accessed.  The\nsupport takes two forms. Firstly, as stand-alone functions similar to\nthe integer reading/writing methods of Buffer:\n\n    $ node\n    > var moreints = require('buffer-more-ints')\n    undefined\n    > moreints.readInt64BE(new Buffer(\"0000deadbeef0000\", \"hex\"), 0).toString(16)\n    'deadbeef0000'\n\nRead and write functions for the regular widths (8, 16, 32) are also\npresent in this module, for consistency.\n\nThe second form is methods patched into `Buffer.prototype`, installed\nby requiring `'buffer-more-ints/polyfill'`:\n\n    $ node\n    > require('buffer-more-ints/polyfill')\n    {}\n    > new Buffer(\"0000deadbeef0000\", \"hex\").readInt64BE(0).toString(16)\n    'deadbeef0000'\n\n\nbuffer-more-ints/polyfill also adds methods `readIntBE`, `writeIntBE`,\nand their LE and UInt counterparts, which take an initial argument\ngiving the width of the integer in bytes:\n\n    > var b = new Buffer(3);\n    > b.writeIntLE(3, -123456, 0);\n    > b.toString('hex')\n    'c01dfe'\n    > b.readIntLE(3, 0);\n    -123456\n\nThe functions added by buffer-more-ints are all implemented in terms\nof the core Buffer functions.  Part way through writing the code, I\ndiscovered that node.js currently implements those in JavaScript, so\nthis doesn't lead to performance benefits.  But should node ever\nswitch to implementing its Buffer operations natively, this\nmodule should get a speed boost.\n\n## Limitations\n\nAs JavaScript uses IEEE754 doubles for numbers, the contiguous range\nof integers it can represent is [-2^53 - 1, 2^53 - 1].  So only\ninteger widths up to 6 bytes or 48 bits can be read exactly.  Reads of\n7 or 8 bytes (56 or 64 bits) will return the closest value that can be\nrepresented as a JavaScript number.\n\nIn certain situations it might be important to check that a JavaScript\nnumber was read exactly.  The `isContiguousInt` or\n`Buffer.isContiguousInt` (polyfill) function will determine this:\n\n    > Buffer.isContiguousInt(0x1fffffffffffff);\n    true\n    > Buffer.isContiguousInt(0x20000000000000);\n    false\n\nAnd `assertContiguousInt` asserts that a number is so:\n\n    > Buffer.assertContiguousInt(0x1fffffffffffff);\n    undefined\n    > Buffer.assertContiguousInt(0x20000000000000);\n    AssertionError: number cannot be represented as a contiguous integer\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/dpw/node-buffer-more-ints/issues"
  },
  "_id": "buffer-more-ints@0.0.2",
  "_from": "buffer-more-ints@0.0.2"
}
