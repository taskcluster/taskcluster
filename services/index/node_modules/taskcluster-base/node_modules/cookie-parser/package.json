{
  "name": "cookie-parser",
  "description": "cookie parsing with signatures",
  "version": "1.3.2",
  "author": {
    "name": "TJ Holowaychuk",
    "email": "tj@vision-media.ca",
    "url": "http://tjholowaychuk.com"
  },
  "licenses": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/expressjs/cookie-parser"
  },
  "keywords": [
    "cookie",
    "middleware"
  ],
  "dependencies": {
    "cookie": "0.1.2",
    "cookie-signature": "1.0.4"
  },
  "devDependencies": {
    "istanbul": "0.2.12",
    "mocha": "~1.20.1",
    "supertest": "~0.13.0"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "mocha --reporter dot test/",
    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot test/",
    "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec test/"
  },
  "readme": "# cookie-parser\n\n[![NPM Version](https://badge.fury.io/js/cookie-parser.svg)](https://badge.fury.io/js/cookie-parser)\n[![Build Status](https://travis-ci.org/expressjs/cookie-parser.svg?branch=master)](https://travis-ci.org/expressjs/cookie-parser)\n[![Coverage Status](https://img.shields.io/coveralls/expressjs/cookie-parser.svg?branch=master)](https://coveralls.io/r/expressjs/cookie-parser)\n\nParse `Cookie` header and populate `req.cookies` with an object keyed by the cookie\nnames. Optionally you may enable signed cookie support by passing a `secret` string,\nwhich assigns `req.secret` so it may be used by other middleware.\n\n## Install\n\n```sh\n$ npm install cookie-parser\n```\n\n## API\n\n```js\nvar cookieParser = require('cookie-parser')\n```\n\n### cookieParser(secret, options)\n\n- `secret` a string used for signing cookies. This is optional and if not specified, will not parse signed cookies.\n- `options` an object that is passed to `cookie.parse` as the second option. See [cookie](https://www.npmjs.org/package/cookie) for more information.\n  - `decode` a function to decode the value of the cookie\n\n### cookieParser.JSONCookie(str)\n\nParse a cookie value as a JSON cookie. This will return the parsed JSON value if it was a JSON cookie, otherwise it will return the passed value.\n\n### cookieParser.JSONCookies(cookies)\n\nGiven an object, this will iterate over the keys and call `JSONCookie` on each value. This will return the same object passed in.\n\n### cookieParser.signedCookie(str, secret)\n\nParse a cookie value as a signed cookie. This will return the parsed unsigned value if it was a signed cookie and the signature was valid, otherwise it will return the passed value.\n\n### cookieParser.signedCookies(cookies, secret)\n\nGiven an object, this will iterate over the keys and check if any value is a signed cookie. If it is a signed cookie and the signature is valid, the key will be deleted from the object and added to the new object that is returned.\n\n## Example\n\n```js\nvar cookieParser = require('cookie-parser');\n\nconnect()\n .use(cookieParser('optional secret string'))\n .use(function(req, res, next){\n   res.end(JSON.stringify(req.cookies));\n })\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/expressjs/cookie-parser/issues"
  },
  "homepage": "https://github.com/expressjs/cookie-parser",
  "_id": "cookie-parser@1.3.2",
  "_from": "cookie-parser@1.3.2"
}
