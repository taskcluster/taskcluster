type LatestTask {
  taskId: ID!
  runId: Int!
  run: TaskRun
}

type QuarantineDetails {
  updatedAt: DateTime!
  clientId: String!
  quarantineUntil: DateTime!
  quarantineInfo: String!
}

type WorkerCompact {
  workerId: ID!
  workerGroup: String!
  lastDateActive: DateTime
  firstClaim: DateTime!
  latestTask: LatestTask
  quarantineUntil: DateTime
  quarantineDetails: [QuarantineDetails]
  provisionerId: String!
  workerType: String!
  state: String
  capacity: Int
  providerId: String
  workerPoolId: String
}

# Definition of a worker
type Worker {
  # Provisioner identifier.
  provisionerId: String!

  # Worker type name.
  workerType: String!

  # Identifier for group that worker who executes this run is a part of.
  # This identifier is mainly used for efficient routing.
  workerGroup: String!

  # Identifier for worker evaluating this run within given `workerGroup`.
  workerId: ID!

  # A list of 20 most recent `taskId`s claimed by the worker.
  recentTasks: [LatestTask]!

  # Date and time after which the worker will be automatically deleted by the queue.
  expires: DateTime!

  # Quarantining a worker allows the machine to remain alive but not accept jobs.
  # Once the `quarantineUntil` time has elapsed, the worker resumes accepting jobs.
  # Note that a quarantine can be lifted by setting quarantineUntil to the present time (or somewhere in the past).
  quarantineUntil: DateTime

  # A history of changes to the quarantine status of this worker.
  quarantineDetails: [QuarantineDetails]

  # Date of the first time this worker claimed a task.
  firstClaim: DateTime!

  # A list of actions exposed at the worker level.
  actions: [ProvisionerAction]!

  # A list of most recent tasks claimed by the worker.
  latestTasks: [Task]!

  # Date of the last time this worker was seen active. Updated each time a worker calls
  # `queue.claimWork`, `queue.reclaimTask`, and `queue.declareWorker` for this task queue.
  # `lastDateActive` is updated every half hour but may be off by up-to half an hour.
  # Nonetheless, `lastDateActive` is a good indicator of when the worker was last seen active.
  # This defaults to null in the database, and is set to the current time when the worker
  # is first seen.
  lastDateActive: DateTime

  # The current state of the worker.
  # One of [`requested`, `running`, `stopping`, `stopped`, `standalone`].
  state: String

  # The current capacity of the worker.
  capacity: Int

  # The worker's provider-specific ID.
  providerId: String

  # Unique identifier for a worker pool.
  workerPoolId: String
}

input WorkerQuarantine {
  quarantineUntil: DateTime
  quarantineInfo: String
}

type WorkersCompactEdge implements Edge {
  cursor: String
  node: WorkerCompact
}

type WorkersCompactConnection implements Connection {
  pageInfo: PageInfo
  edges: [WorkersCompactEdge]
}

type WorkersEdge implements Edge {
  cursor: String
  node: Worker
}

type WorkersConnection implements Connection {
  pageInfo: PageInfo
  edges: [WorkersEdge]
}

extend type Query {
  worker(provisionerId: String!, workerType: String!, workerGroup: String!, workerId: ID!): Worker
  workers(provisionerId: String!, workerType: String!, connection: PageConnection, filter: JSON, isQuarantined: Boolean, workerState: String): WorkersCompactConnection
}

extend type Mutation {
  quarantineWorker(
    provisionerId: String!,
    workerType: String!,
    workerGroup: String!,
    workerId: ID!,
    payload: WorkerQuarantine
  ): Worker
}
