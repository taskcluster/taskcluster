type HookMetadata {
  name: String!
  description: String!
  owner: String!
  emailOnError: Boolean
}

input HookMetadataInput {
  name: String!
  description: String!
  owner: String!
  emailOnError: Boolean
}

enum HookFireResult {
  SUCCESS
  ERROR
  NO_FIRE
}

enum HookFiredBy {
  SCHEDULE
  TRIGGER_HOOK
  TRIGGER_HOOK_WITH_TOKEN
  PULSE_MESSAGE
}

type HookSuccessfulFire {
  result: HookFireResult!
  taskId: String!
  time: DateTime!
}

type HookFailedFire {
  result: HookFireResult!
  error: JSON!
  time: DateTime!
}

type NoFire {
  result: HookFireResult!
}

union LastFire = HookSuccessfulFire | HookFailedFire | NoFire

type HookStatus {
  lastFire: LastFire!
  nextScheduledDate: DateTime
}

type Hook {
  hookGroupId: ID!
  hookId: ID!
  bindings: [HookBinding]
  metadata: HookMetadata!
  schedule: [String]!
  task: JSON!
  expires: DateTime!
  deadline: DateTime!
  triggerSchema: JSON!

  status(hookGroupId: ID = hookGroupId, hookId: ID = hookId): HookStatus
}

type HookGroup {
  hookGroupId: ID!

  hooks(hookGroupId: ID = hookGroupId): [Hook]
}

type DeleteHook {
  hookGroupId: ID
  hookId: ID
}

type HookBinding {
  exchange: String!
  routingKeyPattern: String!
}

input HookBindingInput {
  exchange: String!
  routingKeyPattern: String!
}

input HookInput {
  metadata: HookMetadataInput!
  schedule: [String]
  expires: String
  deadline: String
  bindings: [HookBindingInput]
  task: JSON!
  triggerSchema: JSON
}

type HookLastFire {
  hookGroupId: ID!,
  hookId: ID!,
  firedBy: HookFiredBy!,
  taskId: String!,
  taskCreateTime: DateTime!,
  result: HookFireResult!,
  error: String!,
}

extend type Query {
  hookGroups(filter: JSON): [HookGroup]
  hooks(hookGroupId: ID!, filter: JSON): [Hook]
  hook(hookGroupId: ID!, hookId: ID!): Hook
  hookStatus(hookGroupId: ID!, hookId: ID!): HookStatus
  hookLastFires(hookGroupId: ID!, hookId: ID!, filter: JSON): [HookLastFire]
}

extend type Mutation {
  triggerHook(hookGroupId: ID!, hookId: ID!, payload: JSON!): TaskStatus
  createHook(hookGroupId: ID!, hookId: ID!, payload: HookInput!): Hook
  updateHook(hookGroupId: ID!, hookId: ID!, payload: HookInput!): Hook
  deleteHook(hookGroupId: ID!, hookId: ID!): DeleteHook
}
