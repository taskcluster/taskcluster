---
defaults:
  app:
    exchangePrefix: 'v1/'
    jobQueue: null
    statusQueue: null
    buildTableName: 'TaskclusterGithubBuilds'
    ownersDirectoryTableName: 'TaskclusterIntegrationOwners'
    publishMetaData: !env:bool PUBLISH_METADATA
    name: 'taskcluster-github'
    statusContext: 'Taskcluster'
    botName: !env BOT_USERNAME

  taskcluster:
    # Taskcluster credentials for this server, these must have scopes:
    # auth:credentials
    # (typically configured using environment variables)
    credentials:
      clientId: !env TASKCLUSTER_CLIENT_ID
      accessToken: !env TASKCLUSTER_ACCESS_TOKEN
    queueBaseUrl: !env QUEUE_BASE_URL

  github:
    credentials:
      privatePEM: !env GITHUB_PRIVATE_PEM
      integrationId: !env GITHUB_INTEGRATION_ID

  webhook:
    secret: !env:list WEBHOOK_SECRET

  intree:
    provisionerId: !env PROVISIONER_ID
    workerType: !env WORKER_TYPE

  azure:
    account: !env AZURE_ACCOUNT_NAME

  monitoring:
    project: !env MONITORING_PROJECT
    enable: !env:bool MONITORING_ENABLE

  server:
    publicUrl: 'https://github.taskcluster.net'
    port: !env:number PORT
    env: 'development'
    forceSSL: false
    trustProxy: false

  pulse:
    username: !env PULSE_USERNAME
    password: !env PULSE_PASSWORD

  aws:
    accessKeyId: !env AWS_ACCESS_KEY
    secretAccessKey: !env AWS_SECRET_KEY
    region: 'us-west-2'
    apiVersion: '2014-01-01'

production:
  app:
    jobQueue: 'jobs'
    statusQueue: 'statuses'
    botName: 'taskcluster[bot]'

  intree:
    provisionerId: 'aws-provisioner-v1'
    workerType: 'github-worker'

  server:
    publicUrl: 'https://github.taskcluster.net'
    env: 'production'
    forceSSL: true
    # We trust the proxy on heroku, as the SSL end-point provided by heroku
    # is a proxy, so we have to trust it.
    trustProxy: true

  taskcluster:
    schedulerId: taskcluster-github

staging:
  app:
    jobQueue: 'jobs'
    statusQueue: 'statuses'
    buildTableName: 'TaskclusterGithubBuildsStaging'
    ownersDirectoryTableName: 'TaskclusterIntegrationOwnersStaging'
    name: 'tc-github-staging'
    statusContext: 'Taskcluster-Staging'
    botName: 'taskcluster-staging[bot]'

  intree:
    provisionerId: 'aws-provisioner-v1'
    workerType: 'github-worker'

  server:
    publicUrl: 'https://taskcluster-github-staging.herokuapp.com'
    env: 'production'
    forceSSL: true
    # We trust the proxy on heroku, as the SSL end-point provided by heroku
    # is a proxy, so we have to trust it.
    trustProxy: true

  taskcluster:
    schedulerId: tc-gh-staging

test:
  app:
    botName: 'magicalTCspirit'

  webhook:
    secret: ['abc123', 'def456']

  azure:
    account: 'inMemory'

  monitoring:
    enable: false

  server:
    publicUrl: 'http://localhost:60415'
    port: 60415

  intree:
    provisionerId: 'dummy-provisioner'
    workerType: 'dummy-worker'

  taskcluster:
    schedulerId: tc-gh-devel

  pulse:
    fake: true
