defaults:
  app:
    exchangePrefix:               v1/

    # Number of seconds before the claim to a run expires, defaulting to 1200
    claimTimeout:                 !env:number:optional TASK_CLAIM_TIMEOUT

    # S3 buckets where artifacts are stored
    publicArtifactBucket:         !env PUBLIC_ARTIFACT_BUCKET
    privateArtifactBucket:        !env PRIVATE_ARTIFACT_BUCKET
    signPublicArtifactUrls:       !env:bool:optional SIGN_PUBLIC_ARTIFACT_URLS

    # Time delay before expiring artifacts, in readable format, see:
    # taskcluster.fromNow, notice this should be negative!
    artifactExpirationDelay:      '- 30 minutes'

    # Time delay before expiring tasks, in readable format, see:
    # taskcluster.fromNow, notice this should be negative!
    taskExpirationDelay:          '- 30 minutes'

    # Time delay before expiring worker info; notice this should be negative!
    workerInfoExpirationDelay:    '- 30 minutes'

    # update `expires`, `last_date_active` values in postgres at this frequency;
    # larger values give less accurate expires times, but reduce database traffic.
    # In readable format, see: taskcluster.fromNow. Defaulting to 30 minutes
    workerInfoUpdateFrequency:    !env:optional WORKER_INFO_UPDATE_FREQUENCY

    # Time extension of the expires property for task-group definitions.
    # This is entities holding the schedulerId for a task-group, hence, we
    # expire them later to avoid people creating tasks with a different
    # schedulerId inside a task-group where all tasks are about to expire.
    taskGroupExpiresExtension:     6220800 # 3 days as seconds

    # Prefix for azure queues (at most 6 characters)
    queuePrefix:                  queue

    # Name of azure queue for tracking claim expiration
    claimQueue:                   claim-queue

    # Name of azure queue for tracking deadlines
    deadlineQueue:                deadline-queue

    # Name of azure queue for tracking resolved tasks (dependency tracker)
    resolvedQueue:                resolved-queue

    # Number of ms before deadline expiration message arrives, past deadline
    deadlineDelay:                60000

    # Configuration for deadline-resolver
    deadlineResolver:
      # Number of ms to sleep after polling from an empty queue
      pollingDelay:               5000
      # Number of event loops to run in parallel, each taking up to 32 message
      # in parallel. Hence, 4 implies 4 * 32 = 128 messages in parallel
      parallelism:                1

    # Configuration for claim-resolver
    claimResolver:
      # Number of ms to sleep after polling from an empty queue
      pollingDelay:               5000
      # Number of event loops to run in parallel, each taking up to 32 message
      # in parallel. Hence, 4 implies 4 * 32 = 128 messages in parallel
      parallelism:                1

    # Configuration for dependency-resolver
    dependencyResolver:
      # Number of ms to sleep after polling from an empty queue
      pollingDelay:               5000

    # CDN for public artifact bucket
    publicArtifactBucketCDN:      !env:optional PUBLIC_ARTIFACT_BUCKET_CDN

    taskCacheMaxSize: !env:number:optional TASK_CACHE_MAX_SIZE


  taskcluster:
    rootUrl:          !env TASKCLUSTER_ROOT_URL
    credentials:
      clientId:       !env TASKCLUSTER_CLIENT_ID
      accessToken:    !env TASKCLUSTER_ACCESS_TOKEN

  monitoring:
    level: !env:optional LEVEL
    errorConfig: !env:json:optional ERROR_CONFIG

  server:
    port:             !env:number PORT
    env:              !env NODE_ENV
    forceSSL:         !env:bool FORCE_SSL
    trustProxy:       true

  # Azure credentials (for blob and queue storage)
  postgres:
    readDbUrl: !env READ_DB_URL
    writeDbUrl: !env WRITE_DB_URL

  pulse:
    username:                 !env PULSE_USERNAME
    password:                 !env PULSE_PASSWORD
    hostname:                 !env PULSE_HOSTNAME
    vhost:                    !env PULSE_VHOST
    amqps:                    !env:bool:optional PULSE_AMQPS

  aws:
    # Credentials with access to artifact buckets and
    # references/schemas.taskcluster.net if you wish to publish meta-data
    accessKeyId:      !env AWS_ACCESS_KEY_ID
    secretAccessKey:  !env AWS_SECRET_ACCESS_KEY
    region:           !env ARTIFACT_REGION
    endpoint:         !env:optional AWS_ENDPOINT
    apiVersion:       2014-01-01

  # new relic config (processed in services/prelude.js)
  newRelic: !env:json:optional NEW_RELIC

# Configuration of tests
test:
  taskcluster:
    rootUrl: "https://tc.example.com"

  app:
    # For testing purposes we let claims expire very fast
    claimTimeout:                 1
    queuePrefix:                  'hacks3'
    queuePrefix2:                 'hacks4' # For testing deletion of queues
    claimQueue:                   'test-claim-queue'
    deadlineQueue:                'test-deadline-queue'
    deadlineDelay:                1000
    # Positive, means we expire artifacts 4 days ahead of time, useful for
    # testing. In production this should be "- x hours" or so...
    artifactExpirationDelay:      '4 days'
    # Positive, means that expire tasks 4 days ahead of time, useful for
    # testing. In production this should be "- x hours" or so...
    taskExpirationDelay:          '4 days'
    taskGroupExpiresExtension:    0 # should always be positive in production
    deadlineResolver:
      pollingDelay:               250
      parallelism:                1
    claimResolver:
      pollingDelay:               250
      parallelism:                1
    dependencyResolver:
      pollingDelay:               250
    taskCacheMaxSize: 10
  server:
    port:             60401
    env:              development
    forceSSL:         false
    trustProxy:       false
