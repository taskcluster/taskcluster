$schema:            http://json-schema.org/draft-06/schema#
title:              "Task Template"
description: |
  Definition of a task embedded in a hook
type:               object
properties:
  provisionerId:
    title:          "Provisioner Id"
    description: |
      Unique identifier for a provisioner, that can supply specified
      `workerType`
    type:           string
    minLength:      {$const: identifier-min-length}
    maxLength:      {$const: identifier-max-length}
    pattern:        {$const: identifier-pattern}
  workerType:
    title:          "Worker Type"
    description: |
      Unique identifier for a worker-type within a specific provisioner
    type:           string
    minLength:      {$const: identifier-min-length}
    maxLength:      {$const: identifier-max-length}
    pattern:        {$const: identifier-pattern}
  schedulerId:
    title:          "Scheduler Identifier"
    description: |
      Identifier for the scheduler that _defined_ this task, this can be an
      identifier for a user or a service like the `"task-graph-scheduler"`.
      **Task submitter required scopes**
      `queue:assume:scheduler-id:<schedulerId>/<taskGroupId>`.
      This scope is also necessary to _schedule_ a defined task, or _rerun_ a
      task.
    type:           string
    minLength:      {$const: identifier-min-length}
    maxLength:      {$const: identifier-max-length}
    pattern:        {$const: identifier-pattern}
    default:        '-'
  taskGroupId:
    title:          "Task-Group Identifier"
    description: |
      Identifier for a group of tasks scheduled together with this task, by
      scheduler identified by `schedulerId`. For tasks scheduled by the
      task-graph scheduler, this is the `taskGraphId`.  Defaults to `taskId` if
      property isn't specified.
    type:           string
    pattern:        {$const: slugid-pattern}
  routes:
    title:          "Task Specific Routes"
    description: |
      List of task specific routes, AMQP messages will be CC'ed to these routes.
      **Task submitter required scopes** `queue:route:<route>` for
      each route given.
    type:           array
    default:        []
    items:
      title:        "Task Specific Route"
      description: |
        A task specific route, AMQP messages will be CC'ed with a routing key
        matching `route.<task-specific route>`. It's possible to dot (`.`) in
        the task specific route to make sub-keys, etc. See the RabbitMQ
        [tutorial](http://www.rabbitmq.com/tutorials/tutorial-five-python.html)
        for examples on how to use routing-keys.
      type:         string
      maxLength:    249
      minLength:    1
    maxItems:       10
    uniqueItems:    true
  priority:
    title:          "Task Priority"
    description: |
      Priority of task, this defaults to `normal`. Additional levels may be
      added later.
      **Task submitter required scopes** `queue:task-priority:high` for high
      priority tasks.
    type:           string
    enum:
      - high
      - normal
    default:        normal
  retries:
    title:          "Retries"
    description: |
      Number of times to retry the task in case of infrastructure issues.
      An _infrastructure issue_ is a worker node that crashes or is shutdown,
      these events are to be expected.
    type:           integer
    minimum:        0
    maximum:        49
    default:        5
  scopes:
    title:          "Scopes"
    description: |
      List of scopes (or scope-patterns) that the task is
      authorized to use.
    type:           array
    default:        []
    items:
      title:        "Scope"
      description: |
        A scope (or scope-patterns) which the task is
        authorized to use. This can be a string or a string
        ending with `*` which will authorize all scopes for
        which the string is a prefix.  Scopes must be composed of
        printable ASCII characters and spaces.
        **Task submitter required scopes** The same scope-pattern(s) given
        (otherwise a task could be submitted to perform an action that the
        task submitter is not authorized to perform).
      type:         string
      pattern:      {$const: scope-pattern}
  payload:
    title:          "Task Payload"
    description: |
      Task-specific payload following worker-specific format. For example the
      `docker-worker` requires keys like: `image`, `commands` and
      `features`. Refer to the documentation of `docker-worker` for details.
    type:           object
  metadata:
    title:          "Meta-data"
    description: |
      Required task metadata
    type:           object
    properties:
      name:
        title:          "Name"
        description: |
          Human readable name of task, used to very briefly given an idea about
          what the task does.
        type:           string
        maxLength:      255
      description:
        title:          "Description"
        description: |
          Human readable description of the task, please **explain** what the
          task does. A few lines of documentation is not going to hurt you.
        type:           string
        maxLength:      32768
      owner:
        title:          "Owner"
        description: |
          E-mail of person who caused this task, e.g. the person who did
          `hg push`. The person we should contact to ask why this task is here.
        type:           string
        format:         email
        maxLength:      255
      source:
        title:          "Source"
        description: |
          Link to source of this task, should specify a file, revision and
          repository. This should be place someone can go an do a git/hg blame
          to who came up with recipe for this task.
        type:           string
        format:         uri
        maxLength:      4096
    additionalProperties: false
    required:
      - name
      - description
      - owner
      - source
  tags:
    title:            "Tags"
    description: |
      Arbitrary key-value tags (only strings limited to 4k). These can be used
      to attach informal meta-data to a task. Use this for informal tags that
      tasks can be classified by. You can also think of strings here as
      candidates for formal meta-data. Something like
      `purpose: 'build' || 'test'` is a good example.
    type:             object
    additionalProperties:
      type:           string
      maxLength:      4096
    default:          {}
  extra:
    title:            "Extra Data"
    description: |
      Object with properties that can hold any kind of extra data that should be
      associated with the task. This can be data for the task which doesn't
      fit into `payload`, or it can supplementary data for use in services
      listening for events from this task. For example this could be details to
      display on _treeherder_, or information for indexing the task. Please, try
      to put all related information under one property, so `extra` data keys
      for treeherder reporting and task indexing don't conflict, hence, we have
      reusable services. **Warning**, do not stuff large data-sets in here,
      task definitions should not take-up multiple MiBs.
    type:             object
    default:          {}
additionalProperties: false
required:
  - provisionerId
  - workerType
  - payload
  - metadata

